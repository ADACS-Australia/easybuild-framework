== 2016-07-07 12:03:00,904 easyblock.py:255 INFO This is EasyBuild 2.9.0.dev0 (framework: 2.9.0.dev0, easyblocks: 2.8.1) on host x-wing.
== 2016-07-07 12:03:00,904 easyblock.py:261 INFO This is easyblock EB_toy from module easybuild.easyblocks.toy (/home/caroline/GitHub/easybuild-framework/test/framework/sandbox/easybuild/easyblocks/toy.pyc)
== 2016-07-07 12:03:00,904 easyblock.py:746 INFO Build dir set to /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmpHuMQeW/toy/0.0/dummy-dummy
== 2016-07-07 12:03:00,904 config.py:407 DEBUG software install path as specified by 'installpath' and 'subdir_software': /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/software
== 2016-07-07 12:03:00,905 easyconfig.py:1513 DEBUG Determining software installation subdir for <easybuild.framework.easyconfig.easyconfig.EasyConfig object at 0x7fb8e230b9d0>
== 2016-07-07 12:03:00,905 easyconfig.py:1519 DEBUG Obtained subdir toy/0.0
== 2016-07-07 12:03:00,905 easyblock.py:780 INFO Software install dir set to /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/software/toy/0.0
== 2016-07-07 12:03:00,905 config.py:407 DEBUG modules install path as specified by 'installpath' and 'subdir_modules': /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules
== 2016-07-07 12:03:00,905 easyblock.py:785 INFO Module install dir set to /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules/all
== 2016-07-07 12:03:00,905 easyblock.py:240 INFO Init completed for application name toy version 0.0
== 2016-07-07 12:03:00,906 templates.py:149 DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': [None, 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [None, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [[], "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'whatis': [None, 'List of brief (one line) package description entries', (8, 'modules')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2016-07-07 12:03:00,907 templates.py:173 DEBUG version found in easyconfig is 0.0
== 2016-07-07 12:03:00,907 templates.py:210 DEBUG name: name, config: toy
== 2016-07-07 12:03:00,907 templates.py:210 DEBUG name: version, config: 0.0
== 2016-07-07 12:03:00,908 templates.py:210 DEBUG name: versionsuffix, config: 
== 2016-07-07 12:03:00,908 templates.py:210 DEBUG name: versionprefix, config: 
== 2016-07-07 12:03:00,908 templates.py:149 DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': [None, 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [None, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [[], "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'whatis': [None, 'List of brief (one line) package description entries', (8, 'modules')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2016-07-07 12:03:00,909 templates.py:173 DEBUG version found in easyconfig is 0.0
== 2016-07-07 12:03:00,909 templates.py:210 DEBUG name: name, config: toy
== 2016-07-07 12:03:00,910 templates.py:210 DEBUG name: version, config: 0.0
== 2016-07-07 12:03:00,910 templates.py:210 DEBUG name: versionsuffix, config: 
== 2016-07-07 12:03:00,910 templates.py:210 DEBUG name: versionprefix, config: 
== 2016-07-07 12:03:00,910 easyblock.py:2519 INFO Running fetch_fetch_step step
== 2016-07-07 12:03:00,910 easyblock.py:1408 WARNING Easyconfig does not specify an EasyBuild-version (key 'easybuild_version')! Assuming the latest version
== 2016-07-07 12:03:00,910 filetools.py:217 INFO Command eb found at /usr/bin/eb
== 2016-07-07 12:03:00,910 tools.py:257 DEBUG Also considering installation prefix /usr...
== 2016-07-07 12:03:00,911 tools.py:262 DEBUG Checking for easybuild/easyconfigs at /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmpHuMQeW/easybuild/easyconfigs
== 2016-07-07 12:03:00,911 tools.py:262 DEBUG Checking for easybuild/easyconfigs at /home/caroline/GitHub/easybuild-framework/test/framework/easybuild/easyconfigs
== 2016-07-07 12:03:00,911 tools.py:262 DEBUG Checking for easybuild/easyconfigs at /home/caroline/GitHub/easybuild-framework/test/framework/easyconfigs/easybuild/easyconfigs
== 2016-07-07 12:03:00,911 tools.py:262 DEBUG Checking for easybuild/easyconfigs at easybuild/easyconfigs
== 2016-07-07 12:03:00,911 tools.py:262 DEBUG Checking for easybuild/easyconfigs at /usr/lib/python2.7/site-packages/vsc_install-0.10.8-py2.7.egg/easybuild/easyconfigs
== 2016-07-07 12:03:00,911 tools.py:262 DEBUG Checking for easybuild/easyconfigs at /usr/lib/python2.7/site-packages/vsc_utils-1.8.5-py2.7.egg/easybuild/easyconfigs
== 2016-07-07 12:03:00,911 tools.py:262 DEBUG Checking for easybuild/easyconfigs at /usr/lib/python2.7/site-packages/pycrypto-2.6.1-py2.7-linux-x86_64.egg/easybuild/easyconfigs
== 2016-07-07 12:03:00,911 tools.py:262 DEBUG Checking for easybuild/easyconfigs at /usr/lib/python2.7/site-packages/jsonpickle-0.9.3-py2.7.egg/easybuild/easyconfigs
== 2016-07-07 12:03:00,912 tools.py:262 DEBUG Checking for easybuild/easyconfigs at /usr/lib/python2.7/site-packages/netifaces-0.10.4-py2.7-linux-x86_64.egg/easybuild/easyconfigs
== 2016-07-07 12:03:00,912 tools.py:262 DEBUG Checking for easybuild/easyconfigs at /usr/lib/python2.7/site-packages/lockfile-0.12.2-py2.7.egg/easybuild/easyconfigs
== 2016-07-07 12:03:00,912 tools.py:262 DEBUG Checking for easybuild/easyconfigs at /usr/lib/python2.7/site-packages/vsc_base-2.5.1-py2.7.egg/easybuild/easyconfigs
== 2016-07-07 12:03:00,912 tools.py:262 DEBUG Checking for easybuild/easyconfigs at /usr/lib/python2.7/site-packages/easybuild_framework-2.9.0.dev0-py2.7.egg/easybuild/easyconfigs
== 2016-07-07 12:03:00,912 tools.py:262 DEBUG Checking for easybuild/easyconfigs at /home/caroline/GitHub/easybuild-framework/easybuild/easyconfigs
== 2016-07-07 12:03:00,912 tools.py:262 DEBUG Checking for easybuild/easyconfigs at /usr/lib/python27.zip/easybuild/easyconfigs
== 2016-07-07 12:03:00,912 tools.py:262 DEBUG Checking for easybuild/easyconfigs at /usr/lib/python2.7/easybuild/easyconfigs
== 2016-07-07 12:03:00,912 tools.py:262 DEBUG Checking for easybuild/easyconfigs at /usr/lib/python2.7/plat-linux2/easybuild/easyconfigs
== 2016-07-07 12:03:00,912 tools.py:262 DEBUG Checking for easybuild/easyconfigs at /usr/lib/python2.7/lib-tk/easybuild/easyconfigs
== 2016-07-07 12:03:00,913 tools.py:262 DEBUG Checking for easybuild/easyconfigs at /usr/lib/python2.7/lib-old/easybuild/easyconfigs
== 2016-07-07 12:03:00,913 tools.py:262 DEBUG Checking for easybuild/easyconfigs at /usr/lib/python2.7/lib-dynload/easybuild/easyconfigs
== 2016-07-07 12:03:00,913 tools.py:262 DEBUG Checking for easybuild/easyconfigs at /usr/lib/python2.7/site-packages/easybuild/easyconfigs
== 2016-07-07 12:03:00,913 tools.py:262 DEBUG Checking for easybuild/easyconfigs at /usr/lib/python2.7/site-packages/gtk-2.0/easybuild/easyconfigs
== 2016-07-07 12:03:00,913 tools.py:262 DEBUG Checking for easybuild/easyconfigs at /home/caroline/GitHub/easybuild-framework/test/framework/sandbox/easybuild/easyconfigs
== 2016-07-07 12:03:00,913 tools.py:262 DEBUG Checking for easybuild/easyconfigs at /usr/lib/python2.7/site-packages/easybuild_easyblocks-2.8.1-py2.7.egg/easybuild/easybuild/easyconfigs
== 2016-07-07 12:03:00,913 tools.py:262 DEBUG Checking for easybuild/easyconfigs at /home/caroline/GitHub/easybuild-framework/test/framework/sandbox/easybuild/easybuild/easyconfigs
== 2016-07-07 12:03:00,913 tools.py:262 DEBUG Checking for easybuild/easyconfigs at /usr/easybuild/easyconfigs
== 2016-07-07 12:03:00,914 easyblock.py:584 INFO Found file toy-0.0.tar.gz at /home/caroline/GitHub/easybuild-framework/test/framework/sandbox/sources/toy/toy-0.0.tar.gz
== 2016-07-07 12:03:00,914 easyblock.py:332 DEBUG File /home/caroline/GitHub/easybuild-framework/test/framework/sandbox/sources/toy/toy-0.0.tar.gz found for source toy-0.0.tar.gz
== 2016-07-07 12:03:00,914 easyblock.py:344 INFO Added sources: [{'path': '/home/caroline/GitHub/easybuild-framework/test/framework/sandbox/sources/toy/toy-0.0.tar.gz', 'cmd': None, 'finalpath': '/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmpHuMQeW/toy/0.0/dummy-dummy', 'name': 'toy-0.0.tar.gz', 'checksum': ['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]}]
== 2016-07-07 12:03:00,914 filetools.py:217 INFO Command eb found at /usr/bin/eb
== 2016-07-07 12:03:00,914 tools.py:257 DEBUG Also considering installation prefix /usr...
== 2016-07-07 12:03:00,915 tools.py:262 DEBUG Checking for easybuild/easyconfigs at /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmpHuMQeW/easybuild/easyconfigs
== 2016-07-07 12:03:00,915 tools.py:262 DEBUG Checking for easybuild/easyconfigs at /home/caroline/GitHub/easybuild-framework/test/framework/easybuild/easyconfigs
== 2016-07-07 12:03:00,915 tools.py:262 DEBUG Checking for easybuild/easyconfigs at /home/caroline/GitHub/easybuild-framework/test/framework/easyconfigs/easybuild/easyconfigs
== 2016-07-07 12:03:00,915 tools.py:262 DEBUG Checking for easybuild/easyconfigs at easybuild/easyconfigs
== 2016-07-07 12:03:00,915 tools.py:262 DEBUG Checking for easybuild/easyconfigs at /usr/lib/python2.7/site-packages/vsc_install-0.10.8-py2.7.egg/easybuild/easyconfigs
== 2016-07-07 12:03:00,915 tools.py:262 DEBUG Checking for easybuild/easyconfigs at /usr/lib/python2.7/site-packages/vsc_utils-1.8.5-py2.7.egg/easybuild/easyconfigs
== 2016-07-07 12:03:00,915 tools.py:262 DEBUG Checking for easybuild/easyconfigs at /usr/lib/python2.7/site-packages/pycrypto-2.6.1-py2.7-linux-x86_64.egg/easybuild/easyconfigs
== 2016-07-07 12:03:00,915 tools.py:262 DEBUG Checking for easybuild/easyconfigs at /usr/lib/python2.7/site-packages/jsonpickle-0.9.3-py2.7.egg/easybuild/easyconfigs
== 2016-07-07 12:03:00,916 tools.py:262 DEBUG Checking for easybuild/easyconfigs at /usr/lib/python2.7/site-packages/netifaces-0.10.4-py2.7-linux-x86_64.egg/easybuild/easyconfigs
== 2016-07-07 12:03:00,916 tools.py:262 DEBUG Checking for easybuild/easyconfigs at /usr/lib/python2.7/site-packages/lockfile-0.12.2-py2.7.egg/easybuild/easyconfigs
== 2016-07-07 12:03:00,916 tools.py:262 DEBUG Checking for easybuild/easyconfigs at /usr/lib/python2.7/site-packages/vsc_base-2.5.1-py2.7.egg/easybuild/easyconfigs
== 2016-07-07 12:03:00,916 tools.py:262 DEBUG Checking for easybuild/easyconfigs at /usr/lib/python2.7/site-packages/easybuild_framework-2.9.0.dev0-py2.7.egg/easybuild/easyconfigs
== 2016-07-07 12:03:00,916 tools.py:262 DEBUG Checking for easybuild/easyconfigs at /home/caroline/GitHub/easybuild-framework/easybuild/easyconfigs
== 2016-07-07 12:03:00,916 tools.py:262 DEBUG Checking for easybuild/easyconfigs at /usr/lib/python27.zip/easybuild/easyconfigs
== 2016-07-07 12:03:00,916 tools.py:262 DEBUG Checking for easybuild/easyconfigs at /usr/lib/python2.7/easybuild/easyconfigs
== 2016-07-07 12:03:00,916 tools.py:262 DEBUG Checking for easybuild/easyconfigs at /usr/lib/python2.7/plat-linux2/easybuild/easyconfigs
== 2016-07-07 12:03:00,917 tools.py:262 DEBUG Checking for easybuild/easyconfigs at /usr/lib/python2.7/lib-tk/easybuild/easyconfigs
== 2016-07-07 12:03:00,917 tools.py:262 DEBUG Checking for easybuild/easyconfigs at /usr/lib/python2.7/lib-old/easybuild/easyconfigs
== 2016-07-07 12:03:00,917 tools.py:262 DEBUG Checking for easybuild/easyconfigs at /usr/lib/python2.7/lib-dynload/easybuild/easyconfigs
== 2016-07-07 12:03:00,917 tools.py:262 DEBUG Checking for easybuild/easyconfigs at /usr/lib/python2.7/site-packages/easybuild/easyconfigs
== 2016-07-07 12:03:00,917 tools.py:262 DEBUG Checking for easybuild/easyconfigs at /usr/lib/python2.7/site-packages/gtk-2.0/easybuild/easyconfigs
== 2016-07-07 12:03:00,917 tools.py:262 DEBUG Checking for easybuild/easyconfigs at /home/caroline/GitHub/easybuild-framework/test/framework/sandbox/easybuild/easyconfigs
== 2016-07-07 12:03:00,917 tools.py:262 DEBUG Checking for easybuild/easyconfigs at /usr/lib/python2.7/site-packages/easybuild_easyblocks-2.8.1-py2.7.egg/easybuild/easybuild/easyconfigs
== 2016-07-07 12:03:00,917 tools.py:262 DEBUG Checking for easybuild/easyconfigs at /home/caroline/GitHub/easybuild-framework/test/framework/sandbox/easybuild/easybuild/easyconfigs
== 2016-07-07 12:03:00,917 tools.py:262 DEBUG Checking for easybuild/easyconfigs at /usr/easybuild/easyconfigs
== 2016-07-07 12:03:00,918 easyblock.py:584 INFO Found file toy-0.0_typo.patch at /home/caroline/GitHub/easybuild-framework/test/framework/sandbox/sources/toy/toy-0.0_typo.patch
== 2016-07-07 12:03:00,918 easyblock.py:384 DEBUG File /home/caroline/GitHub/easybuild-framework/test/framework/sandbox/sources/toy/toy-0.0_typo.patch found for patch toy-0.0_typo.patch
== 2016-07-07 12:03:00,918 filetools.py:217 INFO Command eb found at /usr/bin/eb
== 2016-07-07 12:03:00,918 tools.py:257 DEBUG Also considering installation prefix /usr...
== 2016-07-07 12:03:00,918 tools.py:262 DEBUG Checking for easybuild/easyconfigs at /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmpHuMQeW/easybuild/easyconfigs
== 2016-07-07 12:03:00,918 tools.py:262 DEBUG Checking for easybuild/easyconfigs at /home/caroline/GitHub/easybuild-framework/test/framework/easybuild/easyconfigs
== 2016-07-07 12:03:00,919 tools.py:262 DEBUG Checking for easybuild/easyconfigs at /home/caroline/GitHub/easybuild-framework/test/framework/easyconfigs/easybuild/easyconfigs
== 2016-07-07 12:03:00,919 tools.py:262 DEBUG Checking for easybuild/easyconfigs at easybuild/easyconfigs
== 2016-07-07 12:03:00,919 tools.py:262 DEBUG Checking for easybuild/easyconfigs at /usr/lib/python2.7/site-packages/vsc_install-0.10.8-py2.7.egg/easybuild/easyconfigs
== 2016-07-07 12:03:00,919 tools.py:262 DEBUG Checking for easybuild/easyconfigs at /usr/lib/python2.7/site-packages/vsc_utils-1.8.5-py2.7.egg/easybuild/easyconfigs
== 2016-07-07 12:03:00,919 tools.py:262 DEBUG Checking for easybuild/easyconfigs at /usr/lib/python2.7/site-packages/pycrypto-2.6.1-py2.7-linux-x86_64.egg/easybuild/easyconfigs
== 2016-07-07 12:03:00,919 tools.py:262 DEBUG Checking for easybuild/easyconfigs at /usr/lib/python2.7/site-packages/jsonpickle-0.9.3-py2.7.egg/easybuild/easyconfigs
== 2016-07-07 12:03:00,919 tools.py:262 DEBUG Checking for easybuild/easyconfigs at /usr/lib/python2.7/site-packages/netifaces-0.10.4-py2.7-linux-x86_64.egg/easybuild/easyconfigs
== 2016-07-07 12:03:00,919 tools.py:262 DEBUG Checking for easybuild/easyconfigs at /usr/lib/python2.7/site-packages/lockfile-0.12.2-py2.7.egg/easybuild/easyconfigs
== 2016-07-07 12:03:00,919 tools.py:262 DEBUG Checking for easybuild/easyconfigs at /usr/lib/python2.7/site-packages/vsc_base-2.5.1-py2.7.egg/easybuild/easyconfigs
== 2016-07-07 12:03:00,920 tools.py:262 DEBUG Checking for easybuild/easyconfigs at /usr/lib/python2.7/site-packages/easybuild_framework-2.9.0.dev0-py2.7.egg/easybuild/easyconfigs
== 2016-07-07 12:03:00,920 tools.py:262 DEBUG Checking for easybuild/easyconfigs at /home/caroline/GitHub/easybuild-framework/easybuild/easyconfigs
== 2016-07-07 12:03:00,920 tools.py:262 DEBUG Checking for easybuild/easyconfigs at /usr/lib/python27.zip/easybuild/easyconfigs
== 2016-07-07 12:03:00,920 tools.py:262 DEBUG Checking for easybuild/easyconfigs at /usr/lib/python2.7/easybuild/easyconfigs
== 2016-07-07 12:03:00,920 tools.py:262 DEBUG Checking for easybuild/easyconfigs at /usr/lib/python2.7/plat-linux2/easybuild/easyconfigs
== 2016-07-07 12:03:00,920 tools.py:262 DEBUG Checking for easybuild/easyconfigs at /usr/lib/python2.7/lib-tk/easybuild/easyconfigs
== 2016-07-07 12:03:00,920 tools.py:262 DEBUG Checking for easybuild/easyconfigs at /usr/lib/python2.7/lib-old/easybuild/easyconfigs
== 2016-07-07 12:03:00,920 tools.py:262 DEBUG Checking for easybuild/easyconfigs at /usr/lib/python2.7/lib-dynload/easybuild/easyconfigs
== 2016-07-07 12:03:00,921 tools.py:262 DEBUG Checking for easybuild/easyconfigs at /usr/lib/python2.7/site-packages/easybuild/easyconfigs
== 2016-07-07 12:03:00,921 tools.py:262 DEBUG Checking for easybuild/easyconfigs at /usr/lib/python2.7/site-packages/gtk-2.0/easybuild/easyconfigs
== 2016-07-07 12:03:00,921 tools.py:262 DEBUG Checking for easybuild/easyconfigs at /home/caroline/GitHub/easybuild-framework/test/framework/sandbox/easybuild/easyconfigs
== 2016-07-07 12:03:00,921 tools.py:262 DEBUG Checking for easybuild/easyconfigs at /usr/lib/python2.7/site-packages/easybuild_easyblocks-2.8.1-py2.7.egg/easybuild/easybuild/easyconfigs
== 2016-07-07 12:03:00,921 tools.py:262 DEBUG Checking for easybuild/easyconfigs at /home/caroline/GitHub/easybuild-framework/test/framework/sandbox/easybuild/easybuild/easyconfigs
== 2016-07-07 12:03:00,921 tools.py:262 DEBUG Checking for easybuild/easyconfigs at /usr/easybuild/easyconfigs
== 2016-07-07 12:03:00,921 easyblock.py:584 INFO Found file toy-extra.txt at /home/caroline/GitHub/easybuild-framework/test/framework/sandbox/sources/toy/toy-extra.txt
== 2016-07-07 12:03:00,922 easyblock.py:384 DEBUG File /home/caroline/GitHub/easybuild-framework/test/framework/sandbox/sources/toy/toy-extra.txt found for patch ('toy-extra.txt', 'toy-0.0')
== 2016-07-07 12:03:00,922 easyblock.py:409 INFO Added patches: [{'path': '/home/caroline/GitHub/easybuild-framework/test/framework/sandbox/sources/toy/toy-0.0_typo.patch', 'name': 'toy-0.0_typo.patch', 'checksum': None}, {'path': '/home/caroline/GitHub/easybuild-framework/test/framework/sandbox/sources/toy/toy-extra.txt', 'copy': 'toy-0.0', 'name': 'toy-extra.txt', 'checksum': None}]
== 2016-07-07 12:03:00,922 filetools.py:463 DEBUG Using blocksize 16777216 for calculating the checksum
== 2016-07-07 12:03:00,922 easyblock.py:1458 INFO md5 checksum for /home/caroline/GitHub/easybuild-framework/test/framework/sandbox/sources/toy/toy-0.0.tar.gz: be662daa971a640e40be5c804d9d7d10
== 2016-07-07 12:03:00,922 filetools.py:463 DEBUG Using blocksize 16777216 for calculating the checksum
== 2016-07-07 12:03:00,922 easyblock.py:1458 INFO md5 checksum for /home/caroline/GitHub/easybuild-framework/test/framework/sandbox/sources/toy/toy-0.0_typo.patch: e6785e1a721fc8bf79892e3ef41557c0
== 2016-07-07 12:03:00,922 filetools.py:463 DEBUG Using blocksize 16777216 for calculating the checksum
== 2016-07-07 12:03:00,923 easyblock.py:1458 INFO md5 checksum for /home/caroline/GitHub/easybuild-framework/test/framework/sandbox/sources/toy/toy-extra.txt: 3b0787b3bf36603ae1398c4a49097893
== 2016-07-07 12:03:00,923 config.py:407 DEBUG modules install path as specified by 'installpath' and 'subdir_modules': /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules
== 2016-07-07 12:03:00,923 easyblock.py:1475 INFO Checking dirs that need to be created: ['/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/software/toy/0.0', '/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules/all/toy', '/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules/tools/toy']
== 2016-07-07 12:03:00,923 filetools.py:909 INFO Creating directory /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/software/toy/0.0 (parents: True, set_gid: False, sticky: False)
== 2016-07-07 12:03:00,923 filetools.py:909 INFO Creating directory /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules/all/toy (parents: True, set_gid: False, sticky: False)
== 2016-07-07 12:03:00,923 filetools.py:909 INFO Creating directory /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules/tools/toy (parents: True, set_gid: False, sticky: False)
== 2016-07-07 12:03:00,924 templates.py:149 DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': [None, 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [None, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [[], "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'whatis': [None, 'List of brief (one line) package description entries', (8, 'modules')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2016-07-07 12:03:00,925 templates.py:173 DEBUG version found in easyconfig is 0.0
== 2016-07-07 12:03:00,925 templates.py:210 DEBUG name: name, config: toy
== 2016-07-07 12:03:00,925 templates.py:210 DEBUG name: version, config: 0.0
== 2016-07-07 12:03:00,925 templates.py:210 DEBUG name: versionsuffix, config: 
== 2016-07-07 12:03:00,925 templates.py:210 DEBUG name: versionprefix, config: 
== 2016-07-07 12:03:00,926 templates.py:149 DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': [None, 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [None, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [[], "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'whatis': [None, 'List of brief (one line) package description entries', (8, 'modules')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2016-07-07 12:03:00,927 templates.py:173 DEBUG version found in easyconfig is 0.0
== 2016-07-07 12:03:00,927 templates.py:210 DEBUG name: name, config: toy
== 2016-07-07 12:03:00,927 templates.py:210 DEBUG name: version, config: 0.0
== 2016-07-07 12:03:00,927 templates.py:210 DEBUG name: versionsuffix, config: 
== 2016-07-07 12:03:00,928 templates.py:210 DEBUG name: versionprefix, config: 
== 2016-07-07 12:03:00,928 easyblock.py:2519 INFO Running ready_check_readiness_step step
== 2016-07-07 12:03:00,928 easyblock.py:1369 DEBUG Desired parallelism specified via 'parallel' build option: None
== 2016-07-07 12:03:00,929 affinity.py:209 DEBUG sched_getaffinity for pid 4436 returned cpuset 0-7
== 2016-07-07 12:03:00,929 run.py:99 DEBUG run_cmd: running cmd ulimit -u (in /home/caroline/GitHub/easybuild-framework)
== 2016-07-07 12:03:00,933 run.py:392 DEBUG cmd "ulimit -u" exited with exitcode 0 and output:
30151

== 2016-07-07 12:03:00,933 run.py:436 DEBUG Using default regular expression: (?<![(,-]|\w)(?:error|segmentation fault|failed)(?![(,-]|\.?\w)
== 2016-07-07 12:03:00,933 easyblock.py:1372 INFO Setting parallelism: 8
== 2016-07-07 12:03:00,934 modules.py:603 DEBUG Current MODULEPATH: /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules/all:/home/caroline/GitHub/easybuild-framework/test/framework/modules
== 2016-07-07 12:03:00,934 modules.py:610 DEBUG Changing LD_LIBRARY_PATH from '' to '' in environment for module command
== 2016-07-07 12:03:00,934 modules.py:610 DEBUG Changing LD_PRELOAD from '' to '' in environment for module command
== 2016-07-07 12:03:00,934 modules.py:621 DEBUG Running module command '/usr/local/Modules/3.2.10/bin/modulecmd python --terse list' from /home/caroline/GitHub/easybuild-framework
== 2016-07-07 12:03:00,938 modules.py:627 DEBUG Output of module command '/usr/local/Modules/3.2.10/bin/modulecmd python --terse list': stdout: ; stderr: No Modulefiles Currently Loaded.

== 2016-07-07 12:03:00,938 modules.py:580 DEBUG No checking of module output implemented for EnvironmentModulesC
== 2016-07-07 12:03:00,939 modules.py:658 DEBUG Correcting paths in $LD_LIBRARY_PATH from [''] to []
== 2016-07-07 12:03:00,939 modules.py:658 DEBUG Correcting paths in $LD_PRELOAD from [''] to []
== 2016-07-07 12:03:00,939 easyconfig.py:598 DEBUG Dependencies BEFORE filtering: []
== 2016-07-07 12:03:00,939 toolchain.py:359 DEBUG add_dependencies: adding toolchain dependencies []
== 2016-07-07 12:03:00,939 modules.py:603 DEBUG Current MODULEPATH: /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules/all:/home/caroline/GitHub/easybuild-framework/test/framework/modules
== 2016-07-07 12:03:00,939 modules.py:610 DEBUG Changing LD_LIBRARY_PATH from '' to '' in environment for module command
== 2016-07-07 12:03:00,940 modules.py:610 DEBUG Changing LD_PRELOAD from '' to '' in environment for module command
== 2016-07-07 12:03:00,940 modules.py:621 DEBUG Running module command '/usr/local/Modules/3.2.10/bin/modulecmd python --terse avail ' from /home/caroline/GitHub/easybuild-framework
== 2016-07-07 12:03:00,947 modules.py:627 DEBUG Output of module command '/usr/local/Modules/3.2.10/bin/modulecmd python --terse avail ': stdout: ; stderr: /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules/all:
/home/caroline/GitHub/easybuild-framework/test/framework/modules:
ATLAS/3.8.4-gompi-1.1.0-no-OFED-LAPACK-3.4.0
BLACS/1.1-gompi-1.1.0-no-OFED
CategorizedHMNS/Compiler/GCC/4.7.2/mpi/OpenMPI/1.6.4
CategorizedHMNS/Compiler/GCC/4.7.2/system/hwloc/1.6.2
CategorizedHMNS/Core/compiler/GCC/4.7.2
CategorizedHMNS/Core/toolchain/gompi/1.4.10
CategorizedHMNS/Core/toolchain/goolf/1.4.10
CategorizedHMNS/MPI/GCC/4.7.2/OpenMPI/1.6.4/numlib/FFTW/3.3.3
CategorizedHMNS/MPI/GCC/4.7.2/OpenMPI/1.6.4/numlib/OpenBLAS/0.2.6-LAPACK-3.4.2
CategorizedHMNS/MPI/GCC/4.7.2/OpenMPI/1.6.4/numlib/ScaLAPACK/2.0.2-OpenBLAS-0.2.6-LAPACK-3.4.2
cce/8.3.12
cgompi/1.1.6
cgoolf/1.1.6
Clang/3.2-GCC-4.7.2
ClangGCC/1.1.2
Compiler/GCC/4.7.2/hwloc/1.6.2
Compiler/GCC/4.7.2/OpenMPI/1.6.4
Compiler/intel/2013.5.192-GCC-4.8.3/impi/4.1.3.049
Core/GCC/4.7.2
Core/GCC/4.8.3
Core/gompi/1.4.10
Core/goolf/1.4.10
Core/icc/2013.5.192-GCC-4.8.3
Core/iccifort/2013.5.192-GCC-4.8.3
Core/ifort/2013.5.192-GCC-4.8.3
Core/iimpi/5.5.3-GCC-4.8.3
CrayCCE/2015.06-XC
CrayGNU/2015.06-XC
CrayIntel/2015.06-XC
cray-libsci/13.0.4
cray-mpich/7.2.2
craype-test
CUDA/5.0.35-1
FFTW/3.3.1-gompi-1.1.0-no-OFED
FFTW/3.3.3-cgompi-1.1.6
FFTW/3.3.3-gompi-1.3.12
GCC/4.6.3
GCC/4.6.4(default)
GCC/4.7.2
goalf/1.1.0-no-OFED
goalf/1.1.0-no-OFED-brokenBLACS
goalf/1.1.0-no-OFED-brokenFFTW
gompi/1.1.0-no-OFED
gompi/1.3.12
goolfc/1.3.12
hwloc/1.6.2-ClangGCC-1.1.2
hwloc/1.6.2-GCC-4.6.4
icc/11.1.073
icc/2011.13.367
iccifort/2011.13.367
ictce/3.2.2.u3
ictce/4.1.13
ifort/11.1.073
ifort/2011.13.367
imkl/10.2.6.038
imkl/10.3.12.361
impi/4.0.0.028
impi/4.1.0.027
intel/15.0.1.133
LAPACK/3.4.0-gompi-1.1.0-no-OFED
MPI/GCC/4.7.2/OpenMPI/1.6.4/FFTW/3.3.3
MPI/GCC/4.7.2/OpenMPI/1.6.4/OpenBLAS/0.2.6-LAPACK-3.4.2
MPI/GCC/4.7.2/OpenMPI/1.6.4/ScaLAPACK/2.0.2-OpenBLAS-0.2.6-LAPACK-3.4.2
OpenBLAS/0.2.6-cgompi-1.1.6-LAPACK-3.4.2
OpenBLAS/0.2.6-gompi-1.3.12-LAPACK-3.4.2
OpenMPI/1.4.5-GCC-4.6.3-no-OFED
OpenMPI/1.6.4-ClangGCC-1.1.2
OpenMPI/1.6.4-GCC-4.6.4
PrgEnv-cray/5.2.40
PrgEnv-gnu/5.2.40
PrgEnv-intel/5.2.40
PrgEnv-pgi/5.2.40
ScaLAPACK/1.8.0-gompi-1.1.0-no-OFED-ATLAS-3.8.4-LAPACK-3.4.0-BLACS-1.1
ScaLAPACK/2.0.2-cgompi-1.1.6-OpenBLAS-0.2.6-LAPACK-3.4.2
ScaLAPACK/2.0.2-gompi-1.3.12-OpenBLAS-0.2.6-LAPACK-3.4.2
toy/0.0

== 2016-07-07 12:03:00,947 modules.py:580 DEBUG No checking of module output implemented for EnvironmentModulesC
== 2016-07-07 12:03:00,948 modules.py:658 DEBUG Correcting paths in $LD_LIBRARY_PATH from [''] to []
== 2016-07-07 12:03:00,948 modules.py:658 DEBUG Correcting paths in $LD_PRELOAD from [''] to []
== 2016-07-07 12:03:00,948 modules.py:423 DEBUG 'module available ' gave 76 answers: ['ATLAS/3.8.4-gompi-1.1.0-no-OFED-LAPACK-3.4.0', 'BLACS/1.1-gompi-1.1.0-no-OFED', 'CUDA/5.0.35-1', 'CategorizedHMNS/Compiler/GCC/4.7.2/mpi/OpenMPI/1.6.4', 'CategorizedHMNS/Compiler/GCC/4.7.2/system/hwloc/1.6.2', 'CategorizedHMNS/Core/compiler/GCC/4.7.2', 'CategorizedHMNS/Core/toolchain/gompi/1.4.10', 'CategorizedHMNS/Core/toolchain/goolf/1.4.10', 'CategorizedHMNS/MPI/GCC/4.7.2/OpenMPI/1.6.4/numlib/FFTW/3.3.3', 'CategorizedHMNS/MPI/GCC/4.7.2/OpenMPI/1.6.4/numlib/OpenBLAS/0.2.6-LAPACK-3.4.2', 'CategorizedHMNS/MPI/GCC/4.7.2/OpenMPI/1.6.4/numlib/ScaLAPACK/2.0.2-OpenBLAS-0.2.6-LAPACK-3.4.2', 'Clang/3.2-GCC-4.7.2', 'ClangGCC/1.1.2', 'Compiler/GCC/4.7.2/OpenMPI/1.6.4', 'Compiler/GCC/4.7.2/hwloc/1.6.2', 'Compiler/intel/2013.5.192-GCC-4.8.3/impi/4.1.3.049', 'Core/GCC/4.7.2', 'Core/GCC/4.8.3', 'Core/gompi/1.4.10', 'Core/goolf/1.4.10', 'Core/icc/2013.5.192-GCC-4.8.3', 'Core/iccifort/2013.5.192-GCC-4.8.3', 'Core/ifort/2013.5.192-GCC-4.8.3', 'Core/iimpi/5.5.3-GCC-4.8.3', 'CrayCCE/2015.06-XC', 'CrayGNU/2015.06-XC', 'CrayIntel/2015.06-XC', 'FFTW/3.3.1-gompi-1.1.0-no-OFED', 'FFTW/3.3.3-cgompi-1.1.6', 'FFTW/3.3.3-gompi-1.3.12', 'GCC/4.6.3', 'GCC/4.6.4', 'GCC/4.7.2', 'LAPACK/3.4.0-gompi-1.1.0-no-OFED', 'MPI/GCC/4.7.2/OpenMPI/1.6.4/FFTW/3.3.3', 'MPI/GCC/4.7.2/OpenMPI/1.6.4/OpenBLAS/0.2.6-LAPACK-3.4.2', 'MPI/GCC/4.7.2/OpenMPI/1.6.4/ScaLAPACK/2.0.2-OpenBLAS-0.2.6-LAPACK-3.4.2', 'OpenBLAS/0.2.6-cgompi-1.1.6-LAPACK-3.4.2', 'OpenBLAS/0.2.6-gompi-1.3.12-LAPACK-3.4.2', 'OpenMPI/1.4.5-GCC-4.6.3-no-OFED', 'OpenMPI/1.6.4-ClangGCC-1.1.2', 'OpenMPI/1.6.4-GCC-4.6.4', 'PrgEnv-cray/5.2.40', 'PrgEnv-gnu/5.2.40', 'PrgEnv-intel/5.2.40', 'PrgEnv-pgi/5.2.40', 'ScaLAPACK/1.8.0-gompi-1.1.0-no-OFED-ATLAS-3.8.4-LAPACK-3.4.0-BLACS-1.1', 'ScaLAPACK/2.0.2-cgompi-1.1.6-OpenBLAS-0.2.6-LAPACK-3.4.2', 'ScaLAPACK/2.0.2-gompi-1.3.12-OpenBLAS-0.2.6-LAPACK-3.4.2', 'cce/8.3.12', 'cgompi/1.1.6', 'cgoolf/1.1.6', 'cray-libsci/13.0.4', 'cray-mpich/7.2.2', 'craype-test', 'goalf/1.1.0-no-OFED', 'goalf/1.1.0-no-OFED-brokenBLACS', 'goalf/1.1.0-no-OFED-brokenFFTW', 'gompi/1.1.0-no-OFED', 'gompi/1.3.12', 'goolfc/1.3.12', 'hwloc/1.6.2-ClangGCC-1.1.2', 'hwloc/1.6.2-GCC-4.6.4', 'icc/11.1.073', 'icc/2011.13.367', 'iccifort/2011.13.367', 'ictce/3.2.2.u3', 'ictce/4.1.13', 'ifort/11.1.073', 'ifort/2011.13.367', 'imkl/10.2.6.038', 'imkl/10.3.12.361', 'impi/4.0.0.028', 'impi/4.1.0.027', 'intel/15.0.1.133', 'toy/0.0']
== 2016-07-07 12:03:00,949 modules.py:427 DEBUG Cached result for 'module avail' with key '('MODULEPATH=/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules/all:/home/caroline/GitHub/easybuild-framework/test/framework/modules', 'modulecmd', '')': ['ATLAS/3.8.4-gompi-1.1.0-no-OFED-LAPACK-3.4.0', 'BLACS/1.1-gompi-1.1.0-no-OFED', 'CUDA/5.0.35-1', 'CategorizedHMNS/Compiler/GCC/4.7.2/mpi/OpenMPI/1.6.4', 'CategorizedHMNS/Compiler/GCC/4.7.2/system/hwloc/1.6.2', 'CategorizedHMNS/Core/compiler/GCC/4.7.2', 'CategorizedHMNS/Core/toolchain/gompi/1.4.10', 'CategorizedHMNS/Core/toolchain/goolf/1.4.10', 'CategorizedHMNS/MPI/GCC/4.7.2/OpenMPI/1.6.4/numlib/FFTW/3.3.3', 'CategorizedHMNS/MPI/GCC/4.7.2/OpenMPI/1.6.4/numlib/OpenBLAS/0.2.6-LAPACK-3.4.2', 'CategorizedHMNS/MPI/GCC/4.7.2/OpenMPI/1.6.4/numlib/ScaLAPACK/2.0.2-OpenBLAS-0.2.6-LAPACK-3.4.2', 'Clang/3.2-GCC-4.7.2', 'ClangGCC/1.1.2', 'Compiler/GCC/4.7.2/OpenMPI/1.6.4', 'Compiler/GCC/4.7.2/hwloc/1.6.2', 'Compiler/intel/2013.5.192-GCC-4.8.3/impi/4.1.3.049', 'Core/GCC/4.7.2', 'Core/GCC/4.8.3', 'Core/gompi/1.4.10', 'Core/goolf/1.4.10', 'Core/icc/2013.5.192-GCC-4.8.3', 'Core/iccifort/2013.5.192-GCC-4.8.3', 'Core/ifort/2013.5.192-GCC-4.8.3', 'Core/iimpi/5.5.3-GCC-4.8.3', 'CrayCCE/2015.06-XC', 'CrayGNU/2015.06-XC', 'CrayIntel/2015.06-XC', 'FFTW/3.3.1-gompi-1.1.0-no-OFED', 'FFTW/3.3.3-cgompi-1.1.6', 'FFTW/3.3.3-gompi-1.3.12', 'GCC/4.6.3', 'GCC/4.6.4', 'GCC/4.7.2', 'LAPACK/3.4.0-gompi-1.1.0-no-OFED', 'MPI/GCC/4.7.2/OpenMPI/1.6.4/FFTW/3.3.3', 'MPI/GCC/4.7.2/OpenMPI/1.6.4/OpenBLAS/0.2.6-LAPACK-3.4.2', 'MPI/GCC/4.7.2/OpenMPI/1.6.4/ScaLAPACK/2.0.2-OpenBLAS-0.2.6-LAPACK-3.4.2', 'OpenBLAS/0.2.6-cgompi-1.1.6-LAPACK-3.4.2', 'OpenBLAS/0.2.6-gompi-1.3.12-LAPACK-3.4.2', 'OpenMPI/1.4.5-GCC-4.6.3-no-OFED', 'OpenMPI/1.6.4-ClangGCC-1.1.2', 'OpenMPI/1.6.4-GCC-4.6.4', 'PrgEnv-cray/5.2.40', 'PrgEnv-gnu/5.2.40', 'PrgEnv-intel/5.2.40', 'PrgEnv-pgi/5.2.40', 'ScaLAPACK/1.8.0-gompi-1.1.0-no-OFED-ATLAS-3.8.4-LAPACK-3.4.0-BLACS-1.1', 'ScaLAPACK/2.0.2-cgompi-1.1.6-OpenBLAS-0.2.6-LAPACK-3.4.2', 'ScaLAPACK/2.0.2-gompi-1.3.12-OpenBLAS-0.2.6-LAPACK-3.4.2', 'cce/8.3.12', 'cgompi/1.1.6', 'cgoolf/1.1.6', 'cray-libsci/13.0.4', 'cray-mpich/7.2.2', 'craype-test', 'goalf/1.1.0-no-OFED', 'goalf/1.1.0-no-OFED-brokenBLACS', 'goalf/1.1.0-no-OFED-brokenFFTW', 'gompi/1.1.0-no-OFED', 'gompi/1.3.12', 'goolfc/1.3.12', 'hwloc/1.6.2-ClangGCC-1.1.2', 'hwloc/1.6.2-GCC-4.6.4', 'icc/11.1.073', 'icc/2011.13.367', 'iccifort/2011.13.367', 'ictce/3.2.2.u3', 'ictce/4.1.13', 'ifort/11.1.073', 'ifort/2011.13.367', 'imkl/10.2.6.038', 'imkl/10.3.12.361', 'impi/4.0.0.028', 'impi/4.1.0.027', 'intel/15.0.1.133', 'toy/0.0']
== 2016-07-07 12:03:00,949 easyconfig.py:598 DEBUG Dependencies BEFORE filtering: []
== 2016-07-07 12:03:00,950 templates.py:149 DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': [None, 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [8, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [[], "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'whatis': [None, 'List of brief (one line) package description entries', (8, 'modules')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2016-07-07 12:03:00,951 templates.py:173 DEBUG version found in easyconfig is 0.0
== 2016-07-07 12:03:00,951 templates.py:210 DEBUG name: name, config: toy
== 2016-07-07 12:03:00,952 templates.py:210 DEBUG name: version, config: 0.0
== 2016-07-07 12:03:00,952 templates.py:210 DEBUG name: versionsuffix, config: 
== 2016-07-07 12:03:00,952 templates.py:210 DEBUG name: versionprefix, config: 
== 2016-07-07 12:03:00,952 templates.py:149 DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': [None, 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [8, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [[], "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'whatis': [None, 'List of brief (one line) package description entries', (8, 'modules')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2016-07-07 12:03:00,954 templates.py:173 DEBUG version found in easyconfig is 0.0
== 2016-07-07 12:03:00,954 templates.py:210 DEBUG name: name, config: toy
== 2016-07-07 12:03:00,954 templates.py:210 DEBUG name: version, config: 0.0
== 2016-07-07 12:03:00,954 templates.py:210 DEBUG name: versionsuffix, config: 
== 2016-07-07 12:03:00,954 templates.py:210 DEBUG name: versionprefix, config: 
== 2016-07-07 12:03:00,954 easyblock.py:2519 INFO Running ready_make_builddir step
== 2016-07-07 12:03:00,955 easyblock.py:756 DEBUG Creating the build directory /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmpHuMQeW/toy/0.0/dummy-dummy (cleanup: True)
== 2016-07-07 12:03:00,955 filetools.py:909 INFO Creating directory /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmpHuMQeW/toy/0.0/dummy-dummy (parents: True, set_gid: False, sticky: False)
== 2016-07-07 12:03:00,955 templates.py:149 DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': [None, 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [8, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [[], "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'whatis': [None, 'List of brief (one line) package description entries', (8, 'modules')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2016-07-07 12:03:00,956 templates.py:173 DEBUG version found in easyconfig is 0.0
== 2016-07-07 12:03:00,957 templates.py:210 DEBUG name: name, config: toy
== 2016-07-07 12:03:00,957 templates.py:210 DEBUG name: version, config: 0.0
== 2016-07-07 12:03:00,957 templates.py:210 DEBUG name: versionsuffix, config: 
== 2016-07-07 12:03:00,957 templates.py:210 DEBUG name: versionprefix, config: 
== 2016-07-07 12:03:00,957 templates.py:149 DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': [None, 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [8, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [[], "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'whatis': [None, 'List of brief (one line) package description entries', (8, 'modules')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2016-07-07 12:03:00,959 templates.py:173 DEBUG version found in easyconfig is 0.0
== 2016-07-07 12:03:00,959 templates.py:210 DEBUG name: name, config: toy
== 2016-07-07 12:03:00,959 templates.py:210 DEBUG name: version, config: 0.0
== 2016-07-07 12:03:00,959 templates.py:210 DEBUG name: versionsuffix, config: 
== 2016-07-07 12:03:00,959 templates.py:210 DEBUG name: versionprefix, config: 
== 2016-07-07 12:03:00,959 easyblock.py:2519 INFO Running ready_reset_changes step
== 2016-07-07 12:03:00,960 templates.py:149 DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': [None, 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [8, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [[], "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'whatis': [None, 'List of brief (one line) package description entries', (8, 'modules')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2016-07-07 12:03:00,961 templates.py:173 DEBUG version found in easyconfig is 0.0
== 2016-07-07 12:03:00,961 templates.py:210 DEBUG name: name, config: toy
== 2016-07-07 12:03:00,961 templates.py:210 DEBUG name: version, config: 0.0
== 2016-07-07 12:03:00,961 templates.py:210 DEBUG name: versionsuffix, config: 
== 2016-07-07 12:03:00,961 templates.py:210 DEBUG name: versionprefix, config: 
== 2016-07-07 12:03:00,962 templates.py:149 DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': [None, 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [8, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [[], "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'whatis': [None, 'List of brief (one line) package description entries', (8, 'modules')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2016-07-07 12:03:00,963 templates.py:173 DEBUG version found in easyconfig is 0.0
== 2016-07-07 12:03:00,963 templates.py:210 DEBUG name: name, config: toy
== 2016-07-07 12:03:00,963 templates.py:210 DEBUG name: version, config: 0.0
== 2016-07-07 12:03:00,963 templates.py:210 DEBUG name: versionsuffix, config: 
== 2016-07-07 12:03:00,964 templates.py:210 DEBUG name: versionprefix, config: 
== 2016-07-07 12:03:00,964 easyblock.py:2519 INFO Running ready_handle_iterate_opts step
== 2016-07-07 12:03:00,964 templates.py:149 DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': [None, 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [8, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [[], "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'whatis': [None, 'List of brief (one line) package description entries', (8, 'modules')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2016-07-07 12:03:00,966 templates.py:173 DEBUG version found in easyconfig is 0.0
== 2016-07-07 12:03:00,966 templates.py:210 DEBUG name: name, config: toy
== 2016-07-07 12:03:00,966 templates.py:210 DEBUG name: version, config: 0.0
== 2016-07-07 12:03:00,966 templates.py:210 DEBUG name: versionsuffix, config: 
== 2016-07-07 12:03:00,966 templates.py:210 DEBUG name: versionprefix, config: 
== 2016-07-07 12:03:00,967 templates.py:149 DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': [None, 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [8, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [[], "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'whatis': [None, 'List of brief (one line) package description entries', (8, 'modules')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2016-07-07 12:03:00,968 templates.py:173 DEBUG version found in easyconfig is 0.0
== 2016-07-07 12:03:00,968 templates.py:210 DEBUG name: name, config: toy
== 2016-07-07 12:03:00,968 templates.py:210 DEBUG name: version, config: 0.0
== 2016-07-07 12:03:00,968 templates.py:210 DEBUG name: versionsuffix, config: 
== 2016-07-07 12:03:00,968 templates.py:210 DEBUG name: versionprefix, config: 
== 2016-07-07 12:03:00,969 easyblock.py:2519 INFO Running source_checksum_step step
== 2016-07-07 12:03:00,969 filetools.py:463 DEBUG Using blocksize 16777216 for calculating the checksum
== 2016-07-07 12:03:00,969 filetools.py:502 DEBUG Computed md5 checksum for /home/caroline/GitHub/easybuild-framework/test/framework/sandbox/sources/toy/toy-0.0.tar.gz: be662daa971a640e40be5c804d9d7d10 (correct checksum: be662daa971a640e40be5c804d9d7d10)
== 2016-07-07 12:03:00,969 filetools.py:463 DEBUG Using blocksize 16777216 for calculating the checksum
== 2016-07-07 12:03:00,969 filetools.py:502 DEBUG Computed adler32 checksum for /home/caroline/GitHub/easybuild-framework/test/framework/sandbox/sources/toy/toy-0.0.tar.gz: 0x998410035 (correct checksum: 0x998410035)
== 2016-07-07 12:03:00,969 filetools.py:463 DEBUG Using blocksize 16777216 for calculating the checksum
== 2016-07-07 12:03:00,970 filetools.py:502 DEBUG Computed crc32 checksum for /home/caroline/GitHub/easybuild-framework/test/framework/sandbox/sources/toy/toy-0.0.tar.gz: 0x1553842328 (correct checksum: 0x1553842328)
== 2016-07-07 12:03:00,970 filetools.py:463 DEBUG Using blocksize 16777216 for calculating the checksum
== 2016-07-07 12:03:00,970 filetools.py:502 DEBUG Computed md5 checksum for /home/caroline/GitHub/easybuild-framework/test/framework/sandbox/sources/toy/toy-0.0.tar.gz: be662daa971a640e40be5c804d9d7d10 (correct checksum: be662daa971a640e40be5c804d9d7d10)
== 2016-07-07 12:03:00,970 filetools.py:463 DEBUG Using blocksize 16777216 for calculating the checksum
== 2016-07-07 12:03:00,970 filetools.py:502 DEBUG Computed sha1 checksum for /home/caroline/GitHub/easybuild-framework/test/framework/sandbox/sources/toy/toy-0.0.tar.gz: f618096c52244539d0e89867405f573fdb0b55b0 (correct checksum: f618096c52244539d0e89867405f573fdb0b55b0)
== 2016-07-07 12:03:00,970 filetools.py:502 DEBUG Computed size checksum for /home/caroline/GitHub/easybuild-framework/test/framework/sandbox/sources/toy/toy-0.0.tar.gz: 273 (correct checksum: 273)
== 2016-07-07 12:03:00,970 easyblock.py:1491 INFO Checksum verification for /home/caroline/GitHub/easybuild-framework/test/framework/sandbox/sources/toy/toy-0.0.tar.gz using ['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)] passed.
== 2016-07-07 12:03:00,970 easyblock.py:1491 INFO Checksum verification for /home/caroline/GitHub/easybuild-framework/test/framework/sandbox/sources/toy/toy-0.0_typo.patch using None passed.
== 2016-07-07 12:03:00,971 easyblock.py:1491 INFO Checksum verification for /home/caroline/GitHub/easybuild-framework/test/framework/sandbox/sources/toy/toy-extra.txt using None passed.
== 2016-07-07 12:03:00,971 templates.py:149 DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': [None, 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [8, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [[], "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'whatis': [None, 'List of brief (one line) package description entries', (8, 'modules')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2016-07-07 12:03:00,972 templates.py:173 DEBUG version found in easyconfig is 0.0
== 2016-07-07 12:03:00,972 templates.py:210 DEBUG name: name, config: toy
== 2016-07-07 12:03:00,972 templates.py:210 DEBUG name: version, config: 0.0
== 2016-07-07 12:03:00,973 templates.py:210 DEBUG name: versionsuffix, config: 
== 2016-07-07 12:03:00,973 templates.py:210 DEBUG name: versionprefix, config: 
== 2016-07-07 12:03:00,973 templates.py:149 DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': [None, 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [8, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [[], "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'whatis': [None, 'List of brief (one line) package description entries', (8, 'modules')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2016-07-07 12:03:00,974 templates.py:173 DEBUG version found in easyconfig is 0.0
== 2016-07-07 12:03:00,974 templates.py:210 DEBUG name: name, config: toy
== 2016-07-07 12:03:00,975 templates.py:210 DEBUG name: version, config: 0.0
== 2016-07-07 12:03:00,975 templates.py:210 DEBUG name: versionsuffix, config: 
== 2016-07-07 12:03:00,975 templates.py:210 DEBUG name: versionprefix, config: 
== 2016-07-07 12:03:00,975 easyblock.py:2519 INFO Running source_extract_step step
== 2016-07-07 12:03:00,975 easyblock.py:1498 INFO Unpacking source toy-0.0.tar.gz
== 2016-07-07 12:03:00,975 filetools.py:937 DEBUG Not creating existing path /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmpHuMQeW/toy/0.0/dummy-dummy
== 2016-07-07 12:03:00,975 filetools.py:189 DEBUG Unpacking /home/caroline/GitHub/easybuild-framework/test/framework/sandbox/sources/toy/toy-0.0.tar.gz in directory /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmpHuMQeW/toy/0.0/dummy-dummy.
== 2016-07-07 12:03:00,976 run.py:99 DEBUG run_cmd: running cmd tar xzf /home/caroline/GitHub/easybuild-framework/test/framework/sandbox/sources/toy/toy-0.0.tar.gz (in /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmpHuMQeW/toy/0.0/dummy-dummy)
== 2016-07-07 12:03:00,981 run.py:392 DEBUG cmd "tar xzf /home/caroline/GitHub/easybuild-framework/test/framework/sandbox/sources/toy/toy-0.0.tar.gz" exited with exitcode 0 and output:

== 2016-07-07 12:03:00,981 run.py:436 DEBUG Using default regular expression: (?<![(,-]|\w)(?:error|segmentation fault|failed)(?![(,-]|\.?\w)
== 2016-07-07 12:03:00,981 filetools.py:544 DEBUG Last dir list ['toy.source']
== 2016-07-07 12:03:00,982 filetools.py:545 DEBUG Possible new dir /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmpHuMQeW/toy/0.0/dummy-dummy/toy-0.0 found
== 2016-07-07 12:03:00,982 templates.py:149 DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': [None, 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [8, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [[], "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'whatis': [None, 'List of brief (one line) package description entries', (8, 'modules')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2016-07-07 12:03:00,984 templates.py:173 DEBUG version found in easyconfig is 0.0
== 2016-07-07 12:03:00,984 templates.py:210 DEBUG name: name, config: toy
== 2016-07-07 12:03:00,984 templates.py:210 DEBUG name: version, config: 0.0
== 2016-07-07 12:03:00,984 templates.py:210 DEBUG name: versionsuffix, config: 
== 2016-07-07 12:03:00,984 templates.py:210 DEBUG name: versionprefix, config: 
== 2016-07-07 12:03:00,985 templates.py:149 DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': [None, 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [8, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [[], "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'whatis': [None, 'List of brief (one line) package description entries', (8, 'modules')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2016-07-07 12:03:00,986 templates.py:173 DEBUG version found in easyconfig is 0.0
== 2016-07-07 12:03:00,986 templates.py:210 DEBUG name: name, config: toy
== 2016-07-07 12:03:00,986 templates.py:210 DEBUG name: version, config: 0.0
== 2016-07-07 12:03:00,986 templates.py:210 DEBUG name: versionsuffix, config: 
== 2016-07-07 12:03:00,986 templates.py:210 DEBUG name: versionprefix, config: 
== 2016-07-07 12:03:00,987 easyblock.py:2519 INFO Running patch_patch_step step
== 2016-07-07 12:03:00,987 easyblock.py:1510 INFO Applying patch toy-0.0_typo.patch
== 2016-07-07 12:03:00,987 easyblock.py:1522 DEBUG Source index: 0; patch level: None; source path suffix: ; copy patch: <module 'copy' from '/usr/lib/python2.7/copy.pyc'>
== 2016-07-07 12:03:00,987 easyblock.py:1527 DEBUG Determine begin path for patch toy-0.0_typo.patch: /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmpHuMQeW/toy/0.0/dummy-dummy/toy-0.0
== 2016-07-07 12:03:00,987 easyblock.py:1536 DEBUG Applying patch {'path': '/home/caroline/GitHub/easybuild-framework/test/framework/sandbox/sources/toy/toy-0.0_typo.patch', 'md5': 'e6785e1a721fc8bf79892e3ef41557c0', 'name': 'toy-0.0_typo.patch', 'checksum': None} in path /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmpHuMQeW/toy/0.0/dummy-dummy/toy-0.0
== 2016-07-07 12:03:00,987 filetools.py:715 DEBUG Guessed patch level 2 for patch /home/caroline/GitHub/easybuild-framework/test/framework/sandbox/sources/toy/toy-0.0_typo.patch
== 2016-07-07 12:03:00,988 run.py:99 DEBUG run_cmd: running cmd patch -b -p2 -i /home/caroline/GitHub/easybuild-framework/test/framework/sandbox/sources/toy/toy-0.0_typo.patch (in /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmpHuMQeW/toy/0.0/dummy-dummy/toy-0.0)
== 2016-07-07 12:03:00,992 run.py:392 DEBUG cmd "patch -b -p2 -i /home/caroline/GitHub/easybuild-framework/test/framework/sandbox/sources/toy/toy-0.0_typo.patch" exited with exitcode 0 and output:
patching file toy.source
Hunk #1 succeeded at 2 with fuzz 2.

== 2016-07-07 12:03:00,992 run.py:436 DEBUG Using default regular expression: (?<![(,-]|\w)(?:error|segmentation fault|failed)(?![(,-]|\.?\w)
== 2016-07-07 12:03:00,992 easyblock.py:1510 INFO Applying patch toy-extra.txt
== 2016-07-07 12:03:00,992 easyblock.py:1522 DEBUG Source index: 0; patch level: None; source path suffix: toy-0.0; copy patch: <module 'copy' from '/usr/lib/python2.7/copy.pyc'>
== 2016-07-07 12:03:00,992 easyblock.py:1532 DEBUG Using specified begin path for patch toy-extra.txt: /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmpHuMQeW/toy/0.0/dummy-dummy/toy-0.0
== 2016-07-07 12:03:00,993 easyblock.py:1536 DEBUG Applying patch {'path': '/home/caroline/GitHub/easybuild-framework/test/framework/sandbox/sources/toy/toy-extra.txt', 'copy': 'toy-0.0', 'name': 'toy-extra.txt', 'md5': '3b0787b3bf36603ae1398c4a49097893', 'checksum': None} in path /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmpHuMQeW/toy/0.0/dummy-dummy/toy-0.0
== 2016-07-07 12:03:00,993 filetools.py:685 DEBUG Copied patch /home/caroline/GitHub/easybuild-framework/test/framework/sandbox/sources/toy/toy-extra.txt to dir /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmpHuMQeW/toy/0.0/dummy-dummy/toy-0.0
== 2016-07-07 12:03:00,994 templates.py:149 DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': [None, 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [8, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [[], "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'whatis': [None, 'List of brief (one line) package description entries', (8, 'modules')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2016-07-07 12:03:00,995 templates.py:173 DEBUG version found in easyconfig is 0.0
== 2016-07-07 12:03:00,995 templates.py:210 DEBUG name: name, config: toy
== 2016-07-07 12:03:00,995 templates.py:210 DEBUG name: version, config: 0.0
== 2016-07-07 12:03:00,995 templates.py:210 DEBUG name: versionsuffix, config: 
== 2016-07-07 12:03:00,995 templates.py:210 DEBUG name: versionprefix, config: 
== 2016-07-07 12:03:00,996 templates.py:149 DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': [None, 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [8, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [[], "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'whatis': [None, 'List of brief (one line) package description entries', (8, 'modules')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2016-07-07 12:03:00,997 templates.py:173 DEBUG version found in easyconfig is 0.0
== 2016-07-07 12:03:00,997 templates.py:210 DEBUG name: name, config: toy
== 2016-07-07 12:03:00,997 templates.py:210 DEBUG name: version, config: 0.0
== 2016-07-07 12:03:00,997 templates.py:210 DEBUG name: versionsuffix, config: 
== 2016-07-07 12:03:00,998 templates.py:210 DEBUG name: versionprefix, config: 
== 2016-07-07 12:03:00,998 easyblock.py:2519 INFO Running prepare_prepare_step step
== 2016-07-07 12:03:00,998 toolchain.py:306 DEBUG _toolchain_exists: dummy toolchain always exists, returning True
== 2016-07-07 12:03:00,998 toolchain.py:537 INFO prepare: toolchain dummy mode, dummy version; not loading dependencies
== 2016-07-07 12:03:00,998 easyblock.py:1309 INFO Using /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmpHuMQeW/toy/0.0/dummy-dummy/toy-0.0/ as start dir
== 2016-07-07 12:03:00,998 easyblock.py:1313 DEBUG Changed to real build directory /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmpHuMQeW/toy/0.0/dummy-dummy/toy-0.0/ (start_dir)
== 2016-07-07 12:03:00,999 templates.py:149 DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': ['/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmpHuMQeW/toy/0.0/dummy-dummy/toy-0.0/', 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [8, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [{}, "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'whatis': [None, 'List of brief (one line) package description entries', (8, 'modules')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2016-07-07 12:03:01,000 templates.py:173 DEBUG version found in easyconfig is 0.0
== 2016-07-07 12:03:01,000 templates.py:210 DEBUG name: name, config: toy
== 2016-07-07 12:03:01,000 templates.py:210 DEBUG name: version, config: 0.0
== 2016-07-07 12:03:01,000 templates.py:210 DEBUG name: versionsuffix, config: 
== 2016-07-07 12:03:01,001 templates.py:210 DEBUG name: versionprefix, config: 
== 2016-07-07 12:03:01,001 templates.py:149 DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': ['/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmpHuMQeW/toy/0.0/dummy-dummy/toy-0.0/', 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [8, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [{}, "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'whatis': [None, 'List of brief (one line) package description entries', (8, 'modules')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2016-07-07 12:03:01,002 templates.py:173 DEBUG version found in easyconfig is 0.0
== 2016-07-07 12:03:01,002 templates.py:210 DEBUG name: name, config: toy
== 2016-07-07 12:03:01,002 templates.py:210 DEBUG name: version, config: 0.0
== 2016-07-07 12:03:01,003 templates.py:210 DEBUG name: versionsuffix, config: 
== 2016-07-07 12:03:01,003 templates.py:210 DEBUG name: versionprefix, config: 
== 2016-07-07 12:03:01,003 easyblock.py:2519 INFO Running configure_configure_step step
== 2016-07-07 12:03:01,003 templates.py:149 DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': ['/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmpHuMQeW/toy/0.0/dummy-dummy/toy-0.0/', 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [8, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [{}, "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'whatis': [None, 'List of brief (one line) package description entries', (8, 'modules')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2016-07-07 12:03:01,005 templates.py:173 DEBUG version found in easyconfig is 0.0
== 2016-07-07 12:03:01,005 templates.py:210 DEBUG name: name, config: toy
== 2016-07-07 12:03:01,005 templates.py:210 DEBUG name: version, config: 0.0
== 2016-07-07 12:03:01,005 templates.py:210 DEBUG name: versionsuffix, config: 
== 2016-07-07 12:03:01,005 templates.py:210 DEBUG name: versionprefix, config: 
== 2016-07-07 12:03:01,006 templates.py:149 DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': ['/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmpHuMQeW/toy/0.0/dummy-dummy/toy-0.0/', 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [8, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [{}, "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'whatis': [None, 'List of brief (one line) package description entries', (8, 'modules')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2016-07-07 12:03:01,007 templates.py:173 DEBUG version found in easyconfig is 0.0
== 2016-07-07 12:03:01,007 templates.py:210 DEBUG name: name, config: toy
== 2016-07-07 12:03:01,007 templates.py:210 DEBUG name: version, config: 0.0
== 2016-07-07 12:03:01,007 templates.py:210 DEBUG name: versionsuffix, config: 
== 2016-07-07 12:03:01,007 templates.py:210 DEBUG name: versionprefix, config: 
== 2016-07-07 12:03:01,007 easyblock.py:2519 INFO Running build_build_step step
== 2016-07-07 12:03:01,008 run.py:99 DEBUG run_cmd: running cmd  gcc toy.c -o toy (in /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmpHuMQeW/toy/0.0/dummy-dummy/toy-0.0)
== 2016-07-07 12:03:01,035 run.py:392 DEBUG cmd " gcc toy.c -o toy" exited with exitcode 0 and output:

== 2016-07-07 12:03:01,035 run.py:436 DEBUG Using default regular expression: (?<![(,-]|\w)(?:error|segmentation fault|failed)(?![(,-]|\.?\w)
== 2016-07-07 12:03:01,036 templates.py:149 DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': ['/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmpHuMQeW/toy/0.0/dummy-dummy/toy-0.0/', 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [8, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [{}, "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'whatis': [None, 'List of brief (one line) package description entries', (8, 'modules')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2016-07-07 12:03:01,038 templates.py:173 DEBUG version found in easyconfig is 0.0
== 2016-07-07 12:03:01,038 templates.py:210 DEBUG name: name, config: toy
== 2016-07-07 12:03:01,038 templates.py:210 DEBUG name: version, config: 0.0
== 2016-07-07 12:03:01,038 templates.py:210 DEBUG name: versionsuffix, config: 
== 2016-07-07 12:03:01,038 templates.py:210 DEBUG name: versionprefix, config: 
== 2016-07-07 12:03:01,039 templates.py:149 DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': ['/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmpHuMQeW/toy/0.0/dummy-dummy/toy-0.0/', 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [8, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [{}, "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'whatis': [None, 'List of brief (one line) package description entries', (8, 'modules')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2016-07-07 12:03:01,040 templates.py:173 DEBUG version found in easyconfig is 0.0
== 2016-07-07 12:03:01,040 templates.py:210 DEBUG name: name, config: toy
== 2016-07-07 12:03:01,040 templates.py:210 DEBUG name: version, config: 0.0
== 2016-07-07 12:03:01,040 templates.py:210 DEBUG name: versionsuffix, config: 
== 2016-07-07 12:03:01,040 templates.py:210 DEBUG name: versionprefix, config: 
== 2016-07-07 12:03:01,041 easyblock.py:2519 INFO Running test_test_step step
== 2016-07-07 12:03:01,041 templates.py:149 DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': ['/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmpHuMQeW/toy/0.0/dummy-dummy/toy-0.0/', 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [8, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [{}, "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'whatis': [None, 'List of brief (one line) package description entries', (8, 'modules')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2016-07-07 12:03:01,042 templates.py:173 DEBUG version found in easyconfig is 0.0
== 2016-07-07 12:03:01,042 templates.py:210 DEBUG name: name, config: toy
== 2016-07-07 12:03:01,042 templates.py:210 DEBUG name: version, config: 0.0
== 2016-07-07 12:03:01,043 templates.py:210 DEBUG name: versionsuffix, config: 
== 2016-07-07 12:03:01,043 templates.py:210 DEBUG name: versionprefix, config: 
== 2016-07-07 12:03:01,043 templates.py:149 DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': ['/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmpHuMQeW/toy/0.0/dummy-dummy/toy-0.0/', 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [8, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [{}, "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'whatis': [None, 'List of brief (one line) package description entries', (8, 'modules')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2016-07-07 12:03:01,044 templates.py:173 DEBUG version found in easyconfig is 0.0
== 2016-07-07 12:03:01,044 templates.py:210 DEBUG name: name, config: toy
== 2016-07-07 12:03:01,045 templates.py:210 DEBUG name: version, config: 0.0
== 2016-07-07 12:03:01,045 templates.py:210 DEBUG name: versionsuffix, config: 
== 2016-07-07 12:03:01,045 templates.py:210 DEBUG name: versionprefix, config: 
== 2016-07-07 12:03:01,045 easyblock.py:2519 INFO Running install_stage_install_step step
== 2016-07-07 12:03:01,046 templates.py:149 DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': ['/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmpHuMQeW/toy/0.0/dummy-dummy/toy-0.0/', 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [8, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [{}, "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'whatis': [None, 'List of brief (one line) package description entries', (8, 'modules')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2016-07-07 12:03:01,047 templates.py:173 DEBUG version found in easyconfig is 0.0
== 2016-07-07 12:03:01,047 templates.py:210 DEBUG name: name, config: toy
== 2016-07-07 12:03:01,047 templates.py:210 DEBUG name: version, config: 0.0
== 2016-07-07 12:03:01,047 templates.py:210 DEBUG name: versionsuffix, config: 
== 2016-07-07 12:03:01,047 templates.py:210 DEBUG name: versionprefix, config: 
== 2016-07-07 12:03:01,048 templates.py:149 DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': ['/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmpHuMQeW/toy/0.0/dummy-dummy/toy-0.0/', 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [8, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [{}, "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'whatis': [None, 'List of brief (one line) package description entries', (8, 'modules')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2016-07-07 12:03:01,049 templates.py:173 DEBUG version found in easyconfig is 0.0
== 2016-07-07 12:03:01,049 templates.py:210 DEBUG name: name, config: toy
== 2016-07-07 12:03:01,049 templates.py:210 DEBUG name: version, config: 0.0
== 2016-07-07 12:03:01,049 templates.py:210 DEBUG name: versionsuffix, config: 
== 2016-07-07 12:03:01,049 templates.py:210 DEBUG name: versionprefix, config: 
== 2016-07-07 12:03:01,050 easyblock.py:2519 INFO Running install_make_installdir step
== 2016-07-07 12:03:01,050 easyblock.py:794 DEBUG Creating the installation directory /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/software/toy/0.0 (cleanup: True)
== 2016-07-07 12:03:01,050 easyblock.py:805 INFO Found old directory /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/software/toy/0.0
== 2016-07-07 12:03:01,050 filetools.py:1010 INFO Path /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/software/toy/0.0 successfully removed.
== 2016-07-07 12:03:01,050 easyblock.py:812 INFO Removed old directory /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/software/toy/0.0
== 2016-07-07 12:03:01,050 filetools.py:909 INFO Creating directory /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/software/toy/0.0 (parents: True, set_gid: False, sticky: False)
== 2016-07-07 12:03:01,051 templates.py:149 DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': ['/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmpHuMQeW/toy/0.0/dummy-dummy/toy-0.0/', 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [8, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [{}, "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'whatis': [None, 'List of brief (one line) package description entries', (8, 'modules')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2016-07-07 12:03:01,052 templates.py:173 DEBUG version found in easyconfig is 0.0
== 2016-07-07 12:03:01,052 templates.py:210 DEBUG name: name, config: toy
== 2016-07-07 12:03:01,052 templates.py:210 DEBUG name: version, config: 0.0
== 2016-07-07 12:03:01,052 templates.py:210 DEBUG name: versionsuffix, config: 
== 2016-07-07 12:03:01,052 templates.py:210 DEBUG name: versionprefix, config: 
== 2016-07-07 12:03:01,053 templates.py:149 DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': ['/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmpHuMQeW/toy/0.0/dummy-dummy/toy-0.0/', 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [8, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [{}, "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'whatis': [None, 'List of brief (one line) package description entries', (8, 'modules')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2016-07-07 12:03:01,054 templates.py:173 DEBUG version found in easyconfig is 0.0
== 2016-07-07 12:03:01,054 templates.py:210 DEBUG name: name, config: toy
== 2016-07-07 12:03:01,054 templates.py:210 DEBUG name: version, config: 0.0
== 2016-07-07 12:03:01,055 templates.py:210 DEBUG name: versionsuffix, config: 
== 2016-07-07 12:03:01,055 templates.py:210 DEBUG name: versionprefix, config: 
== 2016-07-07 12:03:01,055 easyblock.py:2519 INFO Running install_install_step step
== 2016-07-07 12:03:01,055 filetools.py:909 INFO Creating directory /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/software/toy/0.0/bin (parents: True, set_gid: False, sticky: False)
== 2016-07-07 12:03:01,055 filetools.py:909 INFO Creating directory /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/software/toy/0.0/lib (parents: True, set_gid: False, sticky: False)
== 2016-07-07 12:03:01,056 templates.py:149 DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': ['/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmpHuMQeW/toy/0.0/dummy-dummy/toy-0.0/', 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [8, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [{}, "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'whatis': [None, 'List of brief (one line) package description entries', (8, 'modules')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2016-07-07 12:03:01,057 templates.py:173 DEBUG version found in easyconfig is 0.0
== 2016-07-07 12:03:01,057 templates.py:210 DEBUG name: name, config: toy
== 2016-07-07 12:03:01,057 templates.py:210 DEBUG name: version, config: 0.0
== 2016-07-07 12:03:01,057 templates.py:210 DEBUG name: versionsuffix, config: 
== 2016-07-07 12:03:01,057 templates.py:210 DEBUG name: versionprefix, config: 
== 2016-07-07 12:03:01,058 templates.py:149 DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': ['/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmpHuMQeW/toy/0.0/dummy-dummy/toy-0.0/', 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [8, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [{}, "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'whatis': [None, 'List of brief (one line) package description entries', (8, 'modules')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2016-07-07 12:03:01,059 templates.py:173 DEBUG version found in easyconfig is 0.0
== 2016-07-07 12:03:01,059 templates.py:210 DEBUG name: name, config: toy
== 2016-07-07 12:03:01,059 templates.py:210 DEBUG name: version, config: 0.0
== 2016-07-07 12:03:01,059 templates.py:210 DEBUG name: versionsuffix, config: 
== 2016-07-07 12:03:01,060 templates.py:210 DEBUG name: versionprefix, config: 
== 2016-07-07 12:03:01,060 easyblock.py:2519 INFO Running extensions_extensions_step step
== 2016-07-07 12:03:01,060 easyblock.py:1608 DEBUG No extensions in exts_list
== 2016-07-07 12:03:01,060 templates.py:149 DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': ['/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmpHuMQeW/toy/0.0/dummy-dummy/toy-0.0/', 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [8, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [{}, "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'whatis': [None, 'List of brief (one line) package description entries', (8, 'modules')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2016-07-07 12:03:01,062 templates.py:173 DEBUG version found in easyconfig is 0.0
== 2016-07-07 12:03:01,062 templates.py:210 DEBUG name: name, config: toy
== 2016-07-07 12:03:01,062 templates.py:210 DEBUG name: version, config: 0.0
== 2016-07-07 12:03:01,062 templates.py:210 DEBUG name: versionsuffix, config: 
== 2016-07-07 12:03:01,062 templates.py:210 DEBUG name: versionprefix, config: 
== 2016-07-07 12:03:01,063 templates.py:149 DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': ['/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmpHuMQeW/toy/0.0/dummy-dummy/toy-0.0/', 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [8, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [{}, "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'whatis': [None, 'List of brief (one line) package description entries', (8, 'modules')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2016-07-07 12:03:01,064 templates.py:173 DEBUG version found in easyconfig is 0.0
== 2016-07-07 12:03:01,064 templates.py:210 DEBUG name: name, config: toy
== 2016-07-07 12:03:01,064 templates.py:210 DEBUG name: version, config: 0.0
== 2016-07-07 12:03:01,064 templates.py:210 DEBUG name: versionsuffix, config: 
== 2016-07-07 12:03:01,064 templates.py:210 DEBUG name: versionprefix, config: 
== 2016-07-07 12:03:01,064 easyblock.py:2519 INFO Running postproc_post_install_step step
== 2016-07-07 12:03:01,065 run.py:99 DEBUG run_cmd: running cmd echo TOY > /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/software/toy/0.0/README (in /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmpHuMQeW/toy/0.0/dummy-dummy/toy-0.0)
== 2016-07-07 12:03:01,069 run.py:392 DEBUG cmd "echo TOY > /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/software/toy/0.0/README" exited with exitcode 0 and output:

== 2016-07-07 12:03:01,069 run.py:402 INFO cmd "echo TOY > /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/software/toy/0.0/README" exited with exitcode 0 and output:

== 2016-07-07 12:03:01,069 run.py:436 DEBUG Using default regular expression: (?<![(,-]|\w)(?:error|segmentation fault|failed)(?![(,-]|\.?\w)
== 2016-07-07 12:03:01,070 templates.py:149 DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': ['/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmpHuMQeW/toy/0.0/dummy-dummy/toy-0.0/', 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [8, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [{}, "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'whatis': [None, 'List of brief (one line) package description entries', (8, 'modules')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2016-07-07 12:03:01,071 templates.py:173 DEBUG version found in easyconfig is 0.0
== 2016-07-07 12:03:01,071 templates.py:210 DEBUG name: name, config: toy
== 2016-07-07 12:03:01,071 templates.py:210 DEBUG name: version, config: 0.0
== 2016-07-07 12:03:01,071 templates.py:210 DEBUG name: versionsuffix, config: 
== 2016-07-07 12:03:01,071 templates.py:210 DEBUG name: versionprefix, config: 
== 2016-07-07 12:03:01,072 templates.py:149 DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': ['/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmpHuMQeW/toy/0.0/dummy-dummy/toy-0.0/', 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [8, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [{}, "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'whatis': [None, 'List of brief (one line) package description entries', (8, 'modules')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2016-07-07 12:03:01,073 templates.py:173 DEBUG version found in easyconfig is 0.0
== 2016-07-07 12:03:01,073 templates.py:210 DEBUG name: name, config: toy
== 2016-07-07 12:03:01,073 templates.py:210 DEBUG name: version, config: 0.0
== 2016-07-07 12:03:01,073 templates.py:210 DEBUG name: versionsuffix, config: 
== 2016-07-07 12:03:01,074 templates.py:210 DEBUG name: versionprefix, config: 
== 2016-07-07 12:03:01,074 easyblock.py:2519 INFO Running sanitycheck_sanity_check_step step
== 2016-07-07 12:03:01,074 easyblock.py:1803 INFO Using specified sanity check paths: {'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}
== 2016-07-07 12:03:01,074 easyblock.py:1820 INFO Using specified sanity check commands: []
== 2016-07-07 12:03:01,074 easyblock.py:1886 DEBUG Could not find file bin/yot in /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/software/toy/0.0
== 2016-07-07 12:03:01,074 easyblock.py:1882 DEBUG Sanity check: found file bin/toy in /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/software/toy/0.0
== 2016-07-07 12:03:01,074 easyblock.py:1882 DEBUG Sanity check: found (non-empty) directory bin in /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/software/toy/0.0
== 2016-07-07 12:03:01,075 config.py:407 DEBUG modules install path as specified by 'installpath' and 'subdir_modules': /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules
== 2016-07-07 12:03:01,075 module_generator.py:77 DEBUG Fake mode: using /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/eb-TBFSYz/eb-HMta7q/tmpnRMtEC (instead of /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules)
== 2016-07-07 12:03:01,075 config.py:407 DEBUG modules install path as specified by 'installpath' and 'subdir_modules': /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules
== 2016-07-07 12:03:01,075 module_generator.py:77 DEBUG Fake mode: using /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/eb-TBFSYz/eb-HMta7q/tmpnRMtEC (instead of /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules)
== 2016-07-07 12:03:01,075 filetools.py:909 INFO Creating directory /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/eb-TBFSYz/eb-HMta7q/tmpnRMtEC/all/toy (parents: True, set_gid: False, sticky: False)
== 2016-07-07 12:03:01,076 easyblock.py:925 DEBUG Full list of dependencies: []
== 2016-07-07 12:03:01,076 easyconfig.py:1568 DEBUG Determining initial module paths for <easybuild.framework.easyconfig.easyconfig.EasyConfig object at 0x7fb8e230b9d0>
== 2016-07-07 12:03:01,076 easyconfig.py:1570 DEBUG Obtained initial module paths: []
== 2016-07-07 12:03:01,076 modules.py:776 DEBUG Top of module tree reached with toy/0.0 (module subdir: /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules/all/)
== 2016-07-07 12:03:01,076 easyblock.py:935 DEBUG List of retained dependencies: []
== 2016-07-07 12:03:01,076 easyconfig.py:1554 DEBUG Determining modulepath extensions for <easybuild.framework.easyconfig.easyconfig.EasyConfig object at 0x7fb8e230b9d0>
== 2016-07-07 12:03:01,076 easyconfig.py:1556 DEBUG Obtained modulepath extensions: []
== 2016-07-07 12:03:01,076 easyblock.py:1065 DEBUG Including module path extensions returned by module naming scheme: []
== 2016-07-07 12:03:01,077 easyconfig.py:1501 DEBUG Determining full module name for <easybuild.framework.easyconfig.easyconfig.EasyConfig object at 0x7fb8e230b9d0> (force_visible: False)
== 2016-07-07 12:03:01,077 easyconfig.py:1481 DEBUG No alternative software name specified to determine module name with
== 2016-07-07 12:03:01,077 utilities.py:102 DEBUG Module name toy/0.0 validated
== 2016-07-07 12:03:01,077 easyconfig.py:1508 DEBUG Obtained valid full module name toy/0.0
== 2016-07-07 12:03:01,077 easyblock.py:1022 DEBUG make_module_extra added this: setenv	EBROOTTOY		"$root"
setenv	EBVERSIONTOY		"0.0"
setenv	EBDEVELTOY		"$root/easybuild/toy-0.0-easybuild-devel"


== 2016-07-07 12:03:01,078 config.py:407 DEBUG modules install path as specified by 'installpath' and 'subdir_modules': /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules
== 2016-07-07 12:03:01,078 module_generator.py:77 DEBUG Fake mode: using /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/eb-TBFSYz/eb-HMta7q/tmpnRMtEC (instead of /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules)
== 2016-07-07 12:03:01,078 filetools.py:937 DEBUG Not creating existing path /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/eb-TBFSYz/eb-HMta7q/tmpnRMtEC/all/toy
== 2016-07-07 12:03:01,078 easyblock.py:2000 INFO Module file /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/eb-TBFSYz/eb-HMta7q/tmpnRMtEC/all/toy/0.0 written: #%Module
proc ModulesHelp { } {
    puts stderr { Toy C program. - Homepage: http://hpcugent.github.com/easybuild
    }
}

module-whatis {Description: Toy C program. - Homepage: http://hpcugent.github.com/easybuild}

set root /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/software/toy/0.0

conflict toy

prepend-path	LD_LIBRARY_PATH		$root/lib
prepend-path	LIBRARY_PATH		$root/lib
prepend-path	PATH		$root/bin
setenv	EBROOTTOY		"$root"
setenv	EBVERSIONTOY		"0.0"
setenv	EBDEVELTOY		"$root/easybuild/toy-0.0-easybuild-devel"

# Built with EasyBuild version 2.9.0.dev0

== 2016-07-07 12:03:01,078 config.py:407 DEBUG modules install path as specified by 'installpath' and 'subdir_modules': /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules
== 2016-07-07 12:03:01,078 module_generator.py:77 DEBUG Fake mode: using /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/eb-TBFSYz/eb-HMta7q/tmpnRMtEC (instead of /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules)
== 2016-07-07 12:03:01,078 modules.py:1166 DEBUG Invallidating module cache entries for path '/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/eb-TBFSYz/eb-HMta7q/tmpnRMtEC/all'
== 2016-07-07 12:03:01,079 modules.py:1170 DEBUG Paths for 'module avail' key '('MODULEPATH=/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules/all:/home/caroline/GitHub/easybuild-framework/test/framework/modules', 'modulecmd', '')': ['/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules/all', '/home/caroline/GitHub/easybuild-framework/test/framework/modules']
== 2016-07-07 12:03:01,079 config.py:407 DEBUG modules install path as specified by 'installpath' and 'subdir_modules': /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules
== 2016-07-07 12:03:01,079 module_generator.py:77 DEBUG Fake mode: using /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/eb-TBFSYz/eb-HMta7q/tmpnRMtEC (instead of /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules)
== 2016-07-07 12:03:01,079 config.py:407 DEBUG modules install path as specified by 'installpath' and 'subdir_modules': /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules
== 2016-07-07 12:03:01,079 module_generator.py:77 DEBUG Fake mode: using /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/eb-TBFSYz/eb-HMta7q/tmpnRMtEC (instead of /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules)
== 2016-07-07 12:03:01,080 filetools.py:909 INFO Creating directory /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/eb-TBFSYz/eb-HMta7q/tmpnRMtEC/tools/toy (parents: True, set_gid: False, sticky: False)
== 2016-07-07 12:03:01,080 filetools.py:937 DEBUG Not creating existing path /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/eb-TBFSYz/eb-HMta7q/tmpnRMtEC/all/
== 2016-07-07 12:03:01,080 modules.py:603 DEBUG Current MODULEPATH: /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules/all:/home/caroline/GitHub/easybuild-framework/test/framework/modules
== 2016-07-07 12:03:01,081 modules.py:610 DEBUG Changing LD_LIBRARY_PATH from '' to '' in environment for module command
== 2016-07-07 12:03:01,081 modules.py:610 DEBUG Changing LD_PRELOAD from '' to '' in environment for module command
== 2016-07-07 12:03:01,081 modules.py:621 DEBUG Running module command '/usr/local/Modules/3.2.10/bin/modulecmd python use /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/eb-TBFSYz/eb-HMta7q/tmpnRMtEC/all/' from /home/caroline/GitHub/easybuild-framework
== 2016-07-07 12:03:01,089 modules.py:627 DEBUG Output of module command '/usr/local/Modules/3.2.10/bin/modulecmd python use /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/eb-TBFSYz/eb-HMta7q/tmpnRMtEC/all/': stdout: os.environ['MODULEPATH'] = '/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/eb-TBFSYz/eb-HMta7q/tmpnRMtEC/all/:/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules/all:/home/caroline/GitHub/easybuild-framework/test/framework/modules'
; stderr: 
== 2016-07-07 12:03:01,090 modules.py:580 DEBUG No checking of module output implemented for EnvironmentModulesC
== 2016-07-07 12:03:01,090 modules.py:658 DEBUG Correcting paths in $LD_LIBRARY_PATH from [''] to []
== 2016-07-07 12:03:01,090 modules.py:658 DEBUG Correcting paths in $LD_PRELOAD from [''] to []
== 2016-07-07 12:03:01,090 modules.py:311 DEBUG $MODULEPATH after set_mod_paths: /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/eb-TBFSYz/eb-HMta7q/tmpnRMtEC/all/:/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules/all:/home/caroline/GitHub/easybuild-framework/test/framework/modules
== 2016-07-07 12:03:01,091 easyconfig.py:1568 DEBUG Determining initial module paths for <easybuild.framework.easyconfig.easyconfig.EasyConfig object at 0x7fb8e230b9d0>
== 2016-07-07 12:03:01,091 easyconfig.py:1570 DEBUG Obtained initial module paths: []
== 2016-07-07 12:03:01,091 environment.py:167 DEBUG Key in new environment found that is different from old one: MODULEPATH (/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules/all:/home/caroline/GitHub/easybuild-framework/test/framework/modules)
== 2016-07-07 12:03:01,091 environment.py:97 INFO Environment variable MODULEPATH set to /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules/all:/home/caroline/GitHub/easybuild-framework/test/framework/modules (previous value: '/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/eb-TBFSYz/eb-HMta7q/tmpnRMtEC/all/:/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules/all:/home/caroline/GitHub/easybuild-framework/test/framework/modules')
== 2016-07-07 12:03:01,091 modules.py:384 DEBUG Current module paths: ['/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules/all', '/home/caroline/GitHub/easybuild-framework/test/framework/modules']; target module paths: ['/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/eb-TBFSYz/eb-HMta7q/tmpnRMtEC/all/', '/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules/all', '/home/caroline/GitHub/easybuild-framework/test/framework/modules']
== 2016-07-07 12:03:01,092 modules.py:392 DEBUG Not prepending 2 last entries of ['/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/eb-TBFSYz/eb-HMta7q/tmpnRMtEC/all/', '/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules/all', '/home/caroline/GitHub/easybuild-framework/test/framework/modules']
== 2016-07-07 12:03:01,092 filetools.py:937 DEBUG Not creating existing path /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/eb-TBFSYz/eb-HMta7q/tmpnRMtEC/all/
== 2016-07-07 12:03:01,092 modules.py:603 DEBUG Current MODULEPATH: /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules/all:/home/caroline/GitHub/easybuild-framework/test/framework/modules
== 2016-07-07 12:03:01,092 modules.py:610 DEBUG Changing LD_LIBRARY_PATH from '' to '' in environment for module command
== 2016-07-07 12:03:01,093 modules.py:610 DEBUG Changing LD_PRELOAD from '' to '' in environment for module command
== 2016-07-07 12:03:01,093 modules.py:621 DEBUG Running module command '/usr/local/Modules/3.2.10/bin/modulecmd python use /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/eb-TBFSYz/eb-HMta7q/tmpnRMtEC/all/' from /home/caroline/GitHub/easybuild-framework
== 2016-07-07 12:03:01,100 modules.py:627 DEBUG Output of module command '/usr/local/Modules/3.2.10/bin/modulecmd python use /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/eb-TBFSYz/eb-HMta7q/tmpnRMtEC/all/': stdout: os.environ['MODULEPATH'] = '/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/eb-TBFSYz/eb-HMta7q/tmpnRMtEC/all/:/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules/all:/home/caroline/GitHub/easybuild-framework/test/framework/modules'
; stderr: 
== 2016-07-07 12:03:01,101 modules.py:580 DEBUG No checking of module output implemented for EnvironmentModulesC
== 2016-07-07 12:03:01,101 modules.py:658 DEBUG Correcting paths in $LD_LIBRARY_PATH from [''] to []
== 2016-07-07 12:03:01,101 modules.py:658 DEBUG Correcting paths in $LD_PRELOAD from [''] to []
== 2016-07-07 12:03:01,101 modules.py:311 DEBUG $MODULEPATH after set_mod_paths: /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/eb-TBFSYz/eb-HMta7q/tmpnRMtEC/all/:/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules/all:/home/caroline/GitHub/easybuild-framework/test/framework/modules
== 2016-07-07 12:03:01,102 modules.py:397 INFO $MODULEPATH set via list of module paths (w/ 'module use'): /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/eb-TBFSYz/eb-HMta7q/tmpnRMtEC/all/:/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules/all:/home/caroline/GitHub/easybuild-framework/test/framework/modules
== 2016-07-07 12:03:01,102 modules.py:603 DEBUG Current MODULEPATH: /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/eb-TBFSYz/eb-HMta7q/tmpnRMtEC/all/:/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules/all:/home/caroline/GitHub/easybuild-framework/test/framework/modules
== 2016-07-07 12:03:01,102 modules.py:610 DEBUG Changing LD_LIBRARY_PATH from '' to '' in environment for module command
== 2016-07-07 12:03:01,102 modules.py:610 DEBUG Changing LD_PRELOAD from '' to '' in environment for module command
== 2016-07-07 12:03:01,102 modules.py:621 DEBUG Running module command '/usr/local/Modules/3.2.10/bin/modulecmd python load toy/0.0' from /home/caroline/GitHub/easybuild-framework
== 2016-07-07 12:03:01,114 modules.py:627 DEBUG Output of module command '/usr/local/Modules/3.2.10/bin/modulecmd python load toy/0.0': stdout: os.environ['EBDEVELTOY'] = '/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/software/toy/0.0/easybuild/toy-0.0-easybuild-devel'
os.environ['EBROOTTOY'] = '/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/software/toy/0.0'
os.environ['EBVERSIONTOY'] = '0.0'
os.environ['LD_LIBRARY_PATH'] = '/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/software/toy/0.0/lib'
os.environ['LIBRARY_PATH'] = '/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/software/toy/0.0/lib'
os.environ['LOADEDMODULES'] = 'toy/0.0'
os.environ['PATH'] = '/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/software/toy/0.0/bin:/home/caroline/bin:/home/caroline/bin:/usr/local/sbin:/usr/local/bin:/usr/bin:/usr/bin/site_perl:/usr/bin/vendor_perl:/usr/bin/core_perl:/home/caroline/GitHub/easybuild-framework:/usr/local/Modules/3.2.10/bin/:/home/caroline/GitHub/easybuild-framework:/usr/local/Modules/3.2.10/bin/'
os.environ['_LMFILES_'] = '/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/eb-TBFSYz/eb-HMta7q/tmpnRMtEC/all//toy/0.0'
; stderr: 
== 2016-07-07 12:03:01,114 modules.py:580 DEBUG No checking of module output implemented for EnvironmentModulesC
== 2016-07-07 12:03:01,115 modules.py:658 DEBUG Correcting paths in $LD_LIBRARY_PATH from ['/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/software/toy/0.0/lib'] to ['/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/software/toy/0.0/lib']
== 2016-07-07 12:03:01,115 modules.py:658 DEBUG Correcting paths in $LD_PRELOAD from [''] to []
== 2016-07-07 12:03:01,115 modules.py:603 DEBUG Current MODULEPATH: /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/eb-TBFSYz/eb-HMta7q/tmpnRMtEC/all/:/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules/all:/home/caroline/GitHub/easybuild-framework/test/framework/modules
== 2016-07-07 12:03:01,116 modules.py:610 DEBUG Changing LD_LIBRARY_PATH from '/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/software/toy/0.0/lib' to '' in environment for module command
== 2016-07-07 12:03:01,116 modules.py:610 DEBUG Changing LD_PRELOAD from '' to '' in environment for module command
== 2016-07-07 12:03:01,116 modules.py:621 DEBUG Running module command '/usr/local/Modules/3.2.10/bin/modulecmd python unload toy/0.0' from /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/software/toy/0.0
== 2016-07-07 12:03:01,123 modules.py:627 DEBUG Output of module command '/usr/local/Modules/3.2.10/bin/modulecmd python unload toy/0.0': stdout: os.environ['PATH'] = '/home/caroline/bin:/home/caroline/bin:/usr/local/sbin:/usr/local/bin:/usr/bin:/usr/bin/site_perl:/usr/bin/vendor_perl:/usr/bin/core_perl:/home/caroline/GitHub/easybuild-framework:/usr/local/Modules/3.2.10/bin/:/home/caroline/GitHub/easybuild-framework:/usr/local/Modules/3.2.10/bin/'
os.environ['EBDEVELTOY'] = ''
del os.environ['EBDEVELTOY']
os.environ['EBROOTTOY'] = ''
del os.environ['EBROOTTOY']
os.environ['EBVERSIONTOY'] = ''
del os.environ['EBVERSIONTOY']
os.environ['LIBRARY_PATH'] = ''
del os.environ['LIBRARY_PATH']
os.environ['LOADEDMODULES'] = ''
del os.environ['LOADEDMODULES']
os.environ['_LMFILES_'] = ''
del os.environ['_LMFILES_']
; stderr: 
== 2016-07-07 12:03:01,123 modules.py:580 DEBUG No checking of module output implemented for EnvironmentModulesC
== 2016-07-07 12:03:01,124 modules.py:658 DEBUG Correcting paths in $LD_LIBRARY_PATH from ['/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/software/toy/0.0/lib'] to ['/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/software/toy/0.0/lib']
== 2016-07-07 12:03:01,124 modules.py:658 DEBUG Correcting paths in $LD_PRELOAD from [''] to []
== 2016-07-07 12:03:01,124 modules.py:603 DEBUG Current MODULEPATH: /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/eb-TBFSYz/eb-HMta7q/tmpnRMtEC/all/:/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules/all:/home/caroline/GitHub/easybuild-framework/test/framework/modules
== 2016-07-07 12:03:01,125 modules.py:610 DEBUG Changing LD_LIBRARY_PATH from '/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/software/toy/0.0/lib' to '' in environment for module command
== 2016-07-07 12:03:01,125 modules.py:610 DEBUG Changing LD_PRELOAD from '' to '' in environment for module command
== 2016-07-07 12:03:01,125 modules.py:621 DEBUG Running module command '/usr/local/Modules/3.2.10/bin/modulecmd python unuse /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/eb-TBFSYz/eb-HMta7q/tmpnRMtEC/all/' from /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/software/toy/0.0
== 2016-07-07 12:03:01,131 modules.py:627 DEBUG Output of module command '/usr/local/Modules/3.2.10/bin/modulecmd python unuse /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/eb-TBFSYz/eb-HMta7q/tmpnRMtEC/all/': stdout: os.environ['MODULEPATH'] = '/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules/all:/home/caroline/GitHub/easybuild-framework/test/framework/modules'
; stderr: 
== 2016-07-07 12:03:01,132 modules.py:580 DEBUG No checking of module output implemented for EnvironmentModulesC
== 2016-07-07 12:03:01,132 modules.py:658 DEBUG Correcting paths in $LD_LIBRARY_PATH from ['/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/software/toy/0.0/lib'] to ['/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/software/toy/0.0/lib']
== 2016-07-07 12:03:01,132 modules.py:658 DEBUG Correcting paths in $LD_PRELOAD from [''] to []
== 2016-07-07 12:03:01,133 modules.py:311 DEBUG $MODULEPATH after set_mod_paths: /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules/all:/home/caroline/GitHub/easybuild-framework/test/framework/modules
== 2016-07-07 12:03:01,133 filetools.py:1010 INFO Path /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/eb-TBFSYz/eb-HMta7q/tmpnRMtEC successfully removed.
== 2016-07-07 12:03:01,133 environment.py:167 DEBUG Key in new environment found that is different from old one: LD_LIBRARY_PATH ()
== 2016-07-07 12:03:01,133 environment.py:97 INFO Environment variable LD_LIBRARY_PATH set to  (previous value: '/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/software/toy/0.0/lib')
== 2016-07-07 12:03:01,133 environment.py:170 DEBUG Key in new environment found that is not in old one: LOADEDMODULES ()
== 2016-07-07 12:03:01,134 environment.py:97 INFO Environment variable LOADEDMODULES set to  (previously undefined)
== 2016-07-07 12:03:01,134 easyblock.py:1935 DEBUG Sanity check passed!
== 2016-07-07 12:03:01,135 templates.py:149 DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': ['/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmpHuMQeW/toy/0.0/dummy-dummy/toy-0.0/', 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [8, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [{}, "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'whatis': [None, 'List of brief (one line) package description entries', (8, 'modules')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2016-07-07 12:03:01,136 templates.py:173 DEBUG version found in easyconfig is 0.0
== 2016-07-07 12:03:01,137 templates.py:210 DEBUG name: name, config: toy
== 2016-07-07 12:03:01,137 templates.py:210 DEBUG name: version, config: 0.0
== 2016-07-07 12:03:01,137 templates.py:210 DEBUG name: versionsuffix, config: 
== 2016-07-07 12:03:01,137 templates.py:210 DEBUG name: versionprefix, config: 
== 2016-07-07 12:03:01,138 templates.py:149 DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': ['/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmpHuMQeW/toy/0.0/dummy-dummy/toy-0.0/', 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [8, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [{}, "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'whatis': [None, 'List of brief (one line) package description entries', (8, 'modules')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2016-07-07 12:03:01,139 templates.py:173 DEBUG version found in easyconfig is 0.0
== 2016-07-07 12:03:01,139 templates.py:210 DEBUG name: name, config: toy
== 2016-07-07 12:03:01,140 templates.py:210 DEBUG name: version, config: 0.0
== 2016-07-07 12:03:01,140 templates.py:210 DEBUG name: versionsuffix, config: 
== 2016-07-07 12:03:01,140 templates.py:210 DEBUG name: versionprefix, config: 
== 2016-07-07 12:03:01,140 easyblock.py:2519 INFO Running cleanup_cleanup_step step
== 2016-07-07 12:03:01,140 easyblock.py:1948 INFO Cleaning up builddir /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmpHuMQeW/toy/0.0/dummy-dummy (in /home/caroline/GitHub/easybuild-framework)
== 2016-07-07 12:03:01,141 filetools.py:1010 INFO Path /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmpHuMQeW/toy/0.0/dummy-dummy successfully removed.
== 2016-07-07 12:03:01,141 templates.py:149 DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': ['/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmpHuMQeW/toy/0.0/dummy-dummy/toy-0.0/', 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [8, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [{}, "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'whatis': [None, 'List of brief (one line) package description entries', (8, 'modules')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2016-07-07 12:03:01,143 templates.py:173 DEBUG version found in easyconfig is 0.0
== 2016-07-07 12:03:01,143 templates.py:210 DEBUG name: name, config: toy
== 2016-07-07 12:03:01,143 templates.py:210 DEBUG name: version, config: 0.0
== 2016-07-07 12:03:01,143 templates.py:210 DEBUG name: versionsuffix, config: 
== 2016-07-07 12:03:01,143 templates.py:210 DEBUG name: versionprefix, config: 
== 2016-07-07 12:03:01,144 templates.py:149 DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': ['/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmpHuMQeW/toy/0.0/dummy-dummy/toy-0.0/', 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [8, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [{}, "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'whatis': [None, 'List of brief (one line) package description entries', (8, 'modules')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2016-07-07 12:03:01,145 templates.py:173 DEBUG version found in easyconfig is 0.0
== 2016-07-07 12:03:01,146 templates.py:210 DEBUG name: name, config: toy
== 2016-07-07 12:03:01,146 templates.py:210 DEBUG name: version, config: 0.0
== 2016-07-07 12:03:01,146 templates.py:210 DEBUG name: versionsuffix, config: 
== 2016-07-07 12:03:01,146 templates.py:210 DEBUG name: versionprefix, config: 
== 2016-07-07 12:03:01,146 easyblock.py:2519 INFO Running module_make_module_step step
== 2016-07-07 12:03:01,146 config.py:407 DEBUG modules install path as specified by 'installpath' and 'subdir_modules': /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules
== 2016-07-07 12:03:01,146 config.py:407 DEBUG modules install path as specified by 'installpath' and 'subdir_modules': /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules
== 2016-07-07 12:03:01,147 filetools.py:937 DEBUG Not creating existing path /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules/all/toy
== 2016-07-07 12:03:01,147 easyblock.py:925 DEBUG Full list of dependencies: []
== 2016-07-07 12:03:01,147 easyconfig.py:1568 DEBUG Determining initial module paths for <easybuild.framework.easyconfig.easyconfig.EasyConfig object at 0x7fb8e230b9d0>
== 2016-07-07 12:03:01,147 easyconfig.py:1570 DEBUG Obtained initial module paths: []
== 2016-07-07 12:03:01,147 modules.py:776 DEBUG Top of module tree reached with toy/0.0 (module subdir: /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules/all/)
== 2016-07-07 12:03:01,148 easyblock.py:935 DEBUG List of retained dependencies: []
== 2016-07-07 12:03:01,148 easyconfig.py:1554 DEBUG Determining modulepath extensions for <easybuild.framework.easyconfig.easyconfig.EasyConfig object at 0x7fb8e230b9d0>
== 2016-07-07 12:03:01,148 easyconfig.py:1556 DEBUG Obtained modulepath extensions: []
== 2016-07-07 12:03:01,148 easyblock.py:1065 DEBUG Including module path extensions returned by module naming scheme: []
== 2016-07-07 12:03:01,148 easyconfig.py:1501 DEBUG Determining full module name for <easybuild.framework.easyconfig.easyconfig.EasyConfig object at 0x7fb8e230b9d0> (force_visible: False)
== 2016-07-07 12:03:01,148 easyconfig.py:1481 DEBUG No alternative software name specified to determine module name with
== 2016-07-07 12:03:01,149 utilities.py:102 DEBUG Module name toy/0.0 validated
== 2016-07-07 12:03:01,149 easyconfig.py:1508 DEBUG Obtained valid full module name toy/0.0
== 2016-07-07 12:03:01,149 easyblock.py:1022 DEBUG make_module_extra added this: setenv	EBROOTTOY		"$root"
setenv	EBVERSIONTOY		"0.0"
setenv	EBDEVELTOY		"$root/easybuild/toy-0.0-easybuild-devel"


== 2016-07-07 12:03:01,149 config.py:407 DEBUG modules install path as specified by 'installpath' and 'subdir_modules': /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules
== 2016-07-07 12:03:01,149 filetools.py:937 DEBUG Not creating existing path /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules/all/toy
== 2016-07-07 12:03:01,149 easyblock.py:2000 INFO Module file /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules/all/toy/0.0 written: #%Module
proc ModulesHelp { } {
    puts stderr { Toy C program. - Homepage: http://hpcugent.github.com/easybuild
    }
}

module-whatis {Description: Toy C program. - Homepage: http://hpcugent.github.com/easybuild}

set root /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/software/toy/0.0

conflict toy

prepend-path	LD_LIBRARY_PATH		$root/lib
prepend-path	LIBRARY_PATH		$root/lib
prepend-path	PATH		$root/bin
setenv	EBROOTTOY		"$root"
setenv	EBVERSIONTOY		"0.0"
setenv	EBDEVELTOY		"$root/easybuild/toy-0.0-easybuild-devel"

# Built with EasyBuild version 2.9.0.dev0

== 2016-07-07 12:03:01,150 config.py:407 DEBUG modules install path as specified by 'installpath' and 'subdir_modules': /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules
== 2016-07-07 12:03:01,150 modules.py:1166 DEBUG Invallidating module cache entries for path '/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules/all'
== 2016-07-07 12:03:01,150 modules.py:1170 DEBUG Paths for 'module avail' key '('MODULEPATH=/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules/all:/home/caroline/GitHub/easybuild-framework/test/framework/modules', 'modulecmd', '')': ['/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules/all', '/home/caroline/GitHub/easybuild-framework/test/framework/modules']
== 2016-07-07 12:03:01,150 modules.py:1174 DEBUG Entry '('MODULEPATH=/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules/all:/home/caroline/GitHub/easybuild-framework/test/framework/modules', 'modulecmd', '')' in 'module avail' cache is evicted, marked as invalid via path '/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules/all': ['ATLAS/3.8.4-gompi-1.1.0-no-OFED-LAPACK-3.4.0', 'BLACS/1.1-gompi-1.1.0-no-OFED', 'CUDA/5.0.35-1', 'CategorizedHMNS/Compiler/GCC/4.7.2/mpi/OpenMPI/1.6.4', 'CategorizedHMNS/Compiler/GCC/4.7.2/system/hwloc/1.6.2', 'CategorizedHMNS/Core/compiler/GCC/4.7.2', 'CategorizedHMNS/Core/toolchain/gompi/1.4.10', 'CategorizedHMNS/Core/toolchain/goolf/1.4.10', 'CategorizedHMNS/MPI/GCC/4.7.2/OpenMPI/1.6.4/numlib/FFTW/3.3.3', 'CategorizedHMNS/MPI/GCC/4.7.2/OpenMPI/1.6.4/numlib/OpenBLAS/0.2.6-LAPACK-3.4.2', 'CategorizedHMNS/MPI/GCC/4.7.2/OpenMPI/1.6.4/numlib/ScaLAPACK/2.0.2-OpenBLAS-0.2.6-LAPACK-3.4.2', 'Clang/3.2-GCC-4.7.2', 'ClangGCC/1.1.2', 'Compiler/GCC/4.7.2/OpenMPI/1.6.4', 'Compiler/GCC/4.7.2/hwloc/1.6.2', 'Compiler/intel/2013.5.192-GCC-4.8.3/impi/4.1.3.049', 'Core/GCC/4.7.2', 'Core/GCC/4.8.3', 'Core/gompi/1.4.10', 'Core/goolf/1.4.10', 'Core/icc/2013.5.192-GCC-4.8.3', 'Core/iccifort/2013.5.192-GCC-4.8.3', 'Core/ifort/2013.5.192-GCC-4.8.3', 'Core/iimpi/5.5.3-GCC-4.8.3', 'CrayCCE/2015.06-XC', 'CrayGNU/2015.06-XC', 'CrayIntel/2015.06-XC', 'FFTW/3.3.1-gompi-1.1.0-no-OFED', 'FFTW/3.3.3-cgompi-1.1.6', 'FFTW/3.3.3-gompi-1.3.12', 'GCC/4.6.3', 'GCC/4.6.4', 'GCC/4.7.2', 'LAPACK/3.4.0-gompi-1.1.0-no-OFED', 'MPI/GCC/4.7.2/OpenMPI/1.6.4/FFTW/3.3.3', 'MPI/GCC/4.7.2/OpenMPI/1.6.4/OpenBLAS/0.2.6-LAPACK-3.4.2', 'MPI/GCC/4.7.2/OpenMPI/1.6.4/ScaLAPACK/2.0.2-OpenBLAS-0.2.6-LAPACK-3.4.2', 'OpenBLAS/0.2.6-cgompi-1.1.6-LAPACK-3.4.2', 'OpenBLAS/0.2.6-gompi-1.3.12-LAPACK-3.4.2', 'OpenMPI/1.4.5-GCC-4.6.3-no-OFED', 'OpenMPI/1.6.4-ClangGCC-1.1.2', 'OpenMPI/1.6.4-GCC-4.6.4', 'PrgEnv-cray/5.2.40', 'PrgEnv-gnu/5.2.40', 'PrgEnv-intel/5.2.40', 'PrgEnv-pgi/5.2.40', 'ScaLAPACK/1.8.0-gompi-1.1.0-no-OFED-ATLAS-3.8.4-LAPACK-3.4.0-BLACS-1.1', 'ScaLAPACK/2.0.2-cgompi-1.1.6-OpenBLAS-0.2.6-LAPACK-3.4.2', 'ScaLAPACK/2.0.2-gompi-1.3.12-OpenBLAS-0.2.6-LAPACK-3.4.2', 'cce/8.3.12', 'cgompi/1.1.6', 'cgoolf/1.1.6', 'cray-libsci/13.0.4', 'cray-mpich/7.2.2', 'craype-test', 'goalf/1.1.0-no-OFED', 'goalf/1.1.0-no-OFED-brokenBLACS', 'goalf/1.1.0-no-OFED-brokenFFTW', 'gompi/1.1.0-no-OFED', 'gompi/1.3.12', 'goolfc/1.3.12', 'hwloc/1.6.2-ClangGCC-1.1.2', 'hwloc/1.6.2-GCC-4.6.4', 'icc/11.1.073', 'icc/2011.13.367', 'iccifort/2011.13.367', 'ictce/3.2.2.u3', 'ictce/4.1.13', 'ifort/11.1.073', 'ifort/2011.13.367', 'imkl/10.2.6.038', 'imkl/10.3.12.361', 'impi/4.0.0.028', 'impi/4.1.0.027', 'intel/15.0.1.133', 'toy/0.0']
== 2016-07-07 12:03:01,150 config.py:407 DEBUG modules install path as specified by 'installpath' and 'subdir_modules': /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules
== 2016-07-07 12:03:01,151 config.py:407 DEBUG modules install path as specified by 'installpath' and 'subdir_modules': /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules
== 2016-07-07 12:03:01,151 filetools.py:937 DEBUG Not creating existing path /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules/tools/toy
== 2016-07-07 12:03:01,151 easyblock.py:847 INFO Making devel module...
== 2016-07-07 12:03:01,151 config.py:407 DEBUG modules install path as specified by 'installpath' and 'subdir_modules': /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules
== 2016-07-07 12:03:01,151 module_generator.py:77 DEBUG Fake mode: using /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/eb-TBFSYz/eb-HMta7q/tmpnRMtEC (instead of /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules)
== 2016-07-07 12:03:01,151 config.py:407 DEBUG modules install path as specified by 'installpath' and 'subdir_modules': /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules
== 2016-07-07 12:03:01,152 module_generator.py:77 DEBUG Fake mode: using /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/eb-TBFSYz/eb-HMta7q/tmpnRMtEC (instead of /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules)
== 2016-07-07 12:03:01,152 filetools.py:909 INFO Creating directory /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/eb-TBFSYz/eb-HMta7q/tmpnRMtEC/all/toy (parents: True, set_gid: False, sticky: False)
== 2016-07-07 12:03:01,152 easyblock.py:925 DEBUG Full list of dependencies: []
== 2016-07-07 12:03:01,152 easyconfig.py:1568 DEBUG Determining initial module paths for <easybuild.framework.easyconfig.easyconfig.EasyConfig object at 0x7fb8e230b9d0>
== 2016-07-07 12:03:01,152 easyconfig.py:1570 DEBUG Obtained initial module paths: []
== 2016-07-07 12:03:01,152 modules.py:776 DEBUG Top of module tree reached with toy/0.0 (module subdir: /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules/all/)
== 2016-07-07 12:03:01,152 easyblock.py:935 DEBUG List of retained dependencies: []
== 2016-07-07 12:03:01,153 easyconfig.py:1554 DEBUG Determining modulepath extensions for <easybuild.framework.easyconfig.easyconfig.EasyConfig object at 0x7fb8e230b9d0>
== 2016-07-07 12:03:01,153 easyconfig.py:1556 DEBUG Obtained modulepath extensions: []
== 2016-07-07 12:03:01,153 easyblock.py:1065 DEBUG Including module path extensions returned by module naming scheme: []
== 2016-07-07 12:03:01,153 easyconfig.py:1501 DEBUG Determining full module name for <easybuild.framework.easyconfig.easyconfig.EasyConfig object at 0x7fb8e230b9d0> (force_visible: False)
== 2016-07-07 12:03:01,153 easyconfig.py:1481 DEBUG No alternative software name specified to determine module name with
== 2016-07-07 12:03:01,154 utilities.py:102 DEBUG Module name toy/0.0 validated
== 2016-07-07 12:03:01,154 easyconfig.py:1508 DEBUG Obtained valid full module name toy/0.0
== 2016-07-07 12:03:01,154 easyblock.py:1022 DEBUG make_module_extra added this: setenv	EBROOTTOY		"$root"
setenv	EBVERSIONTOY		"0.0"
setenv	EBDEVELTOY		"$root/easybuild/toy-0.0-easybuild-devel"


== 2016-07-07 12:03:01,154 config.py:407 DEBUG modules install path as specified by 'installpath' and 'subdir_modules': /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules
== 2016-07-07 12:03:01,154 module_generator.py:77 DEBUG Fake mode: using /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/eb-TBFSYz/eb-HMta7q/tmpnRMtEC (instead of /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules)
== 2016-07-07 12:03:01,154 filetools.py:937 DEBUG Not creating existing path /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/eb-TBFSYz/eb-HMta7q/tmpnRMtEC/all/toy
== 2016-07-07 12:03:01,154 easyblock.py:2000 INFO Module file /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/eb-TBFSYz/eb-HMta7q/tmpnRMtEC/all/toy/0.0 written: #%Module
proc ModulesHelp { } {
    puts stderr { Toy C program. - Homepage: http://hpcugent.github.com/easybuild
    }
}

module-whatis {Description: Toy C program. - Homepage: http://hpcugent.github.com/easybuild}

set root /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/software/toy/0.0

conflict toy

prepend-path	LD_LIBRARY_PATH		$root/lib
prepend-path	LIBRARY_PATH		$root/lib
prepend-path	PATH		$root/bin
setenv	EBROOTTOY		"$root"
setenv	EBVERSIONTOY		"0.0"
setenv	EBDEVELTOY		"$root/easybuild/toy-0.0-easybuild-devel"

# Built with EasyBuild version 2.9.0.dev0

== 2016-07-07 12:03:01,155 config.py:407 DEBUG modules install path as specified by 'installpath' and 'subdir_modules': /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules
== 2016-07-07 12:03:01,155 module_generator.py:77 DEBUG Fake mode: using /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/eb-TBFSYz/eb-HMta7q/tmpnRMtEC (instead of /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules)
== 2016-07-07 12:03:01,155 modules.py:1166 DEBUG Invallidating module cache entries for path '/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/eb-TBFSYz/eb-HMta7q/tmpnRMtEC/all'
== 2016-07-07 12:03:01,155 config.py:407 DEBUG modules install path as specified by 'installpath' and 'subdir_modules': /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules
== 2016-07-07 12:03:01,155 module_generator.py:77 DEBUG Fake mode: using /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/eb-TBFSYz/eb-HMta7q/tmpnRMtEC (instead of /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules)
== 2016-07-07 12:03:01,155 config.py:407 DEBUG modules install path as specified by 'installpath' and 'subdir_modules': /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules
== 2016-07-07 12:03:01,155 module_generator.py:77 DEBUG Fake mode: using /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/eb-TBFSYz/eb-HMta7q/tmpnRMtEC (instead of /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules)
== 2016-07-07 12:03:01,156 filetools.py:909 INFO Creating directory /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/eb-TBFSYz/eb-HMta7q/tmpnRMtEC/tools/toy (parents: True, set_gid: False, sticky: False)
== 2016-07-07 12:03:01,156 filetools.py:937 DEBUG Not creating existing path /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/eb-TBFSYz/eb-HMta7q/tmpnRMtEC/all/
== 2016-07-07 12:03:01,156 modules.py:603 DEBUG Current MODULEPATH: /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules/all:/home/caroline/GitHub/easybuild-framework/test/framework/modules
== 2016-07-07 12:03:01,156 modules.py:610 DEBUG Changing LD_LIBRARY_PATH from '' to '' in environment for module command
== 2016-07-07 12:03:01,156 modules.py:610 DEBUG Changing LD_PRELOAD from '' to '' in environment for module command
== 2016-07-07 12:03:01,156 modules.py:621 DEBUG Running module command '/usr/local/Modules/3.2.10/bin/modulecmd python use /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/eb-TBFSYz/eb-HMta7q/tmpnRMtEC/all/' from /home/caroline/GitHub/easybuild-framework
== 2016-07-07 12:03:01,162 modules.py:627 DEBUG Output of module command '/usr/local/Modules/3.2.10/bin/modulecmd python use /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/eb-TBFSYz/eb-HMta7q/tmpnRMtEC/all/': stdout: os.environ['MODULEPATH'] = '/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/eb-TBFSYz/eb-HMta7q/tmpnRMtEC/all/:/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules/all:/home/caroline/GitHub/easybuild-framework/test/framework/modules'
; stderr: 
== 2016-07-07 12:03:01,163 modules.py:580 DEBUG No checking of module output implemented for EnvironmentModulesC
== 2016-07-07 12:03:01,163 modules.py:658 DEBUG Correcting paths in $LD_LIBRARY_PATH from [''] to []
== 2016-07-07 12:03:01,163 modules.py:658 DEBUG Correcting paths in $LD_PRELOAD from [''] to []
== 2016-07-07 12:03:01,163 modules.py:311 DEBUG $MODULEPATH after set_mod_paths: /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/eb-TBFSYz/eb-HMta7q/tmpnRMtEC/all/:/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules/all:/home/caroline/GitHub/easybuild-framework/test/framework/modules
== 2016-07-07 12:03:01,163 easyconfig.py:1568 DEBUG Determining initial module paths for <easybuild.framework.easyconfig.easyconfig.EasyConfig object at 0x7fb8e230b9d0>
== 2016-07-07 12:03:01,163 easyconfig.py:1570 DEBUG Obtained initial module paths: []
== 2016-07-07 12:03:01,164 environment.py:167 DEBUG Key in new environment found that is different from old one: MODULEPATH (/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules/all:/home/caroline/GitHub/easybuild-framework/test/framework/modules)
== 2016-07-07 12:03:01,164 environment.py:97 INFO Environment variable MODULEPATH set to /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules/all:/home/caroline/GitHub/easybuild-framework/test/framework/modules (previous value: '/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/eb-TBFSYz/eb-HMta7q/tmpnRMtEC/all/:/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules/all:/home/caroline/GitHub/easybuild-framework/test/framework/modules')
== 2016-07-07 12:03:01,164 modules.py:384 DEBUG Current module paths: ['/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules/all', '/home/caroline/GitHub/easybuild-framework/test/framework/modules']; target module paths: ['/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/eb-TBFSYz/eb-HMta7q/tmpnRMtEC/all/', '/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules/all', '/home/caroline/GitHub/easybuild-framework/test/framework/modules']
== 2016-07-07 12:03:01,164 modules.py:392 DEBUG Not prepending 2 last entries of ['/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/eb-TBFSYz/eb-HMta7q/tmpnRMtEC/all/', '/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules/all', '/home/caroline/GitHub/easybuild-framework/test/framework/modules']
== 2016-07-07 12:03:01,165 filetools.py:937 DEBUG Not creating existing path /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/eb-TBFSYz/eb-HMta7q/tmpnRMtEC/all/
== 2016-07-07 12:03:01,165 modules.py:603 DEBUG Current MODULEPATH: /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules/all:/home/caroline/GitHub/easybuild-framework/test/framework/modules
== 2016-07-07 12:03:01,165 modules.py:610 DEBUG Changing LD_LIBRARY_PATH from '' to '' in environment for module command
== 2016-07-07 12:03:01,165 modules.py:610 DEBUG Changing LD_PRELOAD from '' to '' in environment for module command
== 2016-07-07 12:03:01,165 modules.py:621 DEBUG Running module command '/usr/local/Modules/3.2.10/bin/modulecmd python use /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/eb-TBFSYz/eb-HMta7q/tmpnRMtEC/all/' from /home/caroline/GitHub/easybuild-framework
== 2016-07-07 12:03:01,171 modules.py:627 DEBUG Output of module command '/usr/local/Modules/3.2.10/bin/modulecmd python use /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/eb-TBFSYz/eb-HMta7q/tmpnRMtEC/all/': stdout: os.environ['MODULEPATH'] = '/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/eb-TBFSYz/eb-HMta7q/tmpnRMtEC/all/:/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules/all:/home/caroline/GitHub/easybuild-framework/test/framework/modules'
; stderr: 
== 2016-07-07 12:03:01,171 modules.py:580 DEBUG No checking of module output implemented for EnvironmentModulesC
== 2016-07-07 12:03:01,172 modules.py:658 DEBUG Correcting paths in $LD_LIBRARY_PATH from [''] to []
== 2016-07-07 12:03:01,172 modules.py:658 DEBUG Correcting paths in $LD_PRELOAD from [''] to []
== 2016-07-07 12:03:01,172 modules.py:311 DEBUG $MODULEPATH after set_mod_paths: /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/eb-TBFSYz/eb-HMta7q/tmpnRMtEC/all/:/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules/all:/home/caroline/GitHub/easybuild-framework/test/framework/modules
== 2016-07-07 12:03:01,172 modules.py:397 INFO $MODULEPATH set via list of module paths (w/ 'module use'): /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/eb-TBFSYz/eb-HMta7q/tmpnRMtEC/all/:/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules/all:/home/caroline/GitHub/easybuild-framework/test/framework/modules
== 2016-07-07 12:03:01,172 modules.py:603 DEBUG Current MODULEPATH: /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/eb-TBFSYz/eb-HMta7q/tmpnRMtEC/all/:/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules/all:/home/caroline/GitHub/easybuild-framework/test/framework/modules
== 2016-07-07 12:03:01,172 modules.py:610 DEBUG Changing LD_LIBRARY_PATH from '' to '' in environment for module command
== 2016-07-07 12:03:01,172 modules.py:610 DEBUG Changing LD_PRELOAD from '' to '' in environment for module command
== 2016-07-07 12:03:01,173 modules.py:621 DEBUG Running module command '/usr/local/Modules/3.2.10/bin/modulecmd python load toy/0.0' from /home/caroline/GitHub/easybuild-framework
== 2016-07-07 12:03:01,182 modules.py:627 DEBUG Output of module command '/usr/local/Modules/3.2.10/bin/modulecmd python load toy/0.0': stdout: os.environ['EBDEVELTOY'] = '/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/software/toy/0.0/easybuild/toy-0.0-easybuild-devel'
os.environ['EBROOTTOY'] = '/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/software/toy/0.0'
os.environ['EBVERSIONTOY'] = '0.0'
os.environ['LD_LIBRARY_PATH'] = '/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/software/toy/0.0/lib'
os.environ['LIBRARY_PATH'] = '/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/software/toy/0.0/lib'
os.environ['LOADEDMODULES'] = 'toy/0.0'
os.environ['PATH'] = '/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/software/toy/0.0/bin:/home/caroline/bin:/home/caroline/bin:/usr/local/sbin:/usr/local/bin:/usr/bin:/usr/bin/site_perl:/usr/bin/vendor_perl:/usr/bin/core_perl:/home/caroline/GitHub/easybuild-framework:/usr/local/Modules/3.2.10/bin/:/home/caroline/GitHub/easybuild-framework:/usr/local/Modules/3.2.10/bin/'
os.environ['_LMFILES_'] = '/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/eb-TBFSYz/eb-HMta7q/tmpnRMtEC/all//toy/0.0'
; stderr: 
== 2016-07-07 12:03:01,182 modules.py:580 DEBUG No checking of module output implemented for EnvironmentModulesC
== 2016-07-07 12:03:01,183 modules.py:658 DEBUG Correcting paths in $LD_LIBRARY_PATH from ['/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/software/toy/0.0/lib'] to ['/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/software/toy/0.0/lib']
== 2016-07-07 12:03:01,183 modules.py:658 DEBUG Correcting paths in $LD_PRELOAD from [''] to []
== 2016-07-07 12:03:01,183 filetools.py:909 INFO Creating directory /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/software/toy/0.0/easybuild (parents: True, set_gid: False, sticky: False)
== 2016-07-07 12:03:01,183 easyconfig.py:1501 DEBUG Determining full module name for <easybuild.framework.easyconfig.easyconfig.EasyConfig object at 0x7fb8e230b9d0> (force_visible: False)
== 2016-07-07 12:03:01,183 easyconfig.py:1481 DEBUG No alternative software name specified to determine module name with
== 2016-07-07 12:03:01,184 utilities.py:102 DEBUG Module name toy/0.0 validated
== 2016-07-07 12:03:01,184 easyconfig.py:1508 DEBUG Obtained valid full module name toy/0.0
== 2016-07-07 12:03:01,184 easyblock.py:886 DEBUG Writing devel module to /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/software/toy/0.0/easybuild/toy-0.0-easybuild-devel
== 2016-07-07 12:03:01,184 filetools.py:937 DEBUG Not creating existing path /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/software/toy/0.0/easybuild
== 2016-07-07 12:03:01,184 modules.py:603 DEBUG Current MODULEPATH: /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/eb-TBFSYz/eb-HMta7q/tmpnRMtEC/all/:/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules/all:/home/caroline/GitHub/easybuild-framework/test/framework/modules
== 2016-07-07 12:03:01,184 modules.py:610 DEBUG Changing LD_LIBRARY_PATH from '/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/software/toy/0.0/lib' to '' in environment for module command
== 2016-07-07 12:03:01,184 modules.py:610 DEBUG Changing LD_PRELOAD from '' to '' in environment for module command
== 2016-07-07 12:03:01,185 modules.py:621 DEBUG Running module command '/usr/local/Modules/3.2.10/bin/modulecmd python unload toy/0.0' from /home/caroline/GitHub/easybuild-framework
== 2016-07-07 12:03:01,190 modules.py:627 DEBUG Output of module command '/usr/local/Modules/3.2.10/bin/modulecmd python unload toy/0.0': stdout: os.environ['PATH'] = '/home/caroline/bin:/home/caroline/bin:/usr/local/sbin:/usr/local/bin:/usr/bin:/usr/bin/site_perl:/usr/bin/vendor_perl:/usr/bin/core_perl:/home/caroline/GitHub/easybuild-framework:/usr/local/Modules/3.2.10/bin/:/home/caroline/GitHub/easybuild-framework:/usr/local/Modules/3.2.10/bin/'
os.environ['EBDEVELTOY'] = ''
del os.environ['EBDEVELTOY']
os.environ['EBROOTTOY'] = ''
del os.environ['EBROOTTOY']
os.environ['EBVERSIONTOY'] = ''
del os.environ['EBVERSIONTOY']
os.environ['LIBRARY_PATH'] = ''
del os.environ['LIBRARY_PATH']
os.environ['LOADEDMODULES'] = ''
del os.environ['LOADEDMODULES']
os.environ['_LMFILES_'] = ''
del os.environ['_LMFILES_']
; stderr: 
== 2016-07-07 12:03:01,191 modules.py:580 DEBUG No checking of module output implemented for EnvironmentModulesC
== 2016-07-07 12:03:01,191 modules.py:658 DEBUG Correcting paths in $LD_LIBRARY_PATH from ['/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/software/toy/0.0/lib'] to ['/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/software/toy/0.0/lib']
== 2016-07-07 12:03:01,191 modules.py:658 DEBUG Correcting paths in $LD_PRELOAD from [''] to []
== 2016-07-07 12:03:01,191 modules.py:603 DEBUG Current MODULEPATH: /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/eb-TBFSYz/eb-HMta7q/tmpnRMtEC/all/:/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules/all:/home/caroline/GitHub/easybuild-framework/test/framework/modules
== 2016-07-07 12:03:01,192 modules.py:610 DEBUG Changing LD_LIBRARY_PATH from '/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/software/toy/0.0/lib' to '' in environment for module command
== 2016-07-07 12:03:01,192 modules.py:610 DEBUG Changing LD_PRELOAD from '' to '' in environment for module command
== 2016-07-07 12:03:01,192 modules.py:621 DEBUG Running module command '/usr/local/Modules/3.2.10/bin/modulecmd python unuse /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/eb-TBFSYz/eb-HMta7q/tmpnRMtEC/all/' from /home/caroline/GitHub/easybuild-framework
== 2016-07-07 12:03:01,196 modules.py:627 DEBUG Output of module command '/usr/local/Modules/3.2.10/bin/modulecmd python unuse /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/eb-TBFSYz/eb-HMta7q/tmpnRMtEC/all/': stdout: os.environ['MODULEPATH'] = '/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules/all:/home/caroline/GitHub/easybuild-framework/test/framework/modules'
; stderr: 
== 2016-07-07 12:03:01,197 modules.py:580 DEBUG No checking of module output implemented for EnvironmentModulesC
== 2016-07-07 12:03:01,197 modules.py:658 DEBUG Correcting paths in $LD_LIBRARY_PATH from ['/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/software/toy/0.0/lib'] to ['/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/software/toy/0.0/lib']
== 2016-07-07 12:03:01,197 modules.py:658 DEBUG Correcting paths in $LD_PRELOAD from [''] to []
== 2016-07-07 12:03:01,197 modules.py:311 DEBUG $MODULEPATH after set_mod_paths: /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules/all:/home/caroline/GitHub/easybuild-framework/test/framework/modules
== 2016-07-07 12:03:01,197 filetools.py:1010 INFO Path /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/eb-TBFSYz/eb-HMta7q/tmpnRMtEC successfully removed.
== 2016-07-07 12:03:01,198 environment.py:167 DEBUG Key in new environment found that is different from old one: LD_LIBRARY_PATH ()
== 2016-07-07 12:03:01,198 environment.py:97 INFO Environment variable LD_LIBRARY_PATH set to  (previous value: '/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/software/toy/0.0/lib')
== 2016-07-07 12:03:01,198 environment.py:170 DEBUG Key in new environment found that is not in old one: LOADEDMODULES ()
== 2016-07-07 12:03:01,198 environment.py:97 INFO Environment variable LOADEDMODULES set to  (previously undefined)
== 2016-07-07 12:03:01,199 templates.py:149 DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': ['/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmpHuMQeW/toy/0.0/dummy-dummy/toy-0.0/', 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [8, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [{}, "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'whatis': [None, 'List of brief (one line) package description entries', (8, 'modules')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2016-07-07 12:03:01,200 templates.py:173 DEBUG version found in easyconfig is 0.0
== 2016-07-07 12:03:01,200 templates.py:210 DEBUG name: name, config: toy
== 2016-07-07 12:03:01,200 templates.py:210 DEBUG name: version, config: 0.0
== 2016-07-07 12:03:01,201 templates.py:210 DEBUG name: versionsuffix, config: 
== 2016-07-07 12:03:01,201 templates.py:210 DEBUG name: versionprefix, config: 
== 2016-07-07 12:03:01,201 templates.py:149 DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': ['/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmpHuMQeW/toy/0.0/dummy-dummy/toy-0.0/', 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [8, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [{}, "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'whatis': [None, 'List of brief (one line) package description entries', (8, 'modules')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2016-07-07 12:03:01,202 templates.py:173 DEBUG version found in easyconfig is 0.0
== 2016-07-07 12:03:01,203 templates.py:210 DEBUG name: name, config: toy
== 2016-07-07 12:03:01,203 templates.py:210 DEBUG name: version, config: 0.0
== 2016-07-07 12:03:01,203 templates.py:210 DEBUG name: versionsuffix, config: 
== 2016-07-07 12:03:01,203 templates.py:210 DEBUG name: versionprefix, config: 
== 2016-07-07 12:03:01,203 easyblock.py:2519 INFO Running permissions_permissions_step step
== 2016-07-07 12:03:01,203 filetools.py:791 INFO Adjusting permissions recursively for /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/software/toy/0.0
== 2016-07-07 12:03:01,204 easyblock.py:2055 INFO Successfully removed write permissions recursively for group/other on install dir.
== 2016-07-07 12:03:01,204 easyblock.py:2059 DEBUG Ensuring read permissions for user/group on install dir (recursively)
== 2016-07-07 12:03:01,204 easyblock.py:2062 DEBUG Also ensuring read permissions for others on install dir (no group specified)
== 2016-07-07 12:03:01,204 filetools.py:791 INFO Adjusting permissions recursively for /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/software/toy/0.0
== 2016-07-07 12:03:01,204 easyblock.py:2071 INFO Successfully added read permissions '0444' recursively on install dir
== 2016-07-07 12:03:01,205 templates.py:149 DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': ['/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmpHuMQeW/toy/0.0/dummy-dummy/toy-0.0/', 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [8, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [{}, "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'whatis': [None, 'List of brief (one line) package description entries', (8, 'modules')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2016-07-07 12:03:01,206 templates.py:173 DEBUG version found in easyconfig is 0.0
== 2016-07-07 12:03:01,206 templates.py:210 DEBUG name: name, config: toy
== 2016-07-07 12:03:01,206 templates.py:210 DEBUG name: version, config: 0.0
== 2016-07-07 12:03:01,206 templates.py:210 DEBUG name: versionsuffix, config: 
== 2016-07-07 12:03:01,206 templates.py:210 DEBUG name: versionprefix, config: 
== 2016-07-07 12:03:01,207 templates.py:149 DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': ['/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmpHuMQeW/toy/0.0/dummy-dummy/toy-0.0/', 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [8, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [{}, "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'whatis': [None, 'List of brief (one line) package description entries', (8, 'modules')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2016-07-07 12:03:01,208 templates.py:173 DEBUG version found in easyconfig is 0.0
== 2016-07-07 12:03:01,208 templates.py:210 DEBUG name: name, config: toy
== 2016-07-07 12:03:01,208 templates.py:210 DEBUG name: version, config: 0.0
== 2016-07-07 12:03:01,209 templates.py:210 DEBUG name: versionsuffix, config: 
== 2016-07-07 12:03:01,209 templates.py:210 DEBUG name: versionprefix, config: 
== 2016-07-07 12:03:01,209 easyblock.py:2519 INFO Running package_package_step step
== 2016-07-07 12:03:01,209 easyblock.py:1752 INFO Skipping package step (not enabled)
== 2016-07-07 12:03:01,210 templates.py:149 DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': ['/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmpHuMQeW/toy/0.0/dummy-dummy/toy-0.0/', 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [8, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [{}, "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'whatis': [None, 'List of brief (one line) package description entries', (8, 'modules')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2016-07-07 12:03:01,211 templates.py:173 DEBUG version found in easyconfig is 0.0
== 2016-07-07 12:03:01,211 templates.py:210 DEBUG name: name, config: toy
== 2016-07-07 12:03:01,211 templates.py:210 DEBUG name: version, config: 0.0
== 2016-07-07 12:03:01,211 templates.py:210 DEBUG name: versionsuffix, config: 
== 2016-07-07 12:03:01,211 templates.py:210 DEBUG name: versionprefix, config: 
== 2016-07-07 12:03:01,212 templates.py:149 DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': ['/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmpHuMQeW/toy/0.0/dummy-dummy/toy-0.0/', 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [8, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [{}, "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'whatis': [None, 'List of brief (one line) package description entries', (8, 'modules')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2016-07-07 12:03:01,213 templates.py:173 DEBUG version found in easyconfig is 0.0
== 2016-07-07 12:03:01,213 templates.py:210 DEBUG name: name, config: toy
== 2016-07-07 12:03:01,213 templates.py:210 DEBUG name: version, config: 0.0
== 2016-07-07 12:03:01,213 templates.py:210 DEBUG name: versionsuffix, config: 
== 2016-07-07 12:03:01,213 templates.py:210 DEBUG name: versionprefix, config: 
== 2016-07-07 12:03:01,213 easyblock.py:2519 INFO Running testcases_load_module step
== 2016-07-07 12:03:01,214 easyconfig.py:1568 DEBUG Determining initial module paths for <easybuild.framework.easyconfig.easyconfig.EasyConfig object at 0x7fb8e230b9d0>
== 2016-07-07 12:03:01,214 easyconfig.py:1570 DEBUG Obtained initial module paths: []
== 2016-07-07 12:03:01,214 modules.py:384 DEBUG Current module paths: ['/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules/all', '/home/caroline/GitHub/easybuild-framework/test/framework/modules']; target module paths: ['/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules/all', '/home/caroline/GitHub/easybuild-framework/test/framework/modules']
== 2016-07-07 12:03:01,214 modules.py:386 DEBUG Current value of $MODULEPATH already matches list of module path ['/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules/all', '/home/caroline/GitHub/easybuild-framework/test/framework/modules']
== 2016-07-07 12:03:01,214 modules.py:603 DEBUG Current MODULEPATH: /tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules/all:/home/caroline/GitHub/easybuild-framework/test/framework/modules
== 2016-07-07 12:03:01,214 modules.py:610 DEBUG Changing LD_LIBRARY_PATH from '' to '' in environment for module command
== 2016-07-07 12:03:01,215 modules.py:610 DEBUG Changing LD_PRELOAD from '' to '' in environment for module command
== 2016-07-07 12:03:01,215 modules.py:621 DEBUG Running module command '/usr/local/Modules/3.2.10/bin/modulecmd python load toy/0.0' from /home/caroline/GitHub/easybuild-framework
== 2016-07-07 12:03:01,223 modules.py:627 DEBUG Output of module command '/usr/local/Modules/3.2.10/bin/modulecmd python load toy/0.0': stdout: os.environ['EBDEVELTOY'] = '/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/software/toy/0.0/easybuild/toy-0.0-easybuild-devel'
os.environ['EBROOTTOY'] = '/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/software/toy/0.0'
os.environ['EBVERSIONTOY'] = '0.0'
os.environ['LD_LIBRARY_PATH'] = '/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/software/toy/0.0/lib'
os.environ['LIBRARY_PATH'] = '/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/software/toy/0.0/lib'
os.environ['LOADEDMODULES'] = 'toy/0.0'
os.environ['PATH'] = '/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/software/toy/0.0/bin:/home/caroline/bin:/home/caroline/bin:/usr/local/sbin:/usr/local/bin:/usr/bin:/usr/bin/site_perl:/usr/bin/vendor_perl:/usr/bin/core_perl:/home/caroline/GitHub/easybuild-framework:/usr/local/Modules/3.2.10/bin/:/home/caroline/GitHub/easybuild-framework:/usr/local/Modules/3.2.10/bin/'
os.environ['_LMFILES_'] = '/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/modules/all/toy/0.0'
; stderr: 
== 2016-07-07 12:03:01,224 modules.py:580 DEBUG No checking of module output implemented for EnvironmentModulesC
== 2016-07-07 12:03:01,224 modules.py:658 DEBUG Correcting paths in $LD_LIBRARY_PATH from ['/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/software/toy/0.0/lib'] to ['/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmp_L0_SL/software/toy/0.0/lib']
== 2016-07-07 12:03:01,224 modules.py:658 DEBUG Correcting paths in $LD_PRELOAD from [''] to []
== 2016-07-07 12:03:01,225 templates.py:149 DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': ['/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmpHuMQeW/toy/0.0/dummy-dummy/toy-0.0/', 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [8, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [{}, "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'whatis': [None, 'List of brief (one line) package description entries', (8, 'modules')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2016-07-07 12:03:01,226 templates.py:173 DEBUG version found in easyconfig is 0.0
== 2016-07-07 12:03:01,226 templates.py:210 DEBUG name: name, config: toy
== 2016-07-07 12:03:01,226 templates.py:210 DEBUG name: version, config: 0.0
== 2016-07-07 12:03:01,226 templates.py:210 DEBUG name: versionsuffix, config: 
== 2016-07-07 12:03:01,227 templates.py:210 DEBUG name: versionprefix, config: 
== 2016-07-07 12:03:01,227 templates.py:149 DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': ['/tmp/eb-Ad5eHb/eb-6__md9/eb-36NtDB/tmpHuMQeW/toy/0.0/dummy-dummy/toy-0.0/', 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [8, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [{}, "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'whatis': [None, 'List of brief (one line) package description entries', (8, 'modules')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2016-07-07 12:03:01,228 templates.py:173 DEBUG version found in easyconfig is 0.0
== 2016-07-07 12:03:01,228 templates.py:210 DEBUG name: name, config: toy
== 2016-07-07 12:03:01,228 templates.py:210 DEBUG name: version, config: 0.0
== 2016-07-07 12:03:01,229 templates.py:210 DEBUG name: versionsuffix, config: 
== 2016-07-07 12:03:01,229 templates.py:210 DEBUG name: versionprefix, config: 
== 2016-07-07 12:03:01,229 easyblock.py:2519 INFO Running testcases_test_cases_step step
== 2016-07-07 12:03:01,229 easyblock.py:270 INFO Closing log for application name toy version 0.0
