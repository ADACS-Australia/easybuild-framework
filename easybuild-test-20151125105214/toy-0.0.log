== 2015-11-25 10:52:14,444 runpy.EB_toy INFO This is EasyBuild 2.4.0.dev0 (framework: 2.4.0.dev0, easyblocks: 2.2.0dev) on host deathstar.
== 2015-11-25 10:52:14,445 runpy.EB_toy INFO This is easyblock EB_toy from module easybuild.easyblocks.toy (/home/caroline/Documents/GitHub/easybuild-framework/test/framework/sandbox/easybuild/easyblocks/t/toy.py)
== 2015-11-25 10:52:14,445 runpy.EB_toy INFO Build dir set to /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmp3eXq8n/toy/0.0/dummy-dummy
== 2015-11-25 10:52:14,446 runpy.config DEBUG software install path as specified by 'installpath' and 'subdir_software': /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/software
== 2015-11-25 10:52:14,447 runpy.ActiveMNS DEBUG Determining software installation subdir for <easybuild.framework.easyconfig.easyconfig.EasyConfig object at 0x2849450>
== 2015-11-25 10:52:14,447 runpy.ActiveMNS DEBUG Obtained subdir toy/0.0
== 2015-11-25 10:52:14,448 runpy.EB_toy INFO Software install dir set to /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/software/toy/0.0
== 2015-11-25 10:52:14,448 runpy.config DEBUG modules install path as specified by 'installpath' and 'subdir_modules': /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules
== 2015-11-25 10:52:14,449 runpy.EB_toy INFO Module install dir set to /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules/all
== 2015-11-25 10:52:14,449 runpy.EB_toy INFO Init completed for application name toy version 0.0
== 2015-11-25 10:52:14,453 runpy.easyconfig.templates DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': [None, 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [None, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [[], "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2015-11-25 10:52:14,457 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,457 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,458 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,458 runpy.easyconfig.templates DEBUG name: name, config: toy
== 2015-11-25 10:52:14,458 runpy.easyconfig.templates DEBUG name: version, config: 0.0
== 2015-11-25 10:52:14,459 runpy.easyconfig.templates DEBUG name: versionsuffix, config: 
== 2015-11-25 10:52:14,459 runpy.easyconfig.templates DEBUG name: versionprefix, config: 
== 2015-11-25 10:52:14,460 runpy.easyconfig.templates DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': [None, 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [None, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [[], "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2015-11-25 10:52:14,461 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,462 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,462 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,462 runpy.easyconfig.templates DEBUG name: name, config: toy
== 2015-11-25 10:52:14,462 runpy.easyconfig.templates DEBUG name: version, config: 0.0
== 2015-11-25 10:52:14,463 runpy.easyconfig.templates DEBUG name: versionsuffix, config: 
== 2015-11-25 10:52:14,463 runpy.easyconfig.templates DEBUG name: versionprefix, config: 
== 2015-11-25 10:52:14,463 runpy.EB_toy INFO Running fetch_fetch_step step
== 2015-11-25 10:52:14,463 runpy.EB_toy WARNING Easyconfig does not specify an EasyBuild-version (key 'easybuild_version')! Assuming the latest version
== 2015-11-25 10:52:14,464 runpy.filetools INFO Command eb found at /usr/local/bin/eb
== 2015-11-25 10:52:14,464 runpy.easyconfig.tools DEBUG Also considering installation prefix /usr/local...
== 2015-11-25 10:52:14,464 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmp3eXq8n/easybuild/easyconfigs
== 2015-11-25 10:52:14,464 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at test/framework/easybuild/easyconfigs
== 2015-11-25 10:52:14,464 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at /home/caroline/Documents/GitHub/easybuild-framework/test/framework/easyconfigs/easybuild/easyconfigs
== 2015-11-25 10:52:14,465 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at easybuild/easyconfigs
== 2015-11-25 10:52:14,465 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at /usr/local/lib/python2.7/dist-packages/python_graph_core-1.8.2-py2.7.egg/easybuild/easyconfigs
== 2015-11-25 10:52:14,465 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at /usr/local/lib/python2.7/dist-packages/python_graph_dot-1.8.2-py2.7.egg/easybuild/easyconfigs
== 2015-11-25 10:52:14,465 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at /usr/local/lib/python2.7/dist-packages/pydot-1.0.28-py2.7.egg/easybuild/easyconfigs
== 2015-11-25 10:52:14,466 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at /usr/local/lib/python2.7/dist-packages/pyparsing-2.0.3-py2.7.egg/easybuild/easyconfigs
== 2015-11-25 10:52:14,466 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at /usr/local/lib/python2.7/dist-packages/easybuild_framework-2.4.0.dev0-py2.7.egg/easybuild/easyconfigs
== 2015-11-25 10:52:14,466 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at /home/caroline/Documents/GitHub/easybuild-framework/easybuild/easyconfigs
== 2015-11-25 10:52:14,466 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at /home/caroline/Documents/GitHub/easybuild-easyconfigs/easybuild/easyconfigs
== 2015-11-25 10:52:14,467 runpy.easyconfig.tools DEBUG Added /home/caroline/Documents/GitHub/easybuild-easyconfigs/easybuild/easyconfigs to list of paths for easybuild/easyconfigs
== 2015-11-25 10:52:14,467 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at /home/caroline/Documents/GitHub/vsc-base/easybuild/easyconfigs
== 2015-11-25 10:52:14,467 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at /usr/lib/python2.7/easybuild/easyconfigs
== 2015-11-25 10:52:14,467 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at /usr/lib/python2.7/plat-linux2/easybuild/easyconfigs
== 2015-11-25 10:52:14,467 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at /usr/lib/python2.7/lib-tk/easybuild/easyconfigs
== 2015-11-25 10:52:14,468 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at /usr/lib/python2.7/lib-old/easybuild/easyconfigs
== 2015-11-25 10:52:14,468 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at /usr/lib/python2.7/lib-dynload/easybuild/easyconfigs
== 2015-11-25 10:52:14,468 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at /home/caroline/.local/lib/python2.7/site-packages/easybuild/easyconfigs
== 2015-11-25 10:52:14,468 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at /usr/local/lib/python2.7/dist-packages/easybuild/easyconfigs
== 2015-11-25 10:52:14,469 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at /usr/lib/python2.7/dist-packages/easybuild/easyconfigs
== 2015-11-25 10:52:14,469 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at /usr/lib/python2.7/dist-packages/PIL/easybuild/easyconfigs
== 2015-11-25 10:52:14,469 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at /usr/lib/python2.7/dist-packages/gst-0.10/easybuild/easyconfigs
== 2015-11-25 10:52:14,469 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at /usr/lib/python2.7/dist-packages/gtk-2.0/easybuild/easyconfigs
== 2015-11-25 10:52:14,469 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at /usr/lib/pymodules/python2.7/easybuild/easyconfigs
== 2015-11-25 10:52:14,470 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at /usr/lib/python2.7/dist-packages/ubuntu-sso-client/easybuild/easyconfigs
== 2015-11-25 10:52:14,470 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at ../easybuild/easyconfigs
== 2015-11-25 10:52:14,470 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at /usr/lib/graphviz/python/easybuild/easyconfigs
== 2015-11-25 10:52:14,470 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at /usr/lib64/graphviz/python/easybuild/easyconfigs
== 2015-11-25 10:52:14,471 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at /home/caroline/Documents/GitHub/easybuild-framework/test/framework/sandbox/easybuild/easyconfigs
== 2015-11-25 10:52:14,471 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at /usr/local/easybuild/easyconfigs
== 2015-11-25 10:52:14,471 runpy.EB_toy INFO Found file toy-0.0.tar.gz at /home/caroline/Documents/GitHub/easybuild-framework/test/framework/sandbox/sources/toy/toy-0.0.tar.gz
== 2015-11-25 10:52:14,472 runpy.EB_toy DEBUG File /home/caroline/Documents/GitHub/easybuild-framework/test/framework/sandbox/sources/toy/toy-0.0.tar.gz found for source toy-0.0.tar.gz
== 2015-11-25 10:52:14,472 runpy.EB_toy INFO Added sources: [{'path': '/home/caroline/Documents/GitHub/easybuild-framework/test/framework/sandbox/sources/toy/toy-0.0.tar.gz', 'cmd': None, 'finalpath': '/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmp3eXq8n/toy/0.0/dummy-dummy', 'name': 'toy-0.0.tar.gz', 'checksum': ['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]}]
== 2015-11-25 10:52:14,472 runpy.filetools INFO Command eb found at /usr/local/bin/eb
== 2015-11-25 10:52:14,473 runpy.easyconfig.tools DEBUG Also considering installation prefix /usr/local...
== 2015-11-25 10:52:14,473 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmp3eXq8n/easybuild/easyconfigs
== 2015-11-25 10:52:14,473 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at test/framework/easybuild/easyconfigs
== 2015-11-25 10:52:14,473 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at /home/caroline/Documents/GitHub/easybuild-framework/test/framework/easyconfigs/easybuild/easyconfigs
== 2015-11-25 10:52:14,473 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at easybuild/easyconfigs
== 2015-11-25 10:52:14,474 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at /usr/local/lib/python2.7/dist-packages/python_graph_core-1.8.2-py2.7.egg/easybuild/easyconfigs
== 2015-11-25 10:52:14,474 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at /usr/local/lib/python2.7/dist-packages/python_graph_dot-1.8.2-py2.7.egg/easybuild/easyconfigs
== 2015-11-25 10:52:14,474 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at /usr/local/lib/python2.7/dist-packages/pydot-1.0.28-py2.7.egg/easybuild/easyconfigs
== 2015-11-25 10:52:14,474 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at /usr/local/lib/python2.7/dist-packages/pyparsing-2.0.3-py2.7.egg/easybuild/easyconfigs
== 2015-11-25 10:52:14,475 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at /usr/local/lib/python2.7/dist-packages/easybuild_framework-2.4.0.dev0-py2.7.egg/easybuild/easyconfigs
== 2015-11-25 10:52:14,475 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at /home/caroline/Documents/GitHub/easybuild-framework/easybuild/easyconfigs
== 2015-11-25 10:52:14,475 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at /home/caroline/Documents/GitHub/easybuild-easyconfigs/easybuild/easyconfigs
== 2015-11-25 10:52:14,475 runpy.easyconfig.tools DEBUG Added /home/caroline/Documents/GitHub/easybuild-easyconfigs/easybuild/easyconfigs to list of paths for easybuild/easyconfigs
== 2015-11-25 10:52:14,476 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at /home/caroline/Documents/GitHub/vsc-base/easybuild/easyconfigs
== 2015-11-25 10:52:14,476 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at /usr/lib/python2.7/easybuild/easyconfigs
== 2015-11-25 10:52:14,476 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at /usr/lib/python2.7/plat-linux2/easybuild/easyconfigs
== 2015-11-25 10:52:14,476 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at /usr/lib/python2.7/lib-tk/easybuild/easyconfigs
== 2015-11-25 10:52:14,476 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at /usr/lib/python2.7/lib-old/easybuild/easyconfigs
== 2015-11-25 10:52:14,477 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at /usr/lib/python2.7/lib-dynload/easybuild/easyconfigs
== 2015-11-25 10:52:14,477 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at /home/caroline/.local/lib/python2.7/site-packages/easybuild/easyconfigs
== 2015-11-25 10:52:14,477 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at /usr/local/lib/python2.7/dist-packages/easybuild/easyconfigs
== 2015-11-25 10:52:14,477 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at /usr/lib/python2.7/dist-packages/easybuild/easyconfigs
== 2015-11-25 10:52:14,478 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at /usr/lib/python2.7/dist-packages/PIL/easybuild/easyconfigs
== 2015-11-25 10:52:14,478 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at /usr/lib/python2.7/dist-packages/gst-0.10/easybuild/easyconfigs
== 2015-11-25 10:52:14,478 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at /usr/lib/python2.7/dist-packages/gtk-2.0/easybuild/easyconfigs
== 2015-11-25 10:52:14,478 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at /usr/lib/pymodules/python2.7/easybuild/easyconfigs
== 2015-11-25 10:52:14,478 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at /usr/lib/python2.7/dist-packages/ubuntu-sso-client/easybuild/easyconfigs
== 2015-11-25 10:52:14,479 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at ../easybuild/easyconfigs
== 2015-11-25 10:52:14,479 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at /usr/lib/graphviz/python/easybuild/easyconfigs
== 2015-11-25 10:52:14,479 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at /usr/lib64/graphviz/python/easybuild/easyconfigs
== 2015-11-25 10:52:14,479 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at /home/caroline/Documents/GitHub/easybuild-framework/test/framework/sandbox/easybuild/easyconfigs
== 2015-11-25 10:52:14,480 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at /usr/local/easybuild/easyconfigs
== 2015-11-25 10:52:14,480 runpy.EB_toy INFO Found file toy-0.0_typo.patch at /home/caroline/Documents/GitHub/easybuild-framework/test/framework/sandbox/sources/toy/toy-0.0_typo.patch
== 2015-11-25 10:52:14,480 runpy.EB_toy DEBUG File /home/caroline/Documents/GitHub/easybuild-framework/test/framework/sandbox/sources/toy/toy-0.0_typo.patch found for patch toy-0.0_typo.patch
== 2015-11-25 10:52:14,481 runpy.filetools INFO Command eb found at /usr/local/bin/eb
== 2015-11-25 10:52:14,481 runpy.easyconfig.tools DEBUG Also considering installation prefix /usr/local...
== 2015-11-25 10:52:14,481 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmp3eXq8n/easybuild/easyconfigs
== 2015-11-25 10:52:14,481 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at test/framework/easybuild/easyconfigs
== 2015-11-25 10:52:14,481 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at /home/caroline/Documents/GitHub/easybuild-framework/test/framework/easyconfigs/easybuild/easyconfigs
== 2015-11-25 10:52:14,482 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at easybuild/easyconfigs
== 2015-11-25 10:52:14,482 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at /usr/local/lib/python2.7/dist-packages/python_graph_core-1.8.2-py2.7.egg/easybuild/easyconfigs
== 2015-11-25 10:52:14,482 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at /usr/local/lib/python2.7/dist-packages/python_graph_dot-1.8.2-py2.7.egg/easybuild/easyconfigs
== 2015-11-25 10:52:14,482 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at /usr/local/lib/python2.7/dist-packages/pydot-1.0.28-py2.7.egg/easybuild/easyconfigs
== 2015-11-25 10:52:14,483 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at /usr/local/lib/python2.7/dist-packages/pyparsing-2.0.3-py2.7.egg/easybuild/easyconfigs
== 2015-11-25 10:52:14,483 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at /usr/local/lib/python2.7/dist-packages/easybuild_framework-2.4.0.dev0-py2.7.egg/easybuild/easyconfigs
== 2015-11-25 10:52:14,483 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at /home/caroline/Documents/GitHub/easybuild-framework/easybuild/easyconfigs
== 2015-11-25 10:52:14,483 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at /home/caroline/Documents/GitHub/easybuild-easyconfigs/easybuild/easyconfigs
== 2015-11-25 10:52:14,484 runpy.easyconfig.tools DEBUG Added /home/caroline/Documents/GitHub/easybuild-easyconfigs/easybuild/easyconfigs to list of paths for easybuild/easyconfigs
== 2015-11-25 10:52:14,484 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at /home/caroline/Documents/GitHub/vsc-base/easybuild/easyconfigs
== 2015-11-25 10:52:14,484 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at /usr/lib/python2.7/easybuild/easyconfigs
== 2015-11-25 10:52:14,484 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at /usr/lib/python2.7/plat-linux2/easybuild/easyconfigs
== 2015-11-25 10:52:14,484 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at /usr/lib/python2.7/lib-tk/easybuild/easyconfigs
== 2015-11-25 10:52:14,485 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at /usr/lib/python2.7/lib-old/easybuild/easyconfigs
== 2015-11-25 10:52:14,485 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at /usr/lib/python2.7/lib-dynload/easybuild/easyconfigs
== 2015-11-25 10:52:14,485 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at /home/caroline/.local/lib/python2.7/site-packages/easybuild/easyconfigs
== 2015-11-25 10:52:14,485 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at /usr/local/lib/python2.7/dist-packages/easybuild/easyconfigs
== 2015-11-25 10:52:14,486 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at /usr/lib/python2.7/dist-packages/easybuild/easyconfigs
== 2015-11-25 10:52:14,486 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at /usr/lib/python2.7/dist-packages/PIL/easybuild/easyconfigs
== 2015-11-25 10:52:14,486 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at /usr/lib/python2.7/dist-packages/gst-0.10/easybuild/easyconfigs
== 2015-11-25 10:52:14,486 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at /usr/lib/python2.7/dist-packages/gtk-2.0/easybuild/easyconfigs
== 2015-11-25 10:52:14,487 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at /usr/lib/pymodules/python2.7/easybuild/easyconfigs
== 2015-11-25 10:52:14,487 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at /usr/lib/python2.7/dist-packages/ubuntu-sso-client/easybuild/easyconfigs
== 2015-11-25 10:52:14,487 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at ../easybuild/easyconfigs
== 2015-11-25 10:52:14,487 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at /usr/lib/graphviz/python/easybuild/easyconfigs
== 2015-11-25 10:52:14,487 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at /usr/lib64/graphviz/python/easybuild/easyconfigs
== 2015-11-25 10:52:14,488 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at /home/caroline/Documents/GitHub/easybuild-framework/test/framework/sandbox/easybuild/easyconfigs
== 2015-11-25 10:52:14,488 runpy.easyconfig.tools DEBUG Checking for easybuild/easyconfigs at /usr/local/easybuild/easyconfigs
== 2015-11-25 10:52:14,488 runpy.EB_toy INFO Found file toy-extra.txt at /home/caroline/Documents/GitHub/easybuild-framework/test/framework/sandbox/sources/toy/toy-extra.txt
== 2015-11-25 10:52:14,489 runpy.EB_toy DEBUG File /home/caroline/Documents/GitHub/easybuild-framework/test/framework/sandbox/sources/toy/toy-extra.txt found for patch ('toy-extra.txt', 'toy-0.0')
== 2015-11-25 10:52:14,489 runpy.EB_toy INFO Added patches: [{'path': '/home/caroline/Documents/GitHub/easybuild-framework/test/framework/sandbox/sources/toy/toy-0.0_typo.patch', 'name': 'toy-0.0_typo.patch', 'checksum': None}, {'path': '/home/caroline/Documents/GitHub/easybuild-framework/test/framework/sandbox/sources/toy/toy-extra.txt', 'copy': 'toy-0.0', 'name': 'toy-extra.txt', 'checksum': None}]
== 2015-11-25 10:52:14,489 runpy.filetools DEBUG Using blocksize 16777216 for calculating the checksum
== 2015-11-25 10:52:14,489 runpy.EB_toy INFO md5 checksum for /home/caroline/Documents/GitHub/easybuild-framework/test/framework/sandbox/sources/toy/toy-0.0.tar.gz: be662daa971a640e40be5c804d9d7d10
== 2015-11-25 10:52:14,490 runpy.filetools DEBUG Using blocksize 16777216 for calculating the checksum
== 2015-11-25 10:52:14,490 runpy.EB_toy INFO md5 checksum for /home/caroline/Documents/GitHub/easybuild-framework/test/framework/sandbox/sources/toy/toy-0.0_typo.patch: e6785e1a721fc8bf79892e3ef41557c0
== 2015-11-25 10:52:14,490 runpy.filetools DEBUG Using blocksize 16777216 for calculating the checksum
== 2015-11-25 10:52:14,490 runpy.EB_toy INFO md5 checksum for /home/caroline/Documents/GitHub/easybuild-framework/test/framework/sandbox/sources/toy/toy-extra.txt: 3b0787b3bf36603ae1398c4a49097893
== 2015-11-25 10:52:14,491 runpy.config DEBUG modules install path as specified by 'installpath' and 'subdir_modules': /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules
== 2015-11-25 10:52:14,491 runpy.EB_toy INFO Checking dirs that need to be created: ['/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/software/toy/0.0', '/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules/all/toy', '/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules/tools/toy']
== 2015-11-25 10:52:14,491 runpy.filetools INFO Creating directory /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/software/toy/0.0 (parents: True, set_gid: False, sticky: False)
== 2015-11-25 10:52:14,492 runpy.filetools INFO Creating directory /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules/all/toy (parents: True, set_gid: False, sticky: False)
== 2015-11-25 10:52:14,492 runpy.filetools INFO Creating directory /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules/tools/toy (parents: True, set_gid: False, sticky: False)
== 2015-11-25 10:52:14,493 runpy.easyconfig.templates DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': [None, 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [None, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [[], "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2015-11-25 10:52:14,495 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,495 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,495 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,495 runpy.easyconfig.templates DEBUG name: name, config: toy
== 2015-11-25 10:52:14,495 runpy.easyconfig.templates DEBUG name: version, config: 0.0
== 2015-11-25 10:52:14,496 runpy.easyconfig.templates DEBUG name: versionsuffix, config: 
== 2015-11-25 10:52:14,496 runpy.easyconfig.templates DEBUG name: versionprefix, config: 
== 2015-11-25 10:52:14,497 runpy.easyconfig.templates DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': [None, 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [None, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [[], "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2015-11-25 10:52:14,498 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,499 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,499 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,499 runpy.easyconfig.templates DEBUG name: name, config: toy
== 2015-11-25 10:52:14,499 runpy.easyconfig.templates DEBUG name: version, config: 0.0
== 2015-11-25 10:52:14,500 runpy.easyconfig.templates DEBUG name: versionsuffix, config: 
== 2015-11-25 10:52:14,500 runpy.easyconfig.templates DEBUG name: versionprefix, config: 
== 2015-11-25 10:52:14,500 runpy.EB_toy INFO Running ready_check_readiness_step step
== 2015-11-25 10:52:14,500 runpy.EB_toy DEBUG Desired parallelism specified via 'parallel' build option: None
== 2015-11-25 10:52:14,502 runpy.affinity DEBUG sched_getaffinity for pid 31509 returned cpuset 0-3
== 2015-11-25 10:52:14,502 runpy.run DEBUG run_cmd: running cmd ulimit -u (in /home/caroline/Documents/GitHub/easybuild-framework)
== 2015-11-25 10:52:14,508 runpy.run DEBUG cmd "ulimit -u" exited with exitcode 0 and output:
30374

== 2015-11-25 10:52:14,509 runpy.run DEBUG Using default regular expression: (?<![(,-]|\w)(?:error|segmentation fault|failed)(?![(,-]|\.?\w)
== 2015-11-25 10:52:14,509 runpy.EB_toy INFO Setting parallelism: 4
== 2015-11-25 10:52:14,510 runpy.EnvironmentModulesC DEBUG Current MODULEPATH: /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules/all:/home/caroline/Documents/GitHub/easybuild-framework/test/framework/modules
== 2015-11-25 10:52:14,510 runpy.EnvironmentModulesC DEBUG Changing LD_LIBRARY_PATH from '' to '' in environment for module command
== 2015-11-25 10:52:14,510 runpy.EnvironmentModulesC DEBUG Changing LD_PRELOAD from '' to '' in environment for module command
== 2015-11-25 10:52:14,510 runpy.EnvironmentModulesC DEBUG Running module command '/usr/bin/modulecmd python --terse list' from /home/caroline/Documents/GitHub/easybuild-framework
== 2015-11-25 10:52:14,524 runpy.EnvironmentModulesC DEBUG Output of module command '/usr/bin/modulecmd python --terse list': stdout: ; stderr: No Modulefiles Currently Loaded.

== 2015-11-25 10:52:14,525 runpy.EnvironmentModulesC DEBUG Correcting paths in $LD_LIBRARY_PATH from [''] to []
== 2015-11-25 10:52:14,526 runpy.EnvironmentModulesC DEBUG Correcting paths in $LD_PRELOAD from [''] to []
== 2015-11-25 10:52:14,526 runpy.EasyConfig DEBUG Dependencies BEFORE filtering: []
== 2015-11-25 10:52:14,527 runpy.Dummy DEBUG add_dependencies: adding toolchain dependencies []
== 2015-11-25 10:52:14,527 runpy.EnvironmentModulesC DEBUG Current MODULEPATH: /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules/all:/home/caroline/Documents/GitHub/easybuild-framework/test/framework/modules
== 2015-11-25 10:52:14,528 runpy.EnvironmentModulesC DEBUG Changing LD_LIBRARY_PATH from '' to '' in environment for module command
== 2015-11-25 10:52:14,529 runpy.EnvironmentModulesC DEBUG Changing LD_PRELOAD from '' to '' in environment for module command
== 2015-11-25 10:52:14,529 runpy.EnvironmentModulesC DEBUG Running module command '/usr/bin/modulecmd python --terse avail ' from /home/caroline/Documents/GitHub/easybuild-framework
== 2015-11-25 10:52:14,553 runpy.EnvironmentModulesC DEBUG Output of module command '/usr/bin/modulecmd python --terse avail ': stdout: ; stderr: /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules/all:
/home/caroline/Documents/GitHub/easybuild-framework/test/framework/modules:
ATLAS/3.8.4-gompi-1.1.0-no-OFED-LAPACK-3.4.0
BLACS/1.1-gompi-1.1.0-no-OFED
CUDA/5.0.35-1
CategorizedHMNS/Compiler/GCC/4.7.2/mpi/OpenMPI/1.6.4
CategorizedHMNS/Compiler/GCC/4.7.2/system/hwloc/1.6.2
CategorizedHMNS/Core/compiler/GCC/4.7.2
CategorizedHMNS/Core/toolchain/gompi/1.4.10
CategorizedHMNS/Core/toolchain/goolf/1.4.10
CategorizedHMNS/MPI/GCC/4.7.2/OpenMPI/1.6.4/numlib/FFTW/3.3.3
CategorizedHMNS/MPI/GCC/4.7.2/OpenMPI/1.6.4/numlib/OpenBLAS/0.2.6-LAPACK-3.4.2
CategorizedHMNS/MPI/GCC/4.7.2/OpenMPI/1.6.4/numlib/ScaLAPACK/2.0.2-OpenBLAS-0.2.6-LAPACK-3.4.2
Clang/3.2-GCC-4.7.2
ClangGCC/1.1.2
Compiler/GCC/4.7.2/OpenMPI/1.6.4
Compiler/GCC/4.7.2/hwloc/1.6.2
Compiler/intel/2013.5.192-GCC-4.8.3/impi/4.1.3.049
Core/GCC/4.7.2
Core/GCC/4.8.3
Core/gompi/1.4.10
Core/goolf/1.4.10
Core/icc/2013.5.192-GCC-4.8.3
Core/iccifort/2013.5.192-GCC-4.8.3
Core/ifort/2013.5.192-GCC-4.8.3
Core/iimpi/5.5.3-GCC-4.8.3
FFTW/3.3.1-gompi-1.1.0-no-OFED
FFTW/3.3.3-cgompi-1.1.6
FFTW/3.3.3-gompi-1.3.12
GCC/4.6.3
GCC/4.6.4(default)
GCC/4.7.2
LAPACK/3.4.0-gompi-1.1.0-no-OFED
MPI/GCC/4.7.2/OpenMPI/1.6.4/FFTW/3.3.3
MPI/GCC/4.7.2/OpenMPI/1.6.4/OpenBLAS/0.2.6-LAPACK-3.4.2
MPI/GCC/4.7.2/OpenMPI/1.6.4/ScaLAPACK/2.0.2-OpenBLAS-0.2.6-LAPACK-3.4.2
OpenBLAS/0.2.6-cgompi-1.1.6-LAPACK-3.4.2
OpenBLAS/0.2.6-gompi-1.3.12-LAPACK-3.4.2
OpenMPI/1.4.5-GCC-4.6.3-no-OFED
OpenMPI/1.6.4-ClangGCC-1.1.2
OpenMPI/1.6.4-GCC-4.6.4
ScaLAPACK/1.8.0-gompi-1.1.0-no-OFED-ATLAS-3.8.4-LAPACK-3.4.0-BLACS-1.1
ScaLAPACK/2.0.2-cgompi-1.1.6-OpenBLAS-0.2.6-LAPACK-3.4.2
ScaLAPACK/2.0.2-gompi-1.3.12-OpenBLAS-0.2.6-LAPACK-3.4.2
cgompi/1.1.6
cgoolf/1.1.6
goalf/1.1.0-no-OFED
goalf/1.1.0-no-OFED-brokenBLACS
goalf/1.1.0-no-OFED-brokenFFTW
gompi/1.1.0-no-OFED
gompi/1.3.12
goolfc/1.3.12
hwloc/1.6.2-ClangGCC-1.1.2
hwloc/1.6.2-GCC-4.6.4
icc/11.1.073
icc/2011.13.367
ictce/3.2.2.u3
ictce/4.1.13
ifort/11.1.073
ifort/2011.13.367
imkl/10.2.6.038
imkl/10.3.12.361
impi/4.0.0.028
impi/4.1.0.027
toy/0.0

== 2015-11-25 10:52:14,554 runpy.EnvironmentModulesC DEBUG Correcting paths in $LD_LIBRARY_PATH from [''] to []
== 2015-11-25 10:52:14,555 runpy.EnvironmentModulesC DEBUG Correcting paths in $LD_PRELOAD from [''] to []
== 2015-11-25 10:52:14,558 runpy.EnvironmentModulesC DEBUG 'module available ' gave 63 answers: ['ATLAS/3.8.4-gompi-1.1.0-no-OFED-LAPACK-3.4.0', 'BLACS/1.1-gompi-1.1.0-no-OFED', 'CUDA/5.0.35-1', 'CategorizedHMNS/Compiler/GCC/4.7.2/mpi/OpenMPI/1.6.4', 'CategorizedHMNS/Compiler/GCC/4.7.2/system/hwloc/1.6.2', 'CategorizedHMNS/Core/compiler/GCC/4.7.2', 'CategorizedHMNS/Core/toolchain/gompi/1.4.10', 'CategorizedHMNS/Core/toolchain/goolf/1.4.10', 'CategorizedHMNS/MPI/GCC/4.7.2/OpenMPI/1.6.4/numlib/FFTW/3.3.3', 'CategorizedHMNS/MPI/GCC/4.7.2/OpenMPI/1.6.4/numlib/OpenBLAS/0.2.6-LAPACK-3.4.2', 'CategorizedHMNS/MPI/GCC/4.7.2/OpenMPI/1.6.4/numlib/ScaLAPACK/2.0.2-OpenBLAS-0.2.6-LAPACK-3.4.2', 'Clang/3.2-GCC-4.7.2', 'ClangGCC/1.1.2', 'Compiler/GCC/4.7.2/OpenMPI/1.6.4', 'Compiler/GCC/4.7.2/hwloc/1.6.2', 'Compiler/intel/2013.5.192-GCC-4.8.3/impi/4.1.3.049', 'Core/GCC/4.7.2', 'Core/GCC/4.8.3', 'Core/gompi/1.4.10', 'Core/goolf/1.4.10', 'Core/icc/2013.5.192-GCC-4.8.3', 'Core/iccifort/2013.5.192-GCC-4.8.3', 'Core/ifort/2013.5.192-GCC-4.8.3', 'Core/iimpi/5.5.3-GCC-4.8.3', 'FFTW/3.3.1-gompi-1.1.0-no-OFED', 'FFTW/3.3.3-cgompi-1.1.6', 'FFTW/3.3.3-gompi-1.3.12', 'GCC/4.6.3', 'GCC/4.6.4', 'GCC/4.7.2', 'LAPACK/3.4.0-gompi-1.1.0-no-OFED', 'MPI/GCC/4.7.2/OpenMPI/1.6.4/FFTW/3.3.3', 'MPI/GCC/4.7.2/OpenMPI/1.6.4/OpenBLAS/0.2.6-LAPACK-3.4.2', 'MPI/GCC/4.7.2/OpenMPI/1.6.4/ScaLAPACK/2.0.2-OpenBLAS-0.2.6-LAPACK-3.4.2', 'OpenBLAS/0.2.6-cgompi-1.1.6-LAPACK-3.4.2', 'OpenBLAS/0.2.6-gompi-1.3.12-LAPACK-3.4.2', 'OpenMPI/1.4.5-GCC-4.6.3-no-OFED', 'OpenMPI/1.6.4-ClangGCC-1.1.2', 'OpenMPI/1.6.4-GCC-4.6.4', 'ScaLAPACK/1.8.0-gompi-1.1.0-no-OFED-ATLAS-3.8.4-LAPACK-3.4.0-BLACS-1.1', 'ScaLAPACK/2.0.2-cgompi-1.1.6-OpenBLAS-0.2.6-LAPACK-3.4.2', 'ScaLAPACK/2.0.2-gompi-1.3.12-OpenBLAS-0.2.6-LAPACK-3.4.2', 'cgompi/1.1.6', 'cgoolf/1.1.6', 'goalf/1.1.0-no-OFED', 'goalf/1.1.0-no-OFED-brokenBLACS', 'goalf/1.1.0-no-OFED-brokenFFTW', 'gompi/1.1.0-no-OFED', 'gompi/1.3.12', 'goolfc/1.3.12', 'hwloc/1.6.2-ClangGCC-1.1.2', 'hwloc/1.6.2-GCC-4.6.4', 'icc/11.1.073', 'icc/2011.13.367', 'ictce/3.2.2.u3', 'ictce/4.1.13', 'ifort/11.1.073', 'ifort/2011.13.367', 'imkl/10.2.6.038', 'imkl/10.3.12.361', 'impi/4.0.0.028', 'impi/4.1.0.027', 'toy/0.0']
== 2015-11-25 10:52:14,558 runpy.EasyConfig DEBUG Dependencies BEFORE filtering: []
== 2015-11-25 10:52:14,561 runpy.easyconfig.templates DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': [None, 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [4, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [[], "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2015-11-25 10:52:14,565 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,565 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,566 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,567 runpy.easyconfig.templates DEBUG name: name, config: toy
== 2015-11-25 10:52:14,567 runpy.easyconfig.templates DEBUG name: version, config: 0.0
== 2015-11-25 10:52:14,567 runpy.easyconfig.templates DEBUG name: versionsuffix, config: 
== 2015-11-25 10:52:14,568 runpy.easyconfig.templates DEBUG name: versionprefix, config: 
== 2015-11-25 10:52:14,570 runpy.easyconfig.templates DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': [None, 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [4, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [[], "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2015-11-25 10:52:14,574 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,575 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,575 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,576 runpy.easyconfig.templates DEBUG name: name, config: toy
== 2015-11-25 10:52:14,576 runpy.easyconfig.templates DEBUG name: version, config: 0.0
== 2015-11-25 10:52:14,576 runpy.easyconfig.templates DEBUG name: versionsuffix, config: 
== 2015-11-25 10:52:14,577 runpy.easyconfig.templates DEBUG name: versionprefix, config: 
== 2015-11-25 10:52:14,577 runpy.EB_toy INFO Running ready_make_builddir step
== 2015-11-25 10:52:14,578 runpy.EB_toy DEBUG Creating the build directory /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmp3eXq8n/toy/0.0/dummy-dummy (cleanup: True)
== 2015-11-25 10:52:14,578 runpy.filetools INFO Creating directory /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmp3eXq8n/toy/0.0/dummy-dummy (parents: True, set_gid: False, sticky: False)
== 2015-11-25 10:52:14,579 runpy.easyconfig.templates DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': [None, 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [4, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [[], "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2015-11-25 10:52:14,581 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,581 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,581 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,582 runpy.easyconfig.templates DEBUG name: name, config: toy
== 2015-11-25 10:52:14,582 runpy.easyconfig.templates DEBUG name: version, config: 0.0
== 2015-11-25 10:52:14,582 runpy.easyconfig.templates DEBUG name: versionsuffix, config: 
== 2015-11-25 10:52:14,582 runpy.easyconfig.templates DEBUG name: versionprefix, config: 
== 2015-11-25 10:52:14,583 runpy.easyconfig.templates DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': [None, 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [4, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [[], "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2015-11-25 10:52:14,585 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,585 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,585 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,585 runpy.easyconfig.templates DEBUG name: name, config: toy
== 2015-11-25 10:52:14,586 runpy.easyconfig.templates DEBUG name: version, config: 0.0
== 2015-11-25 10:52:14,586 runpy.easyconfig.templates DEBUG name: versionsuffix, config: 
== 2015-11-25 10:52:14,586 runpy.easyconfig.templates DEBUG name: versionprefix, config: 
== 2015-11-25 10:52:14,586 runpy.EB_toy INFO Running ready_reset_changes step
== 2015-11-25 10:52:14,587 runpy.easyconfig.templates DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': [None, 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [4, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [[], "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2015-11-25 10:52:14,589 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,589 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,589 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,590 runpy.easyconfig.templates DEBUG name: name, config: toy
== 2015-11-25 10:52:14,590 runpy.easyconfig.templates DEBUG name: version, config: 0.0
== 2015-11-25 10:52:14,590 runpy.easyconfig.templates DEBUG name: versionsuffix, config: 
== 2015-11-25 10:52:14,590 runpy.easyconfig.templates DEBUG name: versionprefix, config: 
== 2015-11-25 10:52:14,591 runpy.easyconfig.templates DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': [None, 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [4, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [[], "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2015-11-25 10:52:14,593 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,593 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,593 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,593 runpy.easyconfig.templates DEBUG name: name, config: toy
== 2015-11-25 10:52:14,594 runpy.easyconfig.templates DEBUG name: version, config: 0.0
== 2015-11-25 10:52:14,594 runpy.easyconfig.templates DEBUG name: versionsuffix, config: 
== 2015-11-25 10:52:14,594 runpy.easyconfig.templates DEBUG name: versionprefix, config: 
== 2015-11-25 10:52:14,594 runpy.EB_toy INFO Running ready_handle_iterate_opts step
== 2015-11-25 10:52:14,595 runpy.easyconfig.templates DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': [None, 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [4, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [[], "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2015-11-25 10:52:14,597 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,597 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,597 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,598 runpy.easyconfig.templates DEBUG name: name, config: toy
== 2015-11-25 10:52:14,598 runpy.easyconfig.templates DEBUG name: version, config: 0.0
== 2015-11-25 10:52:14,598 runpy.easyconfig.templates DEBUG name: versionsuffix, config: 
== 2015-11-25 10:52:14,598 runpy.easyconfig.templates DEBUG name: versionprefix, config: 
== 2015-11-25 10:52:14,599 runpy.easyconfig.templates DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': [None, 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [4, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [[], "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2015-11-25 10:52:14,601 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,601 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,601 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,601 runpy.easyconfig.templates DEBUG name: name, config: toy
== 2015-11-25 10:52:14,602 runpy.easyconfig.templates DEBUG name: version, config: 0.0
== 2015-11-25 10:52:14,602 runpy.easyconfig.templates DEBUG name: versionsuffix, config: 
== 2015-11-25 10:52:14,602 runpy.easyconfig.templates DEBUG name: versionprefix, config: 
== 2015-11-25 10:52:14,602 runpy.EB_toy INFO Running source_checksum_step step
== 2015-11-25 10:52:14,602 runpy.filetools DEBUG Using blocksize 16777216 for calculating the checksum
== 2015-11-25 10:52:14,603 runpy.filetools DEBUG Computed md5 checksum for /home/caroline/Documents/GitHub/easybuild-framework/test/framework/sandbox/sources/toy/toy-0.0.tar.gz: be662daa971a640e40be5c804d9d7d10 (correct checksum: be662daa971a640e40be5c804d9d7d10)
== 2015-11-25 10:52:14,603 runpy.filetools DEBUG Using blocksize 16777216 for calculating the checksum
== 2015-11-25 10:52:14,603 runpy.filetools DEBUG Computed adler32 checksum for /home/caroline/Documents/GitHub/easybuild-framework/test/framework/sandbox/sources/toy/toy-0.0.tar.gz: 0x998410035 (correct checksum: 0x998410035)
== 2015-11-25 10:52:14,604 runpy.filetools DEBUG Using blocksize 16777216 for calculating the checksum
== 2015-11-25 10:52:14,604 runpy.filetools DEBUG Computed crc32 checksum for /home/caroline/Documents/GitHub/easybuild-framework/test/framework/sandbox/sources/toy/toy-0.0.tar.gz: 0x1553842328 (correct checksum: 0x1553842328)
== 2015-11-25 10:52:14,604 runpy.filetools DEBUG Using blocksize 16777216 for calculating the checksum
== 2015-11-25 10:52:14,604 runpy.filetools DEBUG Computed md5 checksum for /home/caroline/Documents/GitHub/easybuild-framework/test/framework/sandbox/sources/toy/toy-0.0.tar.gz: be662daa971a640e40be5c804d9d7d10 (correct checksum: be662daa971a640e40be5c804d9d7d10)
== 2015-11-25 10:52:14,604 runpy.filetools DEBUG Using blocksize 16777216 for calculating the checksum
== 2015-11-25 10:52:14,605 runpy.filetools DEBUG Computed sha1 checksum for /home/caroline/Documents/GitHub/easybuild-framework/test/framework/sandbox/sources/toy/toy-0.0.tar.gz: f618096c52244539d0e89867405f573fdb0b55b0 (correct checksum: f618096c52244539d0e89867405f573fdb0b55b0)
== 2015-11-25 10:52:14,605 runpy.filetools DEBUG Computed size checksum for /home/caroline/Documents/GitHub/easybuild-framework/test/framework/sandbox/sources/toy/toy-0.0.tar.gz: 273 (correct checksum: 273)
== 2015-11-25 10:52:14,605 runpy.EB_toy INFO Checksum verification for /home/caroline/Documents/GitHub/easybuild-framework/test/framework/sandbox/sources/toy/toy-0.0.tar.gz using ['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)] passed.
== 2015-11-25 10:52:14,605 runpy.EB_toy INFO Checksum verification for /home/caroline/Documents/GitHub/easybuild-framework/test/framework/sandbox/sources/toy/toy-0.0_typo.patch using None passed.
== 2015-11-25 10:52:14,606 runpy.EB_toy INFO Checksum verification for /home/caroline/Documents/GitHub/easybuild-framework/test/framework/sandbox/sources/toy/toy-extra.txt using None passed.
== 2015-11-25 10:52:14,606 runpy.easyconfig.templates DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': [None, 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [4, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [[], "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2015-11-25 10:52:14,608 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,608 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,609 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,609 runpy.easyconfig.templates DEBUG name: name, config: toy
== 2015-11-25 10:52:14,609 runpy.easyconfig.templates DEBUG name: version, config: 0.0
== 2015-11-25 10:52:14,609 runpy.easyconfig.templates DEBUG name: versionsuffix, config: 
== 2015-11-25 10:52:14,610 runpy.easyconfig.templates DEBUG name: versionprefix, config: 
== 2015-11-25 10:52:14,610 runpy.easyconfig.templates DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': [None, 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [4, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [[], "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2015-11-25 10:52:14,612 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,612 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,613 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,613 runpy.easyconfig.templates DEBUG name: name, config: toy
== 2015-11-25 10:52:14,613 runpy.easyconfig.templates DEBUG name: version, config: 0.0
== 2015-11-25 10:52:14,613 runpy.easyconfig.templates DEBUG name: versionsuffix, config: 
== 2015-11-25 10:52:14,613 runpy.easyconfig.templates DEBUG name: versionprefix, config: 
== 2015-11-25 10:52:14,614 runpy.EB_toy INFO Running source_extract_step step
== 2015-11-25 10:52:14,614 runpy.EB_toy INFO Unpacking source toy-0.0.tar.gz
== 2015-11-25 10:52:14,614 runpy.filetools DEBUG Not creating existing path /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmp3eXq8n/toy/0.0/dummy-dummy
== 2015-11-25 10:52:14,614 runpy.filetools DEBUG Unpacking /home/caroline/Documents/GitHub/easybuild-framework/test/framework/sandbox/sources/toy/toy-0.0.tar.gz in directory /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmp3eXq8n/toy/0.0/dummy-dummy.
== 2015-11-25 10:52:14,615 runpy.run DEBUG run_cmd: running cmd tar xzf /home/caroline/Documents/GitHub/easybuild-framework/test/framework/sandbox/sources/toy/toy-0.0.tar.gz (in /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmp3eXq8n/toy/0.0/dummy-dummy)
== 2015-11-25 10:52:14,624 runpy.run DEBUG cmd "tar xzf /home/caroline/Documents/GitHub/easybuild-framework/test/framework/sandbox/sources/toy/toy-0.0.tar.gz" exited with exitcode 0 and output:

== 2015-11-25 10:52:14,625 runpy.run DEBUG Using default regular expression: (?<![(,-]|\w)(?:error|segmentation fault|failed)(?![(,-]|\.?\w)
== 2015-11-25 10:52:14,626 runpy.filetools DEBUG Last dir list ['toy.source']
== 2015-11-25 10:52:14,627 runpy.filetools DEBUG Possible new dir /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmp3eXq8n/toy/0.0/dummy-dummy/toy-0.0 found
== 2015-11-25 10:52:14,629 runpy.easyconfig.templates DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': [None, 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [4, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [[], "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2015-11-25 10:52:14,634 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,634 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,635 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,635 runpy.easyconfig.templates DEBUG name: name, config: toy
== 2015-11-25 10:52:14,636 runpy.easyconfig.templates DEBUG name: version, config: 0.0
== 2015-11-25 10:52:14,636 runpy.easyconfig.templates DEBUG name: versionsuffix, config: 
== 2015-11-25 10:52:14,637 runpy.easyconfig.templates DEBUG name: versionprefix, config: 
== 2015-11-25 10:52:14,639 runpy.easyconfig.templates DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': [None, 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [4, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [[], "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2015-11-25 10:52:14,643 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,643 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,644 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,644 runpy.easyconfig.templates DEBUG name: name, config: toy
== 2015-11-25 10:52:14,645 runpy.easyconfig.templates DEBUG name: version, config: 0.0
== 2015-11-25 10:52:14,645 runpy.easyconfig.templates DEBUG name: versionsuffix, config: 
== 2015-11-25 10:52:14,646 runpy.easyconfig.templates DEBUG name: versionprefix, config: 
== 2015-11-25 10:52:14,646 runpy.EB_toy INFO Running patch_patch_step step
== 2015-11-25 10:52:14,646 runpy.EB_toy INFO Applying patch toy-0.0_typo.patch
== 2015-11-25 10:52:14,647 runpy.EB_toy DEBUG Source index: 0; patch level: None; source path suffix: ; copy patch: <module 'copy' from '/usr/lib/python2.7/copy.pyc'>
== 2015-11-25 10:52:14,647 runpy.EB_toy DEBUG Determine begin path for patch toy-0.0_typo.patch: /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmp3eXq8n/toy/0.0/dummy-dummy/toy-0.0
== 2015-11-25 10:52:14,647 runpy.EB_toy DEBUG Applying patch {'path': '/home/caroline/Documents/GitHub/easybuild-framework/test/framework/sandbox/sources/toy/toy-0.0_typo.patch', 'md5': 'e6785e1a721fc8bf79892e3ef41557c0', 'name': 'toy-0.0_typo.patch', 'checksum': None} in path /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmp3eXq8n/toy/0.0/dummy-dummy/toy-0.0
== 2015-11-25 10:52:14,648 runpy.filetools DEBUG Guessed patch level 2 for patch /home/caroline/Documents/GitHub/easybuild-framework/test/framework/sandbox/sources/toy/toy-0.0_typo.patch
== 2015-11-25 10:52:14,648 runpy.run DEBUG run_cmd: running cmd patch -b -p2 -i /home/caroline/Documents/GitHub/easybuild-framework/test/framework/sandbox/sources/toy/toy-0.0_typo.patch (in /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmp3eXq8n/toy/0.0/dummy-dummy/toy-0.0)
== 2015-11-25 10:52:14,655 runpy.run DEBUG cmd "patch -b -p2 -i /home/caroline/Documents/GitHub/easybuild-framework/test/framework/sandbox/sources/toy/toy-0.0_typo.patch" exited with exitcode 0 and output:
patching file toy.source
Hunk #1 succeeded at 2 with fuzz 2.

== 2015-11-25 10:52:14,656 runpy.run DEBUG Using default regular expression: (?<![(,-]|\w)(?:error|segmentation fault|failed)(?![(,-]|\.?\w)
== 2015-11-25 10:52:14,657 runpy.EB_toy INFO Applying patch toy-extra.txt
== 2015-11-25 10:52:14,657 runpy.EB_toy DEBUG Source index: 0; patch level: None; source path suffix: toy-0.0; copy patch: <module 'copy' from '/usr/lib/python2.7/copy.pyc'>
== 2015-11-25 10:52:14,658 runpy.EB_toy DEBUG Using specified begin path for patch toy-extra.txt: /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmp3eXq8n/toy/0.0/dummy-dummy/toy-0.0
== 2015-11-25 10:52:14,658 runpy.EB_toy DEBUG Applying patch {'path': '/home/caroline/Documents/GitHub/easybuild-framework/test/framework/sandbox/sources/toy/toy-extra.txt', 'copy': 'toy-0.0', 'name': 'toy-extra.txt', 'md5': '3b0787b3bf36603ae1398c4a49097893', 'checksum': None} in path /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmp3eXq8n/toy/0.0/dummy-dummy/toy-0.0
== 2015-11-25 10:52:14,659 runpy.filetools DEBUG Copied patch /home/caroline/Documents/GitHub/easybuild-framework/test/framework/sandbox/sources/toy/toy-extra.txt to dir /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmp3eXq8n/toy/0.0/dummy-dummy/toy-0.0
== 2015-11-25 10:52:14,662 runpy.easyconfig.templates DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': [None, 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [4, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [[], "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2015-11-25 10:52:14,666 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,667 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,667 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,668 runpy.easyconfig.templates DEBUG name: name, config: toy
== 2015-11-25 10:52:14,668 runpy.easyconfig.templates DEBUG name: version, config: 0.0
== 2015-11-25 10:52:14,669 runpy.easyconfig.templates DEBUG name: versionsuffix, config: 
== 2015-11-25 10:52:14,669 runpy.easyconfig.templates DEBUG name: versionprefix, config: 
== 2015-11-25 10:52:14,671 runpy.easyconfig.templates DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': [None, 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [4, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [[], "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2015-11-25 10:52:14,675 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,675 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,675 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,675 runpy.easyconfig.templates DEBUG name: name, config: toy
== 2015-11-25 10:52:14,675 runpy.easyconfig.templates DEBUG name: version, config: 0.0
== 2015-11-25 10:52:14,676 runpy.easyconfig.templates DEBUG name: versionsuffix, config: 
== 2015-11-25 10:52:14,676 runpy.easyconfig.templates DEBUG name: versionprefix, config: 
== 2015-11-25 10:52:14,676 runpy.EB_toy INFO Running prepare_prepare_step step
== 2015-11-25 10:52:14,676 runpy.Dummy DEBUG _toolchain_exists: dummy toolchain always exists, returning True
== 2015-11-25 10:52:14,677 runpy.Dummy INFO prepare: toolchain dummy mode, dummy version; not loading dependencies
== 2015-11-25 10:52:14,677 runpy.EB_toy INFO Using /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmp3eXq8n/toy/0.0/dummy-dummy/toy-0.0/ as start dir
== 2015-11-25 10:52:14,677 runpy.EB_toy DEBUG Changed to real build directory /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmp3eXq8n/toy/0.0/dummy-dummy/toy-0.0/ (start_dir)
== 2015-11-25 10:52:14,678 runpy.easyconfig.templates DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': ['/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmp3eXq8n/toy/0.0/dummy-dummy/toy-0.0/', 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [4, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [{}, "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2015-11-25 10:52:14,680 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,680 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,680 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,680 runpy.easyconfig.templates DEBUG name: name, config: toy
== 2015-11-25 10:52:14,681 runpy.easyconfig.templates DEBUG name: version, config: 0.0
== 2015-11-25 10:52:14,681 runpy.easyconfig.templates DEBUG name: versionsuffix, config: 
== 2015-11-25 10:52:14,681 runpy.easyconfig.templates DEBUG name: versionprefix, config: 
== 2015-11-25 10:52:14,682 runpy.easyconfig.templates DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': ['/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmp3eXq8n/toy/0.0/dummy-dummy/toy-0.0/', 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [4, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [{}, "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2015-11-25 10:52:14,684 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,684 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,684 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,684 runpy.easyconfig.templates DEBUG name: name, config: toy
== 2015-11-25 10:52:14,684 runpy.easyconfig.templates DEBUG name: version, config: 0.0
== 2015-11-25 10:52:14,685 runpy.easyconfig.templates DEBUG name: versionsuffix, config: 
== 2015-11-25 10:52:14,685 runpy.easyconfig.templates DEBUG name: versionprefix, config: 
== 2015-11-25 10:52:14,685 runpy.EB_toy INFO Running configure_configure_step step
== 2015-11-25 10:52:14,686 runpy.easyconfig.templates DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': ['/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmp3eXq8n/toy/0.0/dummy-dummy/toy-0.0/', 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [4, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [{}, "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2015-11-25 10:52:14,688 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,688 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,688 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,688 runpy.easyconfig.templates DEBUG name: name, config: toy
== 2015-11-25 10:52:14,689 runpy.easyconfig.templates DEBUG name: version, config: 0.0
== 2015-11-25 10:52:14,689 runpy.easyconfig.templates DEBUG name: versionsuffix, config: 
== 2015-11-25 10:52:14,689 runpy.easyconfig.templates DEBUG name: versionprefix, config: 
== 2015-11-25 10:52:14,690 runpy.easyconfig.templates DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': ['/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmp3eXq8n/toy/0.0/dummy-dummy/toy-0.0/', 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [4, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [{}, "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2015-11-25 10:52:14,692 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,692 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,692 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,692 runpy.easyconfig.templates DEBUG name: name, config: toy
== 2015-11-25 10:52:14,692 runpy.easyconfig.templates DEBUG name: version, config: 0.0
== 2015-11-25 10:52:14,693 runpy.easyconfig.templates DEBUG name: versionsuffix, config: 
== 2015-11-25 10:52:14,693 runpy.easyconfig.templates DEBUG name: versionprefix, config: 
== 2015-11-25 10:52:14,693 runpy.EB_toy INFO Running build_build_step step
== 2015-11-25 10:52:14,693 runpy.run DEBUG run_cmd: running cmd  gcc toy.c -o toy (in /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmp3eXq8n/toy/0.0/dummy-dummy/toy-0.0)
== 2015-11-25 10:52:14,752 runpy.run DEBUG cmd " gcc toy.c -o toy" exited with exitcode 0 and output:

== 2015-11-25 10:52:14,753 runpy.run DEBUG Using default regular expression: (?<![(,-]|\w)(?:error|segmentation fault|failed)(?![(,-]|\.?\w)
== 2015-11-25 10:52:14,756 runpy.easyconfig.templates DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': ['/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmp3eXq8n/toy/0.0/dummy-dummy/toy-0.0/', 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [4, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [{}, "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2015-11-25 10:52:14,760 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,761 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,761 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,762 runpy.easyconfig.templates DEBUG name: name, config: toy
== 2015-11-25 10:52:14,762 runpy.easyconfig.templates DEBUG name: version, config: 0.0
== 2015-11-25 10:52:14,763 runpy.easyconfig.templates DEBUG name: versionsuffix, config: 
== 2015-11-25 10:52:14,763 runpy.easyconfig.templates DEBUG name: versionprefix, config: 
== 2015-11-25 10:52:14,765 runpy.easyconfig.templates DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': ['/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmp3eXq8n/toy/0.0/dummy-dummy/toy-0.0/', 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [4, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [{}, "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2015-11-25 10:52:14,769 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,770 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,770 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,770 runpy.easyconfig.templates DEBUG name: name, config: toy
== 2015-11-25 10:52:14,771 runpy.easyconfig.templates DEBUG name: version, config: 0.0
== 2015-11-25 10:52:14,771 runpy.easyconfig.templates DEBUG name: versionsuffix, config: 
== 2015-11-25 10:52:14,771 runpy.easyconfig.templates DEBUG name: versionprefix, config: 
== 2015-11-25 10:52:14,771 runpy.EB_toy INFO Running test_test_step step
== 2015-11-25 10:52:14,772 runpy.easyconfig.templates DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': ['/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmp3eXq8n/toy/0.0/dummy-dummy/toy-0.0/', 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [4, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [{}, "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2015-11-25 10:52:14,774 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,774 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,774 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,774 runpy.easyconfig.templates DEBUG name: name, config: toy
== 2015-11-25 10:52:14,775 runpy.easyconfig.templates DEBUG name: version, config: 0.0
== 2015-11-25 10:52:14,775 runpy.easyconfig.templates DEBUG name: versionsuffix, config: 
== 2015-11-25 10:52:14,775 runpy.easyconfig.templates DEBUG name: versionprefix, config: 
== 2015-11-25 10:52:14,776 runpy.easyconfig.templates DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': ['/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmp3eXq8n/toy/0.0/dummy-dummy/toy-0.0/', 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [4, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [{}, "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2015-11-25 10:52:14,778 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,778 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,778 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,778 runpy.easyconfig.templates DEBUG name: name, config: toy
== 2015-11-25 10:52:14,779 runpy.easyconfig.templates DEBUG name: version, config: 0.0
== 2015-11-25 10:52:14,779 runpy.easyconfig.templates DEBUG name: versionsuffix, config: 
== 2015-11-25 10:52:14,779 runpy.easyconfig.templates DEBUG name: versionprefix, config: 
== 2015-11-25 10:52:14,779 runpy.EB_toy INFO Running install_stage_install_step step
== 2015-11-25 10:52:14,780 runpy.easyconfig.templates DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': ['/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmp3eXq8n/toy/0.0/dummy-dummy/toy-0.0/', 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [4, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [{}, "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2015-11-25 10:52:14,782 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,782 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,782 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,782 runpy.easyconfig.templates DEBUG name: name, config: toy
== 2015-11-25 10:52:14,783 runpy.easyconfig.templates DEBUG name: version, config: 0.0
== 2015-11-25 10:52:14,783 runpy.easyconfig.templates DEBUG name: versionsuffix, config: 
== 2015-11-25 10:52:14,783 runpy.easyconfig.templates DEBUG name: versionprefix, config: 
== 2015-11-25 10:52:14,784 runpy.easyconfig.templates DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': ['/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmp3eXq8n/toy/0.0/dummy-dummy/toy-0.0/', 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [4, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [{}, "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2015-11-25 10:52:14,786 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,786 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,786 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,786 runpy.easyconfig.templates DEBUG name: name, config: toy
== 2015-11-25 10:52:14,787 runpy.easyconfig.templates DEBUG name: version, config: 0.0
== 2015-11-25 10:52:14,787 runpy.easyconfig.templates DEBUG name: versionsuffix, config: 
== 2015-11-25 10:52:14,787 runpy.easyconfig.templates DEBUG name: versionprefix, config: 
== 2015-11-25 10:52:14,787 runpy.EB_toy INFO Running install_make_installdir step
== 2015-11-25 10:52:14,787 runpy.EB_toy DEBUG Creating the installation directory /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/software/toy/0.0 (cleanup: True)
== 2015-11-25 10:52:14,788 runpy.EB_toy INFO Found old directory /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/software/toy/0.0
== 2015-11-25 10:52:14,788 runpy.filetools INFO Path /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/software/toy/0.0 successfully removed.
== 2015-11-25 10:52:14,788 runpy.EB_toy INFO Removed old directory /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/software/toy/0.0
== 2015-11-25 10:52:14,788 runpy.filetools INFO Creating directory /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/software/toy/0.0 (parents: True, set_gid: False, sticky: False)
== 2015-11-25 10:52:14,789 runpy.easyconfig.templates DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': ['/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmp3eXq8n/toy/0.0/dummy-dummy/toy-0.0/', 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [4, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [{}, "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2015-11-25 10:52:14,791 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,791 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,792 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,792 runpy.easyconfig.templates DEBUG name: name, config: toy
== 2015-11-25 10:52:14,792 runpy.easyconfig.templates DEBUG name: version, config: 0.0
== 2015-11-25 10:52:14,792 runpy.easyconfig.templates DEBUG name: versionsuffix, config: 
== 2015-11-25 10:52:14,792 runpy.easyconfig.templates DEBUG name: versionprefix, config: 
== 2015-11-25 10:52:14,793 runpy.easyconfig.templates DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': ['/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmp3eXq8n/toy/0.0/dummy-dummy/toy-0.0/', 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [4, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [{}, "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2015-11-25 10:52:14,795 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,795 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,795 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,796 runpy.easyconfig.templates DEBUG name: name, config: toy
== 2015-11-25 10:52:14,796 runpy.easyconfig.templates DEBUG name: version, config: 0.0
== 2015-11-25 10:52:14,796 runpy.easyconfig.templates DEBUG name: versionsuffix, config: 
== 2015-11-25 10:52:14,796 runpy.easyconfig.templates DEBUG name: versionprefix, config: 
== 2015-11-25 10:52:14,797 runpy.EB_toy INFO Running install_install_step step
== 2015-11-25 10:52:14,797 runpy.filetools INFO Creating directory /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/software/toy/0.0/bin (parents: True, set_gid: False, sticky: False)
== 2015-11-25 10:52:14,797 runpy.filetools INFO Creating directory /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/software/toy/0.0/lib (parents: True, set_gid: False, sticky: False)
== 2015-11-25 10:52:14,798 runpy.easyconfig.templates DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': ['/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmp3eXq8n/toy/0.0/dummy-dummy/toy-0.0/', 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [4, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [{}, "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2015-11-25 10:52:14,800 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,800 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,801 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,801 runpy.easyconfig.templates DEBUG name: name, config: toy
== 2015-11-25 10:52:14,801 runpy.easyconfig.templates DEBUG name: version, config: 0.0
== 2015-11-25 10:52:14,801 runpy.easyconfig.templates DEBUG name: versionsuffix, config: 
== 2015-11-25 10:52:14,801 runpy.easyconfig.templates DEBUG name: versionprefix, config: 
== 2015-11-25 10:52:14,802 runpy.easyconfig.templates DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': ['/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmp3eXq8n/toy/0.0/dummy-dummy/toy-0.0/', 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [4, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [{}, "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2015-11-25 10:52:14,804 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,804 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,804 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,805 runpy.easyconfig.templates DEBUG name: name, config: toy
== 2015-11-25 10:52:14,805 runpy.easyconfig.templates DEBUG name: version, config: 0.0
== 2015-11-25 10:52:14,805 runpy.easyconfig.templates DEBUG name: versionsuffix, config: 
== 2015-11-25 10:52:14,805 runpy.easyconfig.templates DEBUG name: versionprefix, config: 
== 2015-11-25 10:52:14,805 runpy.EB_toy INFO Running extensions_extensions_step step
== 2015-11-25 10:52:14,806 runpy.EB_toy DEBUG No extensions in exts_list
== 2015-11-25 10:52:14,806 runpy.easyconfig.templates DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': ['/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmp3eXq8n/toy/0.0/dummy-dummy/toy-0.0/', 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [4, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [{}, "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2015-11-25 10:52:14,808 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,808 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,809 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,809 runpy.easyconfig.templates DEBUG name: name, config: toy
== 2015-11-25 10:52:14,809 runpy.easyconfig.templates DEBUG name: version, config: 0.0
== 2015-11-25 10:52:14,809 runpy.easyconfig.templates DEBUG name: versionsuffix, config: 
== 2015-11-25 10:52:14,810 runpy.easyconfig.templates DEBUG name: versionprefix, config: 
== 2015-11-25 10:52:14,810 runpy.easyconfig.templates DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': ['/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmp3eXq8n/toy/0.0/dummy-dummy/toy-0.0/', 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [4, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [{}, "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2015-11-25 10:52:14,812 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,812 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,813 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,813 runpy.easyconfig.templates DEBUG name: name, config: toy
== 2015-11-25 10:52:14,813 runpy.easyconfig.templates DEBUG name: version, config: 0.0
== 2015-11-25 10:52:14,813 runpy.easyconfig.templates DEBUG name: versionsuffix, config: 
== 2015-11-25 10:52:14,813 runpy.easyconfig.templates DEBUG name: versionprefix, config: 
== 2015-11-25 10:52:14,814 runpy.EB_toy INFO Running postproc_post_install_step step
== 2015-11-25 10:52:14,814 runpy.run DEBUG run_cmd: running cmd echo TOY > /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/software/toy/0.0/README (in /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmp3eXq8n/toy/0.0/dummy-dummy/toy-0.0)
== 2015-11-25 10:52:14,820 runpy.run DEBUG cmd "echo TOY > /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/software/toy/0.0/README" exited with exitcode 0 and output:

== 2015-11-25 10:52:14,821 runpy.run INFO cmd "echo TOY > /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/software/toy/0.0/README" exited with exitcode 0 and output:

== 2015-11-25 10:52:14,821 runpy.run DEBUG Using default regular expression: (?<![(,-]|\w)(?:error|segmentation fault|failed)(?![(,-]|\.?\w)
== 2015-11-25 10:52:14,824 runpy.easyconfig.templates DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': ['/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmp3eXq8n/toy/0.0/dummy-dummy/toy-0.0/', 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [4, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [{}, "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2015-11-25 10:52:14,828 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,829 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,830 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,830 runpy.easyconfig.templates DEBUG name: name, config: toy
== 2015-11-25 10:52:14,831 runpy.easyconfig.templates DEBUG name: version, config: 0.0
== 2015-11-25 10:52:14,831 runpy.easyconfig.templates DEBUG name: versionsuffix, config: 
== 2015-11-25 10:52:14,832 runpy.easyconfig.templates DEBUG name: versionprefix, config: 
== 2015-11-25 10:52:14,834 runpy.easyconfig.templates DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': ['/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmp3eXq8n/toy/0.0/dummy-dummy/toy-0.0/', 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [4, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [{}, "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2015-11-25 10:52:14,838 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,838 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,839 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:14,839 runpy.easyconfig.templates DEBUG name: name, config: toy
== 2015-11-25 10:52:14,840 runpy.easyconfig.templates DEBUG name: version, config: 0.0
== 2015-11-25 10:52:14,840 runpy.easyconfig.templates DEBUG name: versionsuffix, config: 
== 2015-11-25 10:52:14,841 runpy.easyconfig.templates DEBUG name: versionprefix, config: 
== 2015-11-25 10:52:14,841 runpy.EB_toy INFO Running sanitycheck_sanity_check_step step
== 2015-11-25 10:52:14,842 runpy.EB_toy INFO Using specified sanity check paths: {'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}
== 2015-11-25 10:52:14,842 runpy.EB_toy INFO Using specified sanity check commands: []
== 2015-11-25 10:52:14,842 runpy.EB_toy DEBUG Could not find file bin/yot in /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/software/toy/0.0
== 2015-11-25 10:52:14,843 runpy.EB_toy DEBUG Sanity check: found file bin/toy in /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/software/toy/0.0
== 2015-11-25 10:52:14,843 runpy.EB_toy DEBUG Sanity check: found (non-empty) directory bin in /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/software/toy/0.0
== 2015-11-25 10:52:14,843 runpy.config DEBUG modules install path as specified by 'installpath' and 'subdir_modules': /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules
== 2015-11-25 10:52:14,844 runpy.ModuleGeneratorTcl DEBUG Fake mode: using /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/eb-9T31gM/eb-pC1_cw/tmpga3i7n (instead of /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules)
== 2015-11-25 10:52:14,844 runpy.config DEBUG modules install path as specified by 'installpath' and 'subdir_modules': /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules
== 2015-11-25 10:52:14,844 runpy.ModuleGeneratorTcl DEBUG Fake mode: using /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/eb-9T31gM/eb-pC1_cw/tmpga3i7n (instead of /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules)
== 2015-11-25 10:52:14,844 runpy.filetools INFO Creating directory /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/eb-9T31gM/eb-pC1_cw/tmpga3i7n/all/toy (parents: True, set_gid: False, sticky: False)
== 2015-11-25 10:52:14,845 runpy.EB_toy DEBUG Full list of dependencies: []
== 2015-11-25 10:52:14,845 runpy.ActiveMNS DEBUG Determining initial module paths for <easybuild.framework.easyconfig.easyconfig.EasyConfig object at 0x2849450>
== 2015-11-25 10:52:14,845 runpy.ActiveMNS DEBUG Obtained initial module paths: []
== 2015-11-25 10:52:14,846 runpy.EnvironmentModulesC DEBUG Top of module tree reached with toy/0.0 (module subdir: /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules/all/)
== 2015-11-25 10:52:14,846 runpy.EB_toy DEBUG List of retained dependencies: []
== 2015-11-25 10:52:14,846 runpy.ActiveMNS DEBUG Determining modulepath extensions for <easybuild.framework.easyconfig.easyconfig.EasyConfig object at 0x2849450>
== 2015-11-25 10:52:14,846 runpy.ActiveMNS DEBUG Obtained modulepath extensions: []
== 2015-11-25 10:52:14,847 runpy.EB_toy DEBUG Including module path extensions returned by module naming scheme: []
== 2015-11-25 10:52:14,847 runpy.ActiveMNS DEBUG Determining full module name for <easybuild.framework.easyconfig.easyconfig.EasyConfig object at 0x2849450> (force_visible: False)
== 2015-11-25 10:52:14,847 runpy.ActiveMNS DEBUG No alternative software name specified to determine module name with
== 2015-11-25 10:52:14,848 runpy.module_naming_scheme.utilities DEBUG Module name toy/0.0 validated
== 2015-11-25 10:52:14,848 runpy.ActiveMNS DEBUG Obtained valid full module name toy/0.0
== 2015-11-25 10:52:14,848 runpy.EB_toy DEBUG make_module_extra added this: setenv	EBROOTTOY		"$root"
setenv	EBVERSIONTOY		"0.0"
setenv	EBDEVELTOY		"$root/easybuild/toy-0.0-easybuild-devel"


== 2015-11-25 10:52:14,848 runpy.config DEBUG modules install path as specified by 'installpath' and 'subdir_modules': /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules
== 2015-11-25 10:52:14,849 runpy.ModuleGeneratorTcl DEBUG Fake mode: using /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/eb-9T31gM/eb-pC1_cw/tmpga3i7n (instead of /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules)
== 2015-11-25 10:52:14,849 runpy.filetools DEBUG Not creating existing path /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/eb-9T31gM/eb-pC1_cw/tmpga3i7n/all/toy
== 2015-11-25 10:52:14,849 runpy.EB_toy INFO Module file /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/eb-9T31gM/eb-pC1_cw/tmpga3i7n/all/toy/0.0 written: #%Module
proc ModulesHelp { } {
    puts stderr { Toy C program. - Homepage: http://hpcugent.github.com/easybuild
    }
}

module-whatis {Description: Toy C program. - Homepage: http://hpcugent.github.com/easybuild}

set root /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/software/toy/0.0

conflict toy

prepend-path	LD_LIBRARY_PATH		$root/lib
prepend-path	LIBRARY_PATH		$root/lib
prepend-path	PATH		$root/bin
setenv	EBROOTTOY		"$root"
setenv	EBVERSIONTOY		"0.0"
setenv	EBDEVELTOY		"$root/easybuild/toy-0.0-easybuild-devel"

# Built with EasyBuild version 2.4.0.dev0

== 2015-11-25 10:52:14,849 runpy.config DEBUG modules install path as specified by 'installpath' and 'subdir_modules': /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules
== 2015-11-25 10:52:14,850 runpy.ModuleGeneratorTcl DEBUG Fake mode: using /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/eb-9T31gM/eb-pC1_cw/tmpga3i7n (instead of /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules)
== 2015-11-25 10:52:14,850 runpy.config DEBUG modules install path as specified by 'installpath' and 'subdir_modules': /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules
== 2015-11-25 10:52:14,850 runpy.ModuleGeneratorTcl DEBUG Fake mode: using /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/eb-9T31gM/eb-pC1_cw/tmpga3i7n (instead of /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules)
== 2015-11-25 10:52:14,850 runpy.filetools INFO Creating directory /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/eb-9T31gM/eb-pC1_cw/tmpga3i7n/tools/toy (parents: True, set_gid: False, sticky: False)
== 2015-11-25 10:52:14,851 runpy.EnvironmentModulesC DEBUG Current MODULEPATH: /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules/all:/home/caroline/Documents/GitHub/easybuild-framework/test/framework/modules
== 2015-11-25 10:52:14,851 runpy.EnvironmentModulesC DEBUG Changing LD_LIBRARY_PATH from '' to '' in environment for module command
== 2015-11-25 10:52:14,851 runpy.EnvironmentModulesC DEBUG Changing LD_PRELOAD from '' to '' in environment for module command
== 2015-11-25 10:52:14,851 runpy.EnvironmentModulesC DEBUG Running module command '/usr/bin/modulecmd python unuse /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/eb-9T31gM/eb-pC1_cw/tmpga3i7n/all' from /home/caroline/Documents/GitHub/easybuild-framework
== 2015-11-25 10:52:14,865 runpy.EnvironmentModulesC DEBUG Output of module command '/usr/bin/modulecmd python unuse /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/eb-9T31gM/eb-pC1_cw/tmpga3i7n/all': stdout: ; stderr: 
== 2015-11-25 10:52:14,866 runpy.EnvironmentModulesC DEBUG Correcting paths in $LD_LIBRARY_PATH from [''] to []
== 2015-11-25 10:52:14,867 runpy.EnvironmentModulesC DEBUG Correcting paths in $LD_PRELOAD from [''] to []
== 2015-11-25 10:52:14,868 runpy.EnvironmentModulesC DEBUG $MODULEPATH after set_mod_paths: /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules/all:/home/caroline/Documents/GitHub/easybuild-framework/test/framework/modules
== 2015-11-25 10:52:14,868 runpy.filetools DEBUG Not creating existing path /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/eb-9T31gM/eb-pC1_cw/tmpga3i7n/all
== 2015-11-25 10:52:14,869 runpy.EnvironmentModulesC DEBUG Current MODULEPATH: /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules/all:/home/caroline/Documents/GitHub/easybuild-framework/test/framework/modules
== 2015-11-25 10:52:14,869 runpy.EnvironmentModulesC DEBUG Changing LD_LIBRARY_PATH from '' to '' in environment for module command
== 2015-11-25 10:52:14,870 runpy.EnvironmentModulesC DEBUG Changing LD_PRELOAD from '' to '' in environment for module command
== 2015-11-25 10:52:14,871 runpy.EnvironmentModulesC DEBUG Running module command '/usr/bin/modulecmd python use /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/eb-9T31gM/eb-pC1_cw/tmpga3i7n/all' from /home/caroline/Documents/GitHub/easybuild-framework
== 2015-11-25 10:52:14,888 runpy.EnvironmentModulesC DEBUG Output of module command '/usr/bin/modulecmd python use /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/eb-9T31gM/eb-pC1_cw/tmpga3i7n/all': stdout: os.environ['MODULEPATH'] = '/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/eb-9T31gM/eb-pC1_cw/tmpga3i7n/all:/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules/all:/home/caroline/Documents/GitHub/easybuild-framework/test/framework/modules'
; stderr: 
== 2015-11-25 10:52:14,890 runpy.EnvironmentModulesC DEBUG Correcting paths in $LD_LIBRARY_PATH from [''] to []
== 2015-11-25 10:52:14,892 runpy.EnvironmentModulesC DEBUG Correcting paths in $LD_PRELOAD from [''] to []
== 2015-11-25 10:52:14,893 runpy.EnvironmentModulesC DEBUG $MODULEPATH after set_mod_paths: /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/eb-9T31gM/eb-pC1_cw/tmpga3i7n/all:/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules/all:/home/caroline/Documents/GitHub/easybuild-framework/test/framework/modules
== 2015-11-25 10:52:14,893 runpy.ActiveMNS DEBUG Determining initial module paths for <easybuild.framework.easyconfig.easyconfig.EasyConfig object at 0x2849450>
== 2015-11-25 10:52:14,894 runpy.ActiveMNS DEBUG Obtained initial module paths: []
== 2015-11-25 10:52:14,894 runpy.EnvironmentModulesC DEBUG List of loaded modules before purge: None
== 2015-11-25 10:52:14,895 runpy.EnvironmentModulesC DEBUG Current MODULEPATH: /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/eb-9T31gM/eb-pC1_cw/tmpga3i7n/all:/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules/all:/home/caroline/Documents/GitHub/easybuild-framework/test/framework/modules
== 2015-11-25 10:52:14,895 runpy.EnvironmentModulesC DEBUG Changing LD_LIBRARY_PATH from '' to '' in environment for module command
== 2015-11-25 10:52:14,896 runpy.EnvironmentModulesC DEBUG Changing LD_PRELOAD from '' to '' in environment for module command
== 2015-11-25 10:52:14,896 runpy.EnvironmentModulesC DEBUG Running module command '/usr/bin/modulecmd python purge ' from /home/caroline/Documents/GitHub/easybuild-framework
== 2015-11-25 10:52:14,911 runpy.EnvironmentModulesC DEBUG Output of module command '/usr/bin/modulecmd python purge ': stdout: ; stderr: 
== 2015-11-25 10:52:14,911 runpy.EnvironmentModulesC DEBUG Correcting paths in $LD_LIBRARY_PATH from [''] to []
== 2015-11-25 10:52:14,912 runpy.EnvironmentModulesC DEBUG Correcting paths in $LD_PRELOAD from [''] to []
== 2015-11-25 10:52:14,912 runpy.environment DEBUG Key in new environment found that is different from old one: MODULEPATH (/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules/all:/home/caroline/Documents/GitHub/easybuild-framework/test/framework/modules)
== 2015-11-25 10:52:14,912 runpy.environment INFO Environment variable MODULEPATH set to /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules/all:/home/caroline/Documents/GitHub/easybuild-framework/test/framework/modules (previous value: '/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/eb-9T31gM/eb-pC1_cw/tmpga3i7n/all:/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules/all:/home/caroline/Documents/GitHub/easybuild-framework/test/framework/modules')
== 2015-11-25 10:52:14,913 runpy.filetools DEBUG Not creating existing path /home/caroline/Documents/GitHub/easybuild-framework/test/framework/modules
== 2015-11-25 10:52:14,913 runpy.EnvironmentModulesC DEBUG Current MODULEPATH: /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules/all:/home/caroline/Documents/GitHub/easybuild-framework/test/framework/modules
== 2015-11-25 10:52:14,914 runpy.EnvironmentModulesC DEBUG Changing LD_LIBRARY_PATH from '' to '' in environment for module command
== 2015-11-25 10:52:14,914 runpy.EnvironmentModulesC DEBUG Changing LD_PRELOAD from '' to '' in environment for module command
== 2015-11-25 10:52:14,914 runpy.EnvironmentModulesC DEBUG Running module command '/usr/bin/modulecmd python use /home/caroline/Documents/GitHub/easybuild-framework/test/framework/modules' from /home/caroline/Documents/GitHub/easybuild-framework
== 2015-11-25 10:52:14,932 runpy.EnvironmentModulesC DEBUG Output of module command '/usr/bin/modulecmd python use /home/caroline/Documents/GitHub/easybuild-framework/test/framework/modules': stdout: ; stderr: 
== 2015-11-25 10:52:14,933 runpy.EnvironmentModulesC DEBUG Correcting paths in $LD_LIBRARY_PATH from [''] to []
== 2015-11-25 10:52:14,934 runpy.EnvironmentModulesC DEBUG Correcting paths in $LD_PRELOAD from [''] to []
== 2015-11-25 10:52:14,935 runpy.filetools DEBUG Not creating existing path /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules/all
== 2015-11-25 10:52:14,935 runpy.EnvironmentModulesC DEBUG Current MODULEPATH: /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules/all:/home/caroline/Documents/GitHub/easybuild-framework/test/framework/modules
== 2015-11-25 10:52:14,936 runpy.EnvironmentModulesC DEBUG Changing LD_LIBRARY_PATH from '' to '' in environment for module command
== 2015-11-25 10:52:14,936 runpy.EnvironmentModulesC DEBUG Changing LD_PRELOAD from '' to '' in environment for module command
== 2015-11-25 10:52:14,937 runpy.EnvironmentModulesC DEBUG Running module command '/usr/bin/modulecmd python use /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules/all' from /home/caroline/Documents/GitHub/easybuild-framework
== 2015-11-25 10:52:14,958 runpy.EnvironmentModulesC DEBUG Output of module command '/usr/bin/modulecmd python use /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules/all': stdout: ; stderr: 
== 2015-11-25 10:52:14,960 runpy.EnvironmentModulesC DEBUG Correcting paths in $LD_LIBRARY_PATH from [''] to []
== 2015-11-25 10:52:14,960 runpy.EnvironmentModulesC DEBUG Correcting paths in $LD_PRELOAD from [''] to []
== 2015-11-25 10:52:14,961 runpy.filetools DEBUG Not creating existing path /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/eb-9T31gM/eb-pC1_cw/tmpga3i7n/all
== 2015-11-25 10:52:14,961 runpy.EnvironmentModulesC DEBUG Current MODULEPATH: /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules/all:/home/caroline/Documents/GitHub/easybuild-framework/test/framework/modules
== 2015-11-25 10:52:14,962 runpy.EnvironmentModulesC DEBUG Changing LD_LIBRARY_PATH from '' to '' in environment for module command
== 2015-11-25 10:52:14,962 runpy.EnvironmentModulesC DEBUG Changing LD_PRELOAD from '' to '' in environment for module command
== 2015-11-25 10:52:14,963 runpy.EnvironmentModulesC DEBUG Running module command '/usr/bin/modulecmd python use /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/eb-9T31gM/eb-pC1_cw/tmpga3i7n/all' from /home/caroline/Documents/GitHub/easybuild-framework
== 2015-11-25 10:52:14,983 runpy.EnvironmentModulesC DEBUG Output of module command '/usr/bin/modulecmd python use /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/eb-9T31gM/eb-pC1_cw/tmpga3i7n/all': stdout: os.environ['MODULEPATH'] = '/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/eb-9T31gM/eb-pC1_cw/tmpga3i7n/all:/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules/all:/home/caroline/Documents/GitHub/easybuild-framework/test/framework/modules'
; stderr: 
== 2015-11-25 10:52:14,984 runpy.EnvironmentModulesC DEBUG Correcting paths in $LD_LIBRARY_PATH from [''] to []
== 2015-11-25 10:52:14,985 runpy.EnvironmentModulesC DEBUG Correcting paths in $LD_PRELOAD from [''] to []
== 2015-11-25 10:52:14,986 runpy.EnvironmentModulesC INFO $MODULEPATH set based on list of module paths (via 'module use'): /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/eb-9T31gM/eb-pC1_cw/tmpga3i7n/all:/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules/all:/home/caroline/Documents/GitHub/easybuild-framework/test/framework/modules
== 2015-11-25 10:52:14,986 runpy.EnvironmentModulesC DEBUG Current MODULEPATH: /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/eb-9T31gM/eb-pC1_cw/tmpga3i7n/all:/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules/all:/home/caroline/Documents/GitHub/easybuild-framework/test/framework/modules
== 2015-11-25 10:52:14,987 runpy.EnvironmentModulesC DEBUG Changing LD_LIBRARY_PATH from '' to '' in environment for module command
== 2015-11-25 10:52:14,988 runpy.EnvironmentModulesC DEBUG Changing LD_PRELOAD from '' to '' in environment for module command
== 2015-11-25 10:52:14,988 runpy.EnvironmentModulesC DEBUG Running module command '/usr/bin/modulecmd python load toy/0.0' from /home/caroline/Documents/GitHub/easybuild-framework
== 2015-11-25 10:52:15,018 runpy.EnvironmentModulesC DEBUG Output of module command '/usr/bin/modulecmd python load toy/0.0': stdout: os.environ['EBDEVELTOY'] = '/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/software/toy/0.0/easybuild/toy-0.0-easybuild-devel'
os.environ['EBROOTTOY'] = '/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/software/toy/0.0'
os.environ['EBVERSIONTOY'] = '0.0'
os.environ['LD_LIBRARY_PATH'] = '/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/software/toy/0.0/lib'
os.environ['LIBRARY_PATH'] = '/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/software/toy/0.0/lib'
os.environ['LOADEDMODULES'] = 'toy/0.0'
os.environ['PATH'] = '/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/software/toy/0.0/bin:/usr/lib/lightdm/lightdm:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games'
os.environ['_LMFILES_'] = '/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/eb-9T31gM/eb-pC1_cw/tmpga3i7n/all/toy/0.0'
; stderr: 
== 2015-11-25 10:52:15,019 runpy.EnvironmentModulesC DEBUG Correcting paths in $LD_LIBRARY_PATH from ['/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/software/toy/0.0/lib'] to ['/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/software/toy/0.0/lib']
== 2015-11-25 10:52:15,020 runpy.EnvironmentModulesC DEBUG Correcting paths in $LD_PRELOAD from [''] to []
== 2015-11-25 10:52:15,020 runpy.EnvironmentModulesC DEBUG Current MODULEPATH: /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/eb-9T31gM/eb-pC1_cw/tmpga3i7n/all:/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules/all:/home/caroline/Documents/GitHub/easybuild-framework/test/framework/modules
== 2015-11-25 10:52:15,021 runpy.EnvironmentModulesC DEBUG Changing LD_LIBRARY_PATH from '/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/software/toy/0.0/lib' to '' in environment for module command
== 2015-11-25 10:52:15,022 runpy.EnvironmentModulesC DEBUG Changing LD_PRELOAD from '' to '' in environment for module command
== 2015-11-25 10:52:15,022 runpy.EnvironmentModulesC DEBUG Running module command '/usr/bin/modulecmd python unload toy/0.0' from /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/software/toy/0.0
== 2015-11-25 10:52:15,040 runpy.EnvironmentModulesC DEBUG Output of module command '/usr/bin/modulecmd python unload toy/0.0': stdout: os.environ['PATH'] = '/usr/lib/lightdm/lightdm:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games'
os.environ['EBDEVELTOY'] = ''
del os.environ['EBDEVELTOY']
os.environ['EBROOTTOY'] = ''
del os.environ['EBROOTTOY']
os.environ['EBVERSIONTOY'] = ''
del os.environ['EBVERSIONTOY']
os.environ['LIBRARY_PATH'] = ''
del os.environ['LIBRARY_PATH']
os.environ['LOADEDMODULES'] = ''
del os.environ['LOADEDMODULES']
os.environ['_LMFILES_'] = ''
del os.environ['_LMFILES_']
; stderr: 
== 2015-11-25 10:52:15,042 runpy.EnvironmentModulesC DEBUG Correcting paths in $LD_LIBRARY_PATH from ['/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/software/toy/0.0/lib'] to ['/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/software/toy/0.0/lib']
== 2015-11-25 10:52:15,042 runpy.EnvironmentModulesC DEBUG Correcting paths in $LD_PRELOAD from [''] to []
== 2015-11-25 10:52:15,043 runpy.EnvironmentModulesC DEBUG Current MODULEPATH: /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/eb-9T31gM/eb-pC1_cw/tmpga3i7n/all:/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules/all:/home/caroline/Documents/GitHub/easybuild-framework/test/framework/modules
== 2015-11-25 10:52:15,044 runpy.EnvironmentModulesC DEBUG Changing LD_LIBRARY_PATH from '/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/software/toy/0.0/lib' to '' in environment for module command
== 2015-11-25 10:52:15,044 runpy.EnvironmentModulesC DEBUG Changing LD_PRELOAD from '' to '' in environment for module command
== 2015-11-25 10:52:15,045 runpy.EnvironmentModulesC DEBUG Running module command '/usr/bin/modulecmd python unuse /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/eb-9T31gM/eb-pC1_cw/tmpga3i7n/all' from /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/software/toy/0.0
== 2015-11-25 10:52:15,059 runpy.EnvironmentModulesC DEBUG Output of module command '/usr/bin/modulecmd python unuse /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/eb-9T31gM/eb-pC1_cw/tmpga3i7n/all': stdout: os.environ['MODULEPATH'] = '/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules/all:/home/caroline/Documents/GitHub/easybuild-framework/test/framework/modules'
; stderr: 
== 2015-11-25 10:52:15,061 runpy.EnvironmentModulesC DEBUG Correcting paths in $LD_LIBRARY_PATH from ['/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/software/toy/0.0/lib'] to ['/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/software/toy/0.0/lib']
== 2015-11-25 10:52:15,061 runpy.EnvironmentModulesC DEBUG Correcting paths in $LD_PRELOAD from [''] to []
== 2015-11-25 10:52:15,062 runpy.EnvironmentModulesC DEBUG $MODULEPATH after set_mod_paths: /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules/all:/home/caroline/Documents/GitHub/easybuild-framework/test/framework/modules
== 2015-11-25 10:52:15,063 runpy.filetools INFO Path /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/eb-9T31gM/eb-pC1_cw/tmpga3i7n successfully removed.
== 2015-11-25 10:52:15,064 runpy.environment DEBUG Key in new environment found that is different from old one: LD_LIBRARY_PATH ()
== 2015-11-25 10:52:15,064 runpy.environment INFO Environment variable LD_LIBRARY_PATH set to  (previous value: '/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/software/toy/0.0/lib')
== 2015-11-25 10:52:15,065 runpy.environment DEBUG Key in new environment found that is not in old one: LOADEDMODULES ()
== 2015-11-25 10:52:15,065 runpy.environment INFO Environment variable LOADEDMODULES set to  (previously undefined)
== 2015-11-25 10:52:15,066 runpy.EB_toy DEBUG Sanity check passed!
== 2015-11-25 10:52:15,068 runpy.easyconfig.templates DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': ['/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmp3eXq8n/toy/0.0/dummy-dummy/toy-0.0/', 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [4, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [{}, "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2015-11-25 10:52:15,073 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:15,073 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:15,074 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:15,074 runpy.easyconfig.templates DEBUG name: name, config: toy
== 2015-11-25 10:52:15,075 runpy.easyconfig.templates DEBUG name: version, config: 0.0
== 2015-11-25 10:52:15,075 runpy.easyconfig.templates DEBUG name: versionsuffix, config: 
== 2015-11-25 10:52:15,076 runpy.easyconfig.templates DEBUG name: versionprefix, config: 
== 2015-11-25 10:52:15,077 runpy.easyconfig.templates DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': ['/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmp3eXq8n/toy/0.0/dummy-dummy/toy-0.0/', 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [4, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [{}, "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2015-11-25 10:52:15,080 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:15,080 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:15,080 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:15,080 runpy.easyconfig.templates DEBUG name: name, config: toy
== 2015-11-25 10:52:15,080 runpy.easyconfig.templates DEBUG name: version, config: 0.0
== 2015-11-25 10:52:15,081 runpy.easyconfig.templates DEBUG name: versionsuffix, config: 
== 2015-11-25 10:52:15,081 runpy.easyconfig.templates DEBUG name: versionprefix, config: 
== 2015-11-25 10:52:15,081 runpy.EB_toy INFO Running cleanup_cleanup_step step
== 2015-11-25 10:52:15,081 runpy.EB_toy INFO Cleaning up builddir /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmp3eXq8n/toy/0.0/dummy-dummy (in /home/caroline/Documents/GitHub/easybuild-framework)
== 2015-11-25 10:52:15,082 runpy.filetools INFO Path /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmp3eXq8n/toy/0.0/dummy-dummy successfully removed.
== 2015-11-25 10:52:15,083 runpy.easyconfig.templates DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': ['/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmp3eXq8n/toy/0.0/dummy-dummy/toy-0.0/', 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [4, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [{}, "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2015-11-25 10:52:15,085 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:15,085 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:15,085 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:15,085 runpy.easyconfig.templates DEBUG name: name, config: toy
== 2015-11-25 10:52:15,085 runpy.easyconfig.templates DEBUG name: version, config: 0.0
== 2015-11-25 10:52:15,086 runpy.easyconfig.templates DEBUG name: versionsuffix, config: 
== 2015-11-25 10:52:15,086 runpy.easyconfig.templates DEBUG name: versionprefix, config: 
== 2015-11-25 10:52:15,087 runpy.easyconfig.templates DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': ['/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmp3eXq8n/toy/0.0/dummy-dummy/toy-0.0/', 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [4, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [{}, "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2015-11-25 10:52:15,088 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:15,089 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:15,089 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:15,089 runpy.easyconfig.templates DEBUG name: name, config: toy
== 2015-11-25 10:52:15,089 runpy.easyconfig.templates DEBUG name: version, config: 0.0
== 2015-11-25 10:52:15,090 runpy.easyconfig.templates DEBUG name: versionsuffix, config: 
== 2015-11-25 10:52:15,090 runpy.easyconfig.templates DEBUG name: versionprefix, config: 
== 2015-11-25 10:52:15,090 runpy.EB_toy INFO Running module_make_module_step step
== 2015-11-25 10:52:15,090 runpy.config DEBUG modules install path as specified by 'installpath' and 'subdir_modules': /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules
== 2015-11-25 10:52:15,090 runpy.config DEBUG modules install path as specified by 'installpath' and 'subdir_modules': /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules
== 2015-11-25 10:52:15,091 runpy.filetools DEBUG Not creating existing path /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules/all/toy
== 2015-11-25 10:52:15,091 runpy.EB_toy DEBUG Full list of dependencies: []
== 2015-11-25 10:52:15,091 runpy.ActiveMNS DEBUG Determining initial module paths for <easybuild.framework.easyconfig.easyconfig.EasyConfig object at 0x2849450>
== 2015-11-25 10:52:15,092 runpy.ActiveMNS DEBUG Obtained initial module paths: []
== 2015-11-25 10:52:15,092 runpy.EnvironmentModulesC DEBUG Top of module tree reached with toy/0.0 (module subdir: /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules/all/)
== 2015-11-25 10:52:15,092 runpy.EB_toy DEBUG List of retained dependencies: []
== 2015-11-25 10:52:15,092 runpy.ActiveMNS DEBUG Determining modulepath extensions for <easybuild.framework.easyconfig.easyconfig.EasyConfig object at 0x2849450>
== 2015-11-25 10:52:15,092 runpy.ActiveMNS DEBUG Obtained modulepath extensions: []
== 2015-11-25 10:52:15,093 runpy.EB_toy DEBUG Including module path extensions returned by module naming scheme: []
== 2015-11-25 10:52:15,093 runpy.ActiveMNS DEBUG Determining full module name for <easybuild.framework.easyconfig.easyconfig.EasyConfig object at 0x2849450> (force_visible: False)
== 2015-11-25 10:52:15,093 runpy.ActiveMNS DEBUG No alternative software name specified to determine module name with
== 2015-11-25 10:52:15,094 runpy.module_naming_scheme.utilities DEBUG Module name toy/0.0 validated
== 2015-11-25 10:52:15,094 runpy.ActiveMNS DEBUG Obtained valid full module name toy/0.0
== 2015-11-25 10:52:15,094 runpy.EB_toy DEBUG make_module_extra added this: setenv	EBROOTTOY		"$root"
setenv	EBVERSIONTOY		"0.0"
setenv	EBDEVELTOY		"$root/easybuild/toy-0.0-easybuild-devel"


== 2015-11-25 10:52:15,095 runpy.config DEBUG modules install path as specified by 'installpath' and 'subdir_modules': /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules
== 2015-11-25 10:52:15,095 runpy.filetools DEBUG Not creating existing path /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules/all/toy
== 2015-11-25 10:52:15,095 runpy.EB_toy INFO Module file /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules/all/toy/0.0 written: #%Module
proc ModulesHelp { } {
    puts stderr { Toy C program. - Homepage: http://hpcugent.github.com/easybuild
    }
}

module-whatis {Description: Toy C program. - Homepage: http://hpcugent.github.com/easybuild}

set root /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/software/toy/0.0

conflict toy

prepend-path	LD_LIBRARY_PATH		$root/lib
prepend-path	LIBRARY_PATH		$root/lib
prepend-path	PATH		$root/bin
setenv	EBROOTTOY		"$root"
setenv	EBVERSIONTOY		"0.0"
setenv	EBDEVELTOY		"$root/easybuild/toy-0.0-easybuild-devel"

# Built with EasyBuild version 2.4.0.dev0

== 2015-11-25 10:52:15,095 runpy.config DEBUG modules install path as specified by 'installpath' and 'subdir_modules': /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules
== 2015-11-25 10:52:15,096 runpy.config DEBUG modules install path as specified by 'installpath' and 'subdir_modules': /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules
== 2015-11-25 10:52:15,096 runpy.filetools DEBUG Not creating existing path /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules/tools/toy
== 2015-11-25 10:52:15,096 runpy.EB_toy INFO Making devel module...
== 2015-11-25 10:52:15,097 runpy.config DEBUG modules install path as specified by 'installpath' and 'subdir_modules': /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules
== 2015-11-25 10:52:15,097 runpy.ModuleGeneratorTcl DEBUG Fake mode: using /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/eb-9T31gM/eb-pC1_cw/tmpga3i7n (instead of /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules)
== 2015-11-25 10:52:15,097 runpy.config DEBUG modules install path as specified by 'installpath' and 'subdir_modules': /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules
== 2015-11-25 10:52:15,097 runpy.ModuleGeneratorTcl DEBUG Fake mode: using /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/eb-9T31gM/eb-pC1_cw/tmpga3i7n (instead of /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules)
== 2015-11-25 10:52:15,097 runpy.filetools INFO Creating directory /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/eb-9T31gM/eb-pC1_cw/tmpga3i7n/all/toy (parents: True, set_gid: False, sticky: False)
== 2015-11-25 10:52:15,098 runpy.EB_toy DEBUG Full list of dependencies: []
== 2015-11-25 10:52:15,098 runpy.ActiveMNS DEBUG Determining initial module paths for <easybuild.framework.easyconfig.easyconfig.EasyConfig object at 0x2849450>
== 2015-11-25 10:52:15,098 runpy.ActiveMNS DEBUG Obtained initial module paths: []
== 2015-11-25 10:52:15,099 runpy.EnvironmentModulesC DEBUG Top of module tree reached with toy/0.0 (module subdir: /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules/all/)
== 2015-11-25 10:52:15,099 runpy.EB_toy DEBUG List of retained dependencies: []
== 2015-11-25 10:52:15,099 runpy.ActiveMNS DEBUG Determining modulepath extensions for <easybuild.framework.easyconfig.easyconfig.EasyConfig object at 0x2849450>
== 2015-11-25 10:52:15,099 runpy.ActiveMNS DEBUG Obtained modulepath extensions: []
== 2015-11-25 10:52:15,099 runpy.EB_toy DEBUG Including module path extensions returned by module naming scheme: []
== 2015-11-25 10:52:15,100 runpy.ActiveMNS DEBUG Determining full module name for <easybuild.framework.easyconfig.easyconfig.EasyConfig object at 0x2849450> (force_visible: False)
== 2015-11-25 10:52:15,100 runpy.ActiveMNS DEBUG No alternative software name specified to determine module name with
== 2015-11-25 10:52:15,100 runpy.module_naming_scheme.utilities DEBUG Module name toy/0.0 validated
== 2015-11-25 10:52:15,101 runpy.ActiveMNS DEBUG Obtained valid full module name toy/0.0
== 2015-11-25 10:52:15,101 runpy.EB_toy DEBUG make_module_extra added this: setenv	EBROOTTOY		"$root"
setenv	EBVERSIONTOY		"0.0"
setenv	EBDEVELTOY		"$root/easybuild/toy-0.0-easybuild-devel"


== 2015-11-25 10:52:15,101 runpy.config DEBUG modules install path as specified by 'installpath' and 'subdir_modules': /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules
== 2015-11-25 10:52:15,101 runpy.ModuleGeneratorTcl DEBUG Fake mode: using /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/eb-9T31gM/eb-pC1_cw/tmpga3i7n (instead of /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules)
== 2015-11-25 10:52:15,102 runpy.filetools DEBUG Not creating existing path /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/eb-9T31gM/eb-pC1_cw/tmpga3i7n/all/toy
== 2015-11-25 10:52:15,102 runpy.EB_toy INFO Module file /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/eb-9T31gM/eb-pC1_cw/tmpga3i7n/all/toy/0.0 written: #%Module
proc ModulesHelp { } {
    puts stderr { Toy C program. - Homepage: http://hpcugent.github.com/easybuild
    }
}

module-whatis {Description: Toy C program. - Homepage: http://hpcugent.github.com/easybuild}

set root /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/software/toy/0.0

conflict toy

prepend-path	LD_LIBRARY_PATH		$root/lib
prepend-path	LIBRARY_PATH		$root/lib
prepend-path	PATH		$root/bin
setenv	EBROOTTOY		"$root"
setenv	EBVERSIONTOY		"0.0"
setenv	EBDEVELTOY		"$root/easybuild/toy-0.0-easybuild-devel"

# Built with EasyBuild version 2.4.0.dev0

== 2015-11-25 10:52:15,102 runpy.config DEBUG modules install path as specified by 'installpath' and 'subdir_modules': /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules
== 2015-11-25 10:52:15,102 runpy.ModuleGeneratorTcl DEBUG Fake mode: using /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/eb-9T31gM/eb-pC1_cw/tmpga3i7n (instead of /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules)
== 2015-11-25 10:52:15,103 runpy.config DEBUG modules install path as specified by 'installpath' and 'subdir_modules': /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules
== 2015-11-25 10:52:15,103 runpy.ModuleGeneratorTcl DEBUG Fake mode: using /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/eb-9T31gM/eb-pC1_cw/tmpga3i7n (instead of /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules)
== 2015-11-25 10:52:15,103 runpy.filetools INFO Creating directory /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/eb-9T31gM/eb-pC1_cw/tmpga3i7n/tools/toy (parents: True, set_gid: False, sticky: False)
== 2015-11-25 10:52:15,104 runpy.EnvironmentModulesC DEBUG Current MODULEPATH: /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules/all:/home/caroline/Documents/GitHub/easybuild-framework/test/framework/modules
== 2015-11-25 10:52:15,104 runpy.EnvironmentModulesC DEBUG Changing LD_LIBRARY_PATH from '' to '' in environment for module command
== 2015-11-25 10:52:15,104 runpy.EnvironmentModulesC DEBUG Changing LD_PRELOAD from '' to '' in environment for module command
== 2015-11-25 10:52:15,104 runpy.EnvironmentModulesC DEBUG Running module command '/usr/bin/modulecmd python unuse /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/eb-9T31gM/eb-pC1_cw/tmpga3i7n/all' from /home/caroline/Documents/GitHub/easybuild-framework
== 2015-11-25 10:52:15,118 runpy.EnvironmentModulesC DEBUG Output of module command '/usr/bin/modulecmd python unuse /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/eb-9T31gM/eb-pC1_cw/tmpga3i7n/all': stdout: ; stderr: 
== 2015-11-25 10:52:15,119 runpy.EnvironmentModulesC DEBUG Correcting paths in $LD_LIBRARY_PATH from [''] to []
== 2015-11-25 10:52:15,120 runpy.EnvironmentModulesC DEBUG Correcting paths in $LD_PRELOAD from [''] to []
== 2015-11-25 10:52:15,120 runpy.EnvironmentModulesC DEBUG $MODULEPATH after set_mod_paths: /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules/all:/home/caroline/Documents/GitHub/easybuild-framework/test/framework/modules
== 2015-11-25 10:52:15,121 runpy.filetools DEBUG Not creating existing path /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/eb-9T31gM/eb-pC1_cw/tmpga3i7n/all
== 2015-11-25 10:52:15,122 runpy.EnvironmentModulesC DEBUG Current MODULEPATH: /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules/all:/home/caroline/Documents/GitHub/easybuild-framework/test/framework/modules
== 2015-11-25 10:52:15,122 runpy.EnvironmentModulesC DEBUG Changing LD_LIBRARY_PATH from '' to '' in environment for module command
== 2015-11-25 10:52:15,123 runpy.EnvironmentModulesC DEBUG Changing LD_PRELOAD from '' to '' in environment for module command
== 2015-11-25 10:52:15,123 runpy.EnvironmentModulesC DEBUG Running module command '/usr/bin/modulecmd python use /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/eb-9T31gM/eb-pC1_cw/tmpga3i7n/all' from /home/caroline/Documents/GitHub/easybuild-framework
== 2015-11-25 10:52:15,144 runpy.EnvironmentModulesC DEBUG Output of module command '/usr/bin/modulecmd python use /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/eb-9T31gM/eb-pC1_cw/tmpga3i7n/all': stdout: os.environ['MODULEPATH'] = '/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/eb-9T31gM/eb-pC1_cw/tmpga3i7n/all:/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules/all:/home/caroline/Documents/GitHub/easybuild-framework/test/framework/modules'
; stderr: 
== 2015-11-25 10:52:15,146 runpy.EnvironmentModulesC DEBUG Correcting paths in $LD_LIBRARY_PATH from [''] to []
== 2015-11-25 10:52:15,146 runpy.EnvironmentModulesC DEBUG Correcting paths in $LD_PRELOAD from [''] to []
== 2015-11-25 10:52:15,147 runpy.EnvironmentModulesC DEBUG $MODULEPATH after set_mod_paths: /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/eb-9T31gM/eb-pC1_cw/tmpga3i7n/all:/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules/all:/home/caroline/Documents/GitHub/easybuild-framework/test/framework/modules
== 2015-11-25 10:52:15,148 runpy.ActiveMNS DEBUG Determining initial module paths for <easybuild.framework.easyconfig.easyconfig.EasyConfig object at 0x2849450>
== 2015-11-25 10:52:15,148 runpy.ActiveMNS DEBUG Obtained initial module paths: []
== 2015-11-25 10:52:15,149 runpy.EnvironmentModulesC DEBUG List of loaded modules before purge: None
== 2015-11-25 10:52:15,149 runpy.EnvironmentModulesC DEBUG Current MODULEPATH: /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/eb-9T31gM/eb-pC1_cw/tmpga3i7n/all:/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules/all:/home/caroline/Documents/GitHub/easybuild-framework/test/framework/modules
== 2015-11-25 10:52:15,150 runpy.EnvironmentModulesC DEBUG Changing LD_LIBRARY_PATH from '' to '' in environment for module command
== 2015-11-25 10:52:15,150 runpy.EnvironmentModulesC DEBUG Changing LD_PRELOAD from '' to '' in environment for module command
== 2015-11-25 10:52:15,151 runpy.EnvironmentModulesC DEBUG Running module command '/usr/bin/modulecmd python purge ' from /home/caroline/Documents/GitHub/easybuild-framework
== 2015-11-25 10:52:15,165 runpy.EnvironmentModulesC DEBUG Output of module command '/usr/bin/modulecmd python purge ': stdout: ; stderr: 
== 2015-11-25 10:52:15,166 runpy.EnvironmentModulesC DEBUG Correcting paths in $LD_LIBRARY_PATH from [''] to []
== 2015-11-25 10:52:15,167 runpy.EnvironmentModulesC DEBUG Correcting paths in $LD_PRELOAD from [''] to []
== 2015-11-25 10:52:15,168 runpy.environment DEBUG Key in new environment found that is different from old one: MODULEPATH (/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules/all:/home/caroline/Documents/GitHub/easybuild-framework/test/framework/modules)
== 2015-11-25 10:52:15,168 runpy.environment INFO Environment variable MODULEPATH set to /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules/all:/home/caroline/Documents/GitHub/easybuild-framework/test/framework/modules (previous value: '/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/eb-9T31gM/eb-pC1_cw/tmpga3i7n/all:/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules/all:/home/caroline/Documents/GitHub/easybuild-framework/test/framework/modules')
== 2015-11-25 10:52:15,169 runpy.filetools DEBUG Not creating existing path /home/caroline/Documents/GitHub/easybuild-framework/test/framework/modules
== 2015-11-25 10:52:15,170 runpy.EnvironmentModulesC DEBUG Current MODULEPATH: /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules/all:/home/caroline/Documents/GitHub/easybuild-framework/test/framework/modules
== 2015-11-25 10:52:15,170 runpy.EnvironmentModulesC DEBUG Changing LD_LIBRARY_PATH from '' to '' in environment for module command
== 2015-11-25 10:52:15,171 runpy.EnvironmentModulesC DEBUG Changing LD_PRELOAD from '' to '' in environment for module command
== 2015-11-25 10:52:15,171 runpy.EnvironmentModulesC DEBUG Running module command '/usr/bin/modulecmd python use /home/caroline/Documents/GitHub/easybuild-framework/test/framework/modules' from /home/caroline/Documents/GitHub/easybuild-framework
== 2015-11-25 10:52:15,190 runpy.EnvironmentModulesC DEBUG Output of module command '/usr/bin/modulecmd python use /home/caroline/Documents/GitHub/easybuild-framework/test/framework/modules': stdout: ; stderr: 
== 2015-11-25 10:52:15,191 runpy.EnvironmentModulesC DEBUG Correcting paths in $LD_LIBRARY_PATH from [''] to []
== 2015-11-25 10:52:15,191 runpy.EnvironmentModulesC DEBUG Correcting paths in $LD_PRELOAD from [''] to []
== 2015-11-25 10:52:15,192 runpy.filetools DEBUG Not creating existing path /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules/all
== 2015-11-25 10:52:15,193 runpy.EnvironmentModulesC DEBUG Current MODULEPATH: /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules/all:/home/caroline/Documents/GitHub/easybuild-framework/test/framework/modules
== 2015-11-25 10:52:15,193 runpy.EnvironmentModulesC DEBUG Changing LD_LIBRARY_PATH from '' to '' in environment for module command
== 2015-11-25 10:52:15,194 runpy.EnvironmentModulesC DEBUG Changing LD_PRELOAD from '' to '' in environment for module command
== 2015-11-25 10:52:15,194 runpy.EnvironmentModulesC DEBUG Running module command '/usr/bin/modulecmd python use /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules/all' from /home/caroline/Documents/GitHub/easybuild-framework
== 2015-11-25 10:52:15,215 runpy.EnvironmentModulesC DEBUG Output of module command '/usr/bin/modulecmd python use /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules/all': stdout: ; stderr: 
== 2015-11-25 10:52:15,216 runpy.EnvironmentModulesC DEBUG Correcting paths in $LD_LIBRARY_PATH from [''] to []
== 2015-11-25 10:52:15,217 runpy.EnvironmentModulesC DEBUG Correcting paths in $LD_PRELOAD from [''] to []
== 2015-11-25 10:52:15,218 runpy.filetools DEBUG Not creating existing path /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/eb-9T31gM/eb-pC1_cw/tmpga3i7n/all
== 2015-11-25 10:52:15,218 runpy.EnvironmentModulesC DEBUG Current MODULEPATH: /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules/all:/home/caroline/Documents/GitHub/easybuild-framework/test/framework/modules
== 2015-11-25 10:52:15,219 runpy.EnvironmentModulesC DEBUG Changing LD_LIBRARY_PATH from '' to '' in environment for module command
== 2015-11-25 10:52:15,219 runpy.EnvironmentModulesC DEBUG Changing LD_PRELOAD from '' to '' in environment for module command
== 2015-11-25 10:52:15,220 runpy.EnvironmentModulesC DEBUG Running module command '/usr/bin/modulecmd python use /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/eb-9T31gM/eb-pC1_cw/tmpga3i7n/all' from /home/caroline/Documents/GitHub/easybuild-framework
== 2015-11-25 10:52:15,241 runpy.EnvironmentModulesC DEBUG Output of module command '/usr/bin/modulecmd python use /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/eb-9T31gM/eb-pC1_cw/tmpga3i7n/all': stdout: os.environ['MODULEPATH'] = '/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/eb-9T31gM/eb-pC1_cw/tmpga3i7n/all:/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules/all:/home/caroline/Documents/GitHub/easybuild-framework/test/framework/modules'
; stderr: 
== 2015-11-25 10:52:15,242 runpy.EnvironmentModulesC DEBUG Correcting paths in $LD_LIBRARY_PATH from [''] to []
== 2015-11-25 10:52:15,243 runpy.EnvironmentModulesC DEBUG Correcting paths in $LD_PRELOAD from [''] to []
== 2015-11-25 10:52:15,243 runpy.EnvironmentModulesC INFO $MODULEPATH set based on list of module paths (via 'module use'): /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/eb-9T31gM/eb-pC1_cw/tmpga3i7n/all:/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules/all:/home/caroline/Documents/GitHub/easybuild-framework/test/framework/modules
== 2015-11-25 10:52:15,244 runpy.EnvironmentModulesC DEBUG Current MODULEPATH: /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/eb-9T31gM/eb-pC1_cw/tmpga3i7n/all:/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules/all:/home/caroline/Documents/GitHub/easybuild-framework/test/framework/modules
== 2015-11-25 10:52:15,244 runpy.EnvironmentModulesC DEBUG Changing LD_LIBRARY_PATH from '' to '' in environment for module command
== 2015-11-25 10:52:15,245 runpy.EnvironmentModulesC DEBUG Changing LD_PRELOAD from '' to '' in environment for module command
== 2015-11-25 10:52:15,245 runpy.EnvironmentModulesC DEBUG Running module command '/usr/bin/modulecmd python load toy/0.0' from /home/caroline/Documents/GitHub/easybuild-framework
== 2015-11-25 10:52:15,272 runpy.EnvironmentModulesC DEBUG Output of module command '/usr/bin/modulecmd python load toy/0.0': stdout: os.environ['EBDEVELTOY'] = '/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/software/toy/0.0/easybuild/toy-0.0-easybuild-devel'
os.environ['EBROOTTOY'] = '/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/software/toy/0.0'
os.environ['EBVERSIONTOY'] = '0.0'
os.environ['LD_LIBRARY_PATH'] = '/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/software/toy/0.0/lib'
os.environ['LIBRARY_PATH'] = '/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/software/toy/0.0/lib'
os.environ['LOADEDMODULES'] = 'toy/0.0'
os.environ['PATH'] = '/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/software/toy/0.0/bin:/usr/lib/lightdm/lightdm:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games'
os.environ['_LMFILES_'] = '/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/eb-9T31gM/eb-pC1_cw/tmpga3i7n/all/toy/0.0'
; stderr: 
== 2015-11-25 10:52:15,274 runpy.EnvironmentModulesC DEBUG Correcting paths in $LD_LIBRARY_PATH from ['/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/software/toy/0.0/lib'] to ['/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/software/toy/0.0/lib']
== 2015-11-25 10:52:15,274 runpy.EnvironmentModulesC DEBUG Correcting paths in $LD_PRELOAD from [''] to []
== 2015-11-25 10:52:15,275 runpy.filetools INFO Creating directory /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/software/toy/0.0/easybuild (parents: True, set_gid: False, sticky: False)
== 2015-11-25 10:52:15,276 runpy.ActiveMNS DEBUG Determining full module name for <easybuild.framework.easyconfig.easyconfig.EasyConfig object at 0x2849450> (force_visible: False)
== 2015-11-25 10:52:15,277 runpy.ActiveMNS DEBUG No alternative software name specified to determine module name with
== 2015-11-25 10:52:15,277 runpy.module_naming_scheme.utilities DEBUG Module name toy/0.0 validated
== 2015-11-25 10:52:15,278 runpy.ActiveMNS DEBUG Obtained valid full module name toy/0.0
== 2015-11-25 10:52:15,278 runpy.EB_toy DEBUG Writing devel module to /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/software/toy/0.0/easybuild/toy-0.0-easybuild-devel
== 2015-11-25 10:52:15,279 runpy.filetools DEBUG Not creating existing path /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/software/toy/0.0/easybuild
== 2015-11-25 10:52:15,279 runpy.EnvironmentModulesC DEBUG Current MODULEPATH: /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/eb-9T31gM/eb-pC1_cw/tmpga3i7n/all:/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules/all:/home/caroline/Documents/GitHub/easybuild-framework/test/framework/modules
== 2015-11-25 10:52:15,280 runpy.EnvironmentModulesC DEBUG Changing LD_LIBRARY_PATH from '/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/software/toy/0.0/lib' to '' in environment for module command
== 2015-11-25 10:52:15,281 runpy.EnvironmentModulesC DEBUG Changing LD_PRELOAD from '' to '' in environment for module command
== 2015-11-25 10:52:15,281 runpy.EnvironmentModulesC DEBUG Running module command '/usr/bin/modulecmd python unload toy/0.0' from /home/caroline/Documents/GitHub/easybuild-framework
== 2015-11-25 10:52:15,300 runpy.EnvironmentModulesC DEBUG Output of module command '/usr/bin/modulecmd python unload toy/0.0': stdout: os.environ['PATH'] = '/usr/lib/lightdm/lightdm:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games'
os.environ['EBDEVELTOY'] = ''
del os.environ['EBDEVELTOY']
os.environ['EBROOTTOY'] = ''
del os.environ['EBROOTTOY']
os.environ['EBVERSIONTOY'] = ''
del os.environ['EBVERSIONTOY']
os.environ['LIBRARY_PATH'] = ''
del os.environ['LIBRARY_PATH']
os.environ['LOADEDMODULES'] = ''
del os.environ['LOADEDMODULES']
os.environ['_LMFILES_'] = ''
del os.environ['_LMFILES_']
; stderr: 
== 2015-11-25 10:52:15,301 runpy.EnvironmentModulesC DEBUG Correcting paths in $LD_LIBRARY_PATH from ['/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/software/toy/0.0/lib'] to ['/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/software/toy/0.0/lib']
== 2015-11-25 10:52:15,302 runpy.EnvironmentModulesC DEBUG Correcting paths in $LD_PRELOAD from [''] to []
== 2015-11-25 10:52:15,303 runpy.EnvironmentModulesC DEBUG Current MODULEPATH: /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/eb-9T31gM/eb-pC1_cw/tmpga3i7n/all:/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules/all:/home/caroline/Documents/GitHub/easybuild-framework/test/framework/modules
== 2015-11-25 10:52:15,303 runpy.EnvironmentModulesC DEBUG Changing LD_LIBRARY_PATH from '/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/software/toy/0.0/lib' to '' in environment for module command
== 2015-11-25 10:52:15,304 runpy.EnvironmentModulesC DEBUG Changing LD_PRELOAD from '' to '' in environment for module command
== 2015-11-25 10:52:15,304 runpy.EnvironmentModulesC DEBUG Running module command '/usr/bin/modulecmd python unuse /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/eb-9T31gM/eb-pC1_cw/tmpga3i7n/all' from /home/caroline/Documents/GitHub/easybuild-framework
== 2015-11-25 10:52:15,319 runpy.EnvironmentModulesC DEBUG Output of module command '/usr/bin/modulecmd python unuse /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/eb-9T31gM/eb-pC1_cw/tmpga3i7n/all': stdout: os.environ['MODULEPATH'] = '/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules/all:/home/caroline/Documents/GitHub/easybuild-framework/test/framework/modules'
; stderr: 
== 2015-11-25 10:52:15,320 runpy.EnvironmentModulesC DEBUG Correcting paths in $LD_LIBRARY_PATH from ['/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/software/toy/0.0/lib'] to ['/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/software/toy/0.0/lib']
== 2015-11-25 10:52:15,321 runpy.EnvironmentModulesC DEBUG Correcting paths in $LD_PRELOAD from [''] to []
== 2015-11-25 10:52:15,322 runpy.EnvironmentModulesC DEBUG $MODULEPATH after set_mod_paths: /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules/all:/home/caroline/Documents/GitHub/easybuild-framework/test/framework/modules
== 2015-11-25 10:52:15,323 runpy.filetools INFO Path /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/eb-9T31gM/eb-pC1_cw/tmpga3i7n successfully removed.
== 2015-11-25 10:52:15,324 runpy.environment DEBUG Key in new environment found that is different from old one: LD_LIBRARY_PATH ()
== 2015-11-25 10:52:15,324 runpy.environment INFO Environment variable LD_LIBRARY_PATH set to  (previous value: '/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/software/toy/0.0/lib')
== 2015-11-25 10:52:15,325 runpy.environment DEBUG Key in new environment found that is not in old one: LOADEDMODULES ()
== 2015-11-25 10:52:15,325 runpy.environment INFO Environment variable LOADEDMODULES set to  (previously undefined)
== 2015-11-25 10:52:15,328 runpy.easyconfig.templates DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': ['/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmp3eXq8n/toy/0.0/dummy-dummy/toy-0.0/', 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [4, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [{}, "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2015-11-25 10:52:15,332 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:15,333 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:15,333 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:15,334 runpy.easyconfig.templates DEBUG name: name, config: toy
== 2015-11-25 10:52:15,334 runpy.easyconfig.templates DEBUG name: version, config: 0.0
== 2015-11-25 10:52:15,335 runpy.easyconfig.templates DEBUG name: versionsuffix, config: 
== 2015-11-25 10:52:15,335 runpy.easyconfig.templates DEBUG name: versionprefix, config: 
== 2015-11-25 10:52:15,337 runpy.easyconfig.templates DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': ['/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmp3eXq8n/toy/0.0/dummy-dummy/toy-0.0/', 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [4, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [{}, "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2015-11-25 10:52:15,341 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:15,342 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:15,342 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:15,342 runpy.easyconfig.templates DEBUG name: name, config: toy
== 2015-11-25 10:52:15,343 runpy.easyconfig.templates DEBUG name: version, config: 0.0
== 2015-11-25 10:52:15,343 runpy.easyconfig.templates DEBUG name: versionsuffix, config: 
== 2015-11-25 10:52:15,343 runpy.easyconfig.templates DEBUG name: versionprefix, config: 
== 2015-11-25 10:52:15,343 runpy.EB_toy INFO Running permissions_permissions_step step
== 2015-11-25 10:52:15,343 runpy.filetools INFO Adjusting permissions recursively for /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/software/toy/0.0
== 2015-11-25 10:52:15,344 runpy.EB_toy INFO Successfully removed write permissions recursively for group/other on install dir.
== 2015-11-25 10:52:15,345 runpy.easyconfig.templates DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': ['/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmp3eXq8n/toy/0.0/dummy-dummy/toy-0.0/', 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [4, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [{}, "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2015-11-25 10:52:15,347 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:15,347 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:15,347 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:15,347 runpy.easyconfig.templates DEBUG name: name, config: toy
== 2015-11-25 10:52:15,347 runpy.easyconfig.templates DEBUG name: version, config: 0.0
== 2015-11-25 10:52:15,348 runpy.easyconfig.templates DEBUG name: versionsuffix, config: 
== 2015-11-25 10:52:15,348 runpy.easyconfig.templates DEBUG name: versionprefix, config: 
== 2015-11-25 10:52:15,349 runpy.easyconfig.templates DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': ['/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmp3eXq8n/toy/0.0/dummy-dummy/toy-0.0/', 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [4, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [{}, "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2015-11-25 10:52:15,350 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:15,351 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:15,351 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:15,351 runpy.easyconfig.templates DEBUG name: name, config: toy
== 2015-11-25 10:52:15,351 runpy.easyconfig.templates DEBUG name: version, config: 0.0
== 2015-11-25 10:52:15,352 runpy.easyconfig.templates DEBUG name: versionsuffix, config: 
== 2015-11-25 10:52:15,352 runpy.easyconfig.templates DEBUG name: versionprefix, config: 
== 2015-11-25 10:52:15,352 runpy.EB_toy INFO Running package_package_step step
== 2015-11-25 10:52:15,352 runpy.EB_toy INFO Skipping package step (not enabled)
== 2015-11-25 10:52:15,353 runpy.easyconfig.templates DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': ['/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmp3eXq8n/toy/0.0/dummy-dummy/toy-0.0/', 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [4, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [{}, "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2015-11-25 10:52:15,355 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:15,355 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:15,355 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:15,355 runpy.easyconfig.templates DEBUG name: name, config: toy
== 2015-11-25 10:52:15,356 runpy.easyconfig.templates DEBUG name: version, config: 0.0
== 2015-11-25 10:52:15,356 runpy.easyconfig.templates DEBUG name: versionsuffix, config: 
== 2015-11-25 10:52:15,356 runpy.easyconfig.templates DEBUG name: versionprefix, config: 
== 2015-11-25 10:52:15,357 runpy.easyconfig.templates DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': ['/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmp3eXq8n/toy/0.0/dummy-dummy/toy-0.0/', 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [4, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [{}, "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2015-11-25 10:52:15,359 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:15,359 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:15,359 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:15,359 runpy.easyconfig.templates DEBUG name: name, config: toy
== 2015-11-25 10:52:15,360 runpy.easyconfig.templates DEBUG name: version, config: 0.0
== 2015-11-25 10:52:15,360 runpy.easyconfig.templates DEBUG name: versionsuffix, config: 
== 2015-11-25 10:52:15,360 runpy.easyconfig.templates DEBUG name: versionprefix, config: 
== 2015-11-25 10:52:15,360 runpy.EB_toy INFO Running testcases_load_module step
== 2015-11-25 10:52:15,360 runpy.ActiveMNS DEBUG Determining initial module paths for <easybuild.framework.easyconfig.easyconfig.EasyConfig object at 0x2849450>
== 2015-11-25 10:52:15,361 runpy.ActiveMNS DEBUG Obtained initial module paths: []
== 2015-11-25 10:52:15,361 runpy.EnvironmentModulesC DEBUG List of loaded modules before purge: None
== 2015-11-25 10:52:15,361 runpy.EnvironmentModulesC DEBUG Current MODULEPATH: /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules/all:/home/caroline/Documents/GitHub/easybuild-framework/test/framework/modules
== 2015-11-25 10:52:15,361 runpy.EnvironmentModulesC DEBUG Changing LD_LIBRARY_PATH from '' to '' in environment for module command
== 2015-11-25 10:52:15,362 runpy.EnvironmentModulesC DEBUG Changing LD_PRELOAD from '' to '' in environment for module command
== 2015-11-25 10:52:15,362 runpy.EnvironmentModulesC DEBUG Running module command '/usr/bin/modulecmd python purge ' from /home/caroline/Documents/GitHub/easybuild-framework
== 2015-11-25 10:52:15,376 runpy.EnvironmentModulesC DEBUG Output of module command '/usr/bin/modulecmd python purge ': stdout: ; stderr: 
== 2015-11-25 10:52:15,377 runpy.EnvironmentModulesC DEBUG Correcting paths in $LD_LIBRARY_PATH from [''] to []
== 2015-11-25 10:52:15,377 runpy.EnvironmentModulesC DEBUG Correcting paths in $LD_PRELOAD from [''] to []
== 2015-11-25 10:52:15,378 runpy.filetools DEBUG Not creating existing path /home/caroline/Documents/GitHub/easybuild-framework/test/framework/modules
== 2015-11-25 10:52:15,379 runpy.EnvironmentModulesC DEBUG Current MODULEPATH: /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules/all:/home/caroline/Documents/GitHub/easybuild-framework/test/framework/modules
== 2015-11-25 10:52:15,380 runpy.EnvironmentModulesC DEBUG Changing LD_LIBRARY_PATH from '' to '' in environment for module command
== 2015-11-25 10:52:15,380 runpy.EnvironmentModulesC DEBUG Changing LD_PRELOAD from '' to '' in environment for module command
== 2015-11-25 10:52:15,381 runpy.EnvironmentModulesC DEBUG Running module command '/usr/bin/modulecmd python use /home/caroline/Documents/GitHub/easybuild-framework/test/framework/modules' from /home/caroline/Documents/GitHub/easybuild-framework
== 2015-11-25 10:52:15,399 runpy.EnvironmentModulesC DEBUG Output of module command '/usr/bin/modulecmd python use /home/caroline/Documents/GitHub/easybuild-framework/test/framework/modules': stdout: ; stderr: 
== 2015-11-25 10:52:15,401 runpy.EnvironmentModulesC DEBUG Correcting paths in $LD_LIBRARY_PATH from [''] to []
== 2015-11-25 10:52:15,401 runpy.EnvironmentModulesC DEBUG Correcting paths in $LD_PRELOAD from [''] to []
== 2015-11-25 10:52:15,402 runpy.filetools DEBUG Not creating existing path /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules/all
== 2015-11-25 10:52:15,402 runpy.EnvironmentModulesC DEBUG Current MODULEPATH: /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules/all:/home/caroline/Documents/GitHub/easybuild-framework/test/framework/modules
== 2015-11-25 10:52:15,403 runpy.EnvironmentModulesC DEBUG Changing LD_LIBRARY_PATH from '' to '' in environment for module command
== 2015-11-25 10:52:15,403 runpy.EnvironmentModulesC DEBUG Changing LD_PRELOAD from '' to '' in environment for module command
== 2015-11-25 10:52:15,404 runpy.EnvironmentModulesC DEBUG Running module command '/usr/bin/modulecmd python use /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules/all' from /home/caroline/Documents/GitHub/easybuild-framework
== 2015-11-25 10:52:15,425 runpy.EnvironmentModulesC DEBUG Output of module command '/usr/bin/modulecmd python use /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules/all': stdout: ; stderr: 
== 2015-11-25 10:52:15,427 runpy.EnvironmentModulesC DEBUG Correcting paths in $LD_LIBRARY_PATH from [''] to []
== 2015-11-25 10:52:15,427 runpy.EnvironmentModulesC DEBUG Correcting paths in $LD_PRELOAD from [''] to []
== 2015-11-25 10:52:15,428 runpy.EnvironmentModulesC INFO $MODULEPATH set based on list of module paths (via 'module use'): /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules/all:/home/caroline/Documents/GitHub/easybuild-framework/test/framework/modules
== 2015-11-25 10:52:15,428 runpy.EnvironmentModulesC DEBUG Current MODULEPATH: /tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules/all:/home/caroline/Documents/GitHub/easybuild-framework/test/framework/modules
== 2015-11-25 10:52:15,429 runpy.EnvironmentModulesC DEBUG Changing LD_LIBRARY_PATH from '' to '' in environment for module command
== 2015-11-25 10:52:15,429 runpy.EnvironmentModulesC DEBUG Changing LD_PRELOAD from '' to '' in environment for module command
== 2015-11-25 10:52:15,430 runpy.EnvironmentModulesC DEBUG Running module command '/usr/bin/modulecmd python load toy/0.0' from /home/caroline/Documents/GitHub/easybuild-framework
== 2015-11-25 10:52:15,460 runpy.EnvironmentModulesC DEBUG Output of module command '/usr/bin/modulecmd python load toy/0.0': stdout: os.environ['EBDEVELTOY'] = '/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/software/toy/0.0/easybuild/toy-0.0-easybuild-devel'
os.environ['EBROOTTOY'] = '/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/software/toy/0.0'
os.environ['EBVERSIONTOY'] = '0.0'
os.environ['LD_LIBRARY_PATH'] = '/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/software/toy/0.0/lib'
os.environ['LIBRARY_PATH'] = '/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/software/toy/0.0/lib'
os.environ['LOADEDMODULES'] = 'toy/0.0'
os.environ['PATH'] = '/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/software/toy/0.0/bin:/usr/lib/lightdm/lightdm:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games'
os.environ['_LMFILES_'] = '/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/modules/all/toy/0.0'
; stderr: 
== 2015-11-25 10:52:15,462 runpy.EnvironmentModulesC DEBUG Correcting paths in $LD_LIBRARY_PATH from ['/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/software/toy/0.0/lib'] to ['/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmpgM5xp7/software/toy/0.0/lib']
== 2015-11-25 10:52:15,463 runpy.EnvironmentModulesC DEBUG Correcting paths in $LD_PRELOAD from [''] to []
== 2015-11-25 10:52:15,465 runpy.easyconfig.templates DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': ['/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmp3eXq8n/toy/0.0/dummy-dummy/toy-0.0/', 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [4, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [{}, "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2015-11-25 10:52:15,469 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:15,470 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:15,471 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:15,471 runpy.easyconfig.templates DEBUG name: name, config: toy
== 2015-11-25 10:52:15,472 runpy.easyconfig.templates DEBUG name: version, config: 0.0
== 2015-11-25 10:52:15,472 runpy.easyconfig.templates DEBUG name: versionsuffix, config: 
== 2015-11-25 10:52:15,473 runpy.easyconfig.templates DEBUG name: versionprefix, config: 
== 2015-11-25 10:52:15,474 runpy.easyconfig.templates DEBUG config: {'preinstallopts': ['', 'Extra prefix options for installation.', (3, 'build')], 'postinstallcmds': [['echo TOY > %(installdir)s/README'], 'Commands to run after the install step.', (3, 'build')], 'moduleloadnoconflict': [False, "Don't check for conflicts, unload other versions instead ", (8, 'modules')], 'skip': [False, 'Skip existing software', (3, 'build')], 'cleanupoldbuild': [True, 'Boolean to remove (True) or backup (False) the previous build directory with identical name or not.', (4, 'file-management')], 'installopts': ['', 'Extra options for installation', (3, 'build')], 'sources': [['%(name)s-%(version)s.tar.gz'], 'List of source files', (3, 'build')], 'versionsuffix': ['', 'Additional suffix for software version (placed after toolchain name)', (3, 'build')], 'license_server': [None, 'License server for software', (6, 'license')], 'modaltsoftname': [None, 'Module name to use (rather than using software name', (8, 'modules')], 'keeppreviousinstall': [False, 'Boolean to keep the previous installation with identical name. Experts only!', (4, 'file-management')], 'hiddendependencies': [[], 'List of dependencies available as hidden modules', (5, 'dependencies')], 'checksums': [[['be662daa971a640e40be5c804d9d7d10', ('adler32', '0x998410035'), ('crc32', '0x1553842328'), ('md5', 'be662daa971a640e40be5c804d9d7d10'), ('sha1', 'f618096c52244539d0e89867405f573fdb0b55b0'), ('size', 273)]], 'Checksums for sources and patches', (3, 'build')], 'keepsymlinks': [False, 'Boolean to determine whether symlinks are to be kept during copying or if the content of the files pointed to should be copied', (4, 'file-management')], 'cleanupoldinstall': [True, 'Boolean to remove (True) or backup (False) the previous install directory with identical name or not.', (4, 'file-management')], 'builddependencies': [[], 'List of build dependencies', (5, 'dependencies')], 'dontcreateinstalldir': [False, 'Boolean to create (False) or not create (True) the install directory', (4, 'file-management')], 'modextravars': [{}, 'Extra environment variables to be added to module file', (8, 'modules')], 'unpack_options': ['', 'Extra options for unpacking source', (3, 'build')], 'group': [None, 'Name of the user group for which the software should be available', (6, 'license')], 'versionprefix': ['', 'Additional prefix for software version (placed before version and toolchain name)', (3, 'build')], 'parsed': [True, 'This is a parsed easyconfig', 'HIDDEN'], 'prebuildopts': ['', 'Extra options pre-passed to build command.', (3, 'build')], 'easybuild_version': [None, 'EasyBuild-version this spec-file was written for', (3, 'build')], 'skipsteps': [[], 'Skip these steps', (3, 'build')], 'start_dir': ['/tmp/eb-qty4tv/eb-xuUnmP/eb-qwbiM6/eb-e94UVj/eb-UzA6sH/eb-TbsZsX/eb-Q4pXyC/eb-_2437N/tmp3eXq8n/toy/0.0/dummy-dummy/toy-0.0/', 'Path to start the make in. If the path is absolute, use that path. If not, this is added to the guessed path.', (4, 'file-management')], 'version': ['0.0', 'Version of software', (0, 'mandatory')], 'exts_filter': [None, 'Extension filter details: template for cmd and input to cmd (templates for name, version and src).', (7, 'extensions')], 'modaliases': [{}, 'Aliases to be defined in module file', (8, 'modules')], 'allow_system_deps': [[], 'Allow listed system dependencies (format: (<name>, <version>))', (5, 'dependencies')], 'osdependencies': [[], 'OS dependencies that should be present on the system', (5, 'dependencies')], 'modluafooter': ['', 'Footer to include in generated module file (Lua syntax)', (8, 'modules')], 'homepage': ['http://hpcugent.github.com/easybuild', 'The homepage of the software', (0, 'mandatory')], 'license_file': [None, 'License file for software', (6, 'license')], 'tests': [[], 'List of test-scripts to run after install. A test script should return a non-zero exit status to fail', (3, 'build')], 'buildopts': ['', 'Extra options passed to make step (default already has -j X)', (3, 'build')], 'description': ['Toy C program.', 'A short description of the software', (0, 'mandatory')], 'modextrapaths': [{}, 'Extra paths to be prepended in module file', (8, 'modules')], 'exts_list': [[], 'List with extensions added to the base installation', (7, 'extensions')], 'docurls': [None, 'List of urls with documentation of the software (not necessarily on homepage)', (0, 'mandatory')], 'stop': [None, 'Keyword to halt the build process after a certain step.', (3, 'build')], 'exts_classmap': [{}, 'Map of extension name to class for handling build and installation.', (7, 'extensions')], 'moduleforceunload': [False, 'Force unload of all modules when loading the extension', (8, 'modules')], 'dependencies': [[], 'List of dependencies', (5, 'dependencies')], 'moduleclass': ['tools', 'Module class to be used for this software', (8, 'modules')], 'key': [None, 'Key for installing software', (6, 'license')], 'include_modpath_extensions': [True, 'Include $MODULEPATH extensions specified by module naming scheme.', (8, 'modules')], 'modtclfooter': ['', 'Footer to include in generated module file (Tcl syntax)', (8, 'modules')], 'modloadmsg': [{}, 'Message that should be printed when generated module is loaded', (8, 'modules')], 'parallel': [4, 'Degree of parallelism for e.g. make (default: based on the number of cores, active cpuset and restrictions in ulimit)', (3, 'build')], 'buildininstalldir': [False, 'Boolean to build (True) or not build (False) in the installation directory', (4, 'file-management')], 'patches': [['toy-0.0_typo.patch', ('toy-extra.txt', 'toy-0.0')], 'List of patches to apply', (3, 'build')], 'sanity_check_paths': [{'files': [('bin/yot', 'bin/toy')], 'dirs': ['bin']}, "List of files and directories to check (format: {'files':<list>, 'dirs':<list>})", (3, 'build')], 'runtest': [None, 'Indicates if a test should be run after make; should specify argument after make (for e.g.,"test" for make test)', (3, 'build')], 'onlytcmod': [False, 'Boolean/string to indicate if the toolchain should only load the environment with module (True) or also set all other variables (False) like compiler CC etc (if string: comma separated list of variables that will be ignored).', (2, 'toolchain')], 'buildstats': [None, 'A list of dicts with build statistics', (9, 'other')], 'unwanted_env_vars': [{}, "List of environment variables that shouldn't be set during build", (3, 'build')], 'name': ['toy', 'Name of software', (0, 'mandatory')], 'recursive_module_unload': [False, 'Recursive unload of all dependencies when unloading module', (8, 'modules')], 'toolchain': [{'version': 'dummy', 'name': 'dummy'}, 'Name and version of toolchain', (0, 'mandatory')], 'preconfigopts': ['', 'Extra options pre-passed to configure.', (3, 'build')], 'maxparallel': [None, 'Max degree of parallelism', (3, 'build')], 'license_server_port': [None, 'Port for license server', (6, 'license')], 'exts_defaultclass': [None, 'List of module for and name of the default extension class', (7, 'extensions')], 'toolchainopts': [None, 'Extra options for compilers', (2, 'toolchain')], 'source_urls': [[], 'List of URLs for source files', (3, 'build')], 'easyblock': [None, 'EasyBlock to use for building; if set to None, an easyblock is selected based on the software name', (3, 'build')], 'sanity_check_commands': [[], "format: [(name, options)] e.g. [('gzip','-h')]. Using a non-tuple is equivalent to (name, '-h')", (3, 'build')], 'software_license': [None, 'Software license', (0, 'mandatory')], 'configopts': ['', 'Extra options passed to configure (default already has --prefix)', (3, 'build')], 'software_license_urls': [None, 'List of software license locations', (0, 'mandatory')]}
== 2015-11-25 10:52:15,476 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:15,476 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:15,477 runpy.easyconfig.templates DEBUG version found in easyconfig is 0.0
== 2015-11-25 10:52:15,477 runpy.easyconfig.templates DEBUG name: name, config: toy
== 2015-11-25 10:52:15,477 runpy.easyconfig.templates DEBUG name: version, config: 0.0
== 2015-11-25 10:52:15,477 runpy.easyconfig.templates DEBUG name: versionsuffix, config: 
== 2015-11-25 10:52:15,477 runpy.easyconfig.templates DEBUG name: versionprefix, config: 
== 2015-11-25 10:52:15,478 runpy.EB_toy INFO Running testcases_test_cases_step step
== 2015-11-25 10:52:15,478 runpy.EB_toy INFO Closing log for application name toy version 0.0
