#!/usr/bin/env python
# #
# Copyright 2009-2014 Ghent University
#
# This file is part of EasyBuild,
# originally created by the HPC team of Ghent University (http://ugent.be/hpc/en),
# with support of Ghent University (http://ugent.be/hpc),
# the Flemish Supercomputer Centre (VSC) (https://vscentrum.be/nl/en),
# the Hercules foundation (http://www.herculesstichting.be/in_English)
# and the Department of Economy, Science and Innovation (EWI) (http://www.ewi-vlaanderen.be/en).
#
# http://github.com/hpcugent/easybuild
#
# EasyBuild is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation v2.
#
# EasyBuild is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with EasyBuild.  If not, see <http://www.gnu.org/licenses/>.
# #
"""
Module which allows the diffing of multiple files

@author: Toon Willems (Ghent University)
"""

import difflib
import os
import sys

import easybuild.tools.terminal as terminal

GREEN = "\033[92m"
PURPLE = "\033[0;35m"
GRAY = "\033[1;37m"
RED = "\033[91m"
ENDC = "\033[0m"

class MultiDiff(object):
    """
    This class holds the diff information
    """

    def __init__(self, base, files):
        self.base = base
        self.base_lines = open(base).readlines()
        self.diff_info = dict()
        self.files = files

    def parse_line(self,line_no, diff_line, meta, squigly_line=None):
        """
        Parse a line as generated by difflib
        """
        if diff_line.startswith('+'):
            action = self._add_diff
        elif diff_line.startswith('-'):
            action = self._remove_diff
        action(line_no, diff_line.rstrip(), meta, squigly_line)

    def __str__(self):
        """
        Write the entire diff to the terminal
        """
        def limit(text, length):
            """ limit text to certain length """
            if len(text) > length:
                return text[0:length-3] + '...'
            else:
                return text

        output = []

        w,h = terminal.get_terminal_size()
        output.append(" ".join(["Comparing", PURPLE, os.path.basename(self.base), ENDC, "with", GRAY, ", ".join(map(os.path.basename,self.files)), ENDC]))

        for i in range(len(self.base_lines)):
            lines = self.get_line(i)
            if filter(None,lines):
                output.append("\n".join([limit(line,w) for line in lines]))

        return "\n".join(output)

    def get_line(self, line_no):
        """
        Return the line information for a specific line
        """
        output = []
        for key in ['removal','addition']:
            lines = set()
            changes_dict = dict()
            squigly_dict = dict()
            if key in self.diff_info.get(line_no, []):
                for (diff_line, meta, squigly_line) in self.diff_info[line_no][key]:
                    if squigly_line:
                        squigly_dict[diff_line] = squigly_line
                    lines.add(diff_line)
                    changes_dict.setdefault(diff_line,set()).add(meta)

            # restrict displaying of removals to 3 groups
            max_groups = 2
            if len(lines) > max_groups:
                # find number of occurences
                count = [(len(changes_dict[line]), line) for line in lines]
                # sort highest first
                lines = sorted(count, key=lambda (length, line): length)
                lines.reverse()
                # limit to max_groups
                lines = [ x for (l,x) in lines][0:max_groups-1]

            for diff_line in lines:
                line = [str(line_no), self._colorize(diff_line, squigly_dict.get(diff_line))]
                files = changes_dict[diff_line]
                num_files = len(self.files)
                if len(files) != num_files:
                    line.extend([GRAY, "\t(%d/%d)" % (len(files), num_files), ', '.join(files), ENDC])
                else:
                    line.extend([GRAY, "\t(%d/%d)" % (len(files), num_files), ENDC])
                output.append(" ".join(line))

        # print seperator
        if self.diff_info.get(line_no, None) and 'addition' not in self.diff_info.get(line_no+1, {}) and 'removal' not in self.diff_info.get(line_no + 1, {}):
            output.append('')
            output.append('-----')
            output.append('')

        return output


    def _remove_diff(self,line_no, diff_line, meta, squigly_line=None):
        if 'removal' not in self.diff_info.setdefault(line_no, {}):
            self.diff_info[line_no]['removal'] = []

        self.diff_info[line_no]['removal'].append((diff_line, meta, squigly_line))

    def _add_diff(self,line_no, diff_line, meta, squigly_line=None):
        if 'addition' not in self.diff_info.setdefault(line_no, {}):
            self.diff_info[line_no]['addition'] = []

        self.diff_info[line_no]['addition'].append((diff_line, meta, squigly_line))

    def _colorize(self, line, squigly):
        chars = list(line)
        flag = ' '
        compensator = 0
        if not squigly:
            if line.startswith('+'):
                chars.insert(0, GREEN)
            elif line.startswith('-'):
                chars.insert(0, RED)
        else:
            for i in range(len(squigly)):
                if squigly[i] == '+' and flag != '+':
                    chars.insert(i+compensator, GREEN)
                    compensator += 1
                    flag = '+'
                if squigly[i] == '^' and flag != '^':
                    color = GREEN if line.startswith('+') else RED
                    chars.insert(i+compensator, color)
                    compensator += 1
                    flag = '^'
                if squigly[i] == '-' and flag != '-':
                    chars.insert(i+compensator, RED)
                    compensator += 1
                    flag = '-'
                if squigly[i] != flag:
                    chars.insert(i+compensator, ENDC)
                    compensator += 1
                    flag = squigly[i]

        chars.append(ENDC)
        return ''.join(chars)

    def _merge_squigly(self, squigly1, squigly2):
        """Combine 2 diff lines into 1 """
        sq1 = list(squigly1)
        sq2 = list(squigly2)
        base,other = (sq1, sq2) if len(sq1) > len(sq2) else (sq2,sq1)

        for i in range(len(other)):
            if base[i] != other[i] and base[i] == ' ':
                base[i] = other[i]
            if base[i] != other[i] and base[i] == '^':
                base[i] = other[i]

        return ''.join(base)

def multi_diff(base,files):
    """
    generate a Diff for multiple files, all compared to base
    """
    d = difflib.Differ()
    base_lines = open(base).readlines()

    differ = MultiDiff(base, files)

    # use the Diff class to store the information
    for file_name in files:
        diff = list(d.compare(open(file_name).readlines(), base_lines))
        file_name = os.path.basename(file_name)

        local_diff = dict()
        squigly_dict = dict()
        last_added = None
        compensator = 1
        for (i, line) in enumerate(diff):
            if line.startswith('?'):
                squigly_dict[last_added] = (line)
                compensator -= 1
            elif line.startswith('+'):
                local_diff.setdefault(i+compensator, []).append((line, file_name))
                last_added = line
            elif line.startswith('-'):
                local_diff.setdefault(i+compensator, []).append((line, file_name))
                last_added = line
                compensator -= 1

        # construct the Diff based on the above dict
        for line_no in local_diff:
            for (line, file_name) in local_diff[line_no]:
                differ.parse_line(line_no, line, file_name, squigly_dict.get(line, None))

    return differ
